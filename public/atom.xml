<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[何幻]]></title>
  <link href="https://thzt.github.io/atom.xml" rel="self"/>
  <link href="https://thzt.github.io/"/>
  <updated>2016-07-18T09:19:22+08:00</updated>
  <id>https://thzt.github.io/</id>
  <author>
    <name><![CDATA[thzt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[挑战极限]]></title>
    <link href="https://thzt.github.io/blog/2016/07/18/overcome-the-limitation/"/>
    <updated>2016-07-18T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/07/18/overcome-the-limitation</id>
    <content type="html"><![CDATA[<p>当初，我们选择了一个喜好的领域，</p>

<p>希望有朝一日能成为专家。</p>

<p><br/></p>

<p>可是，后来才发现，</p>

<p>这个领域中已经有了一大批先行者。</p>

<p>他们的经验十分丰富，而我们没有任何优势。</p>

<p><br/></p>

<p>我们因此变得灰心丧气，迷茫怀疑，</p>

<p>觉得自己不是这块料，</p>

<p>肯定还有更好的机会等着我们。</p>

<p><br/></p>

<p>是啊，再这样下去就完了。</p>

<p><br/></p>

<h3>上限</h3>

<p>我们在入行之时就听前辈说过，</p>

<p>要想成为专家，就必须有效的训练自己一万小时，</p>

<p>于是，那段岁月真是刻骨铭心，</p>

<p>每天都在拼命学习。</p>

<p><br/></p>

<p>这样一晃就是好几年，</p>

<p>我们终于有所小成，</p>

<p>可是越努力，越能清晰发现自己能力的上限。</p>

<p><br/></p>

<p>我们可能无法变得更强了。</p>

<p>天赋使然，哪怕我们再努力。</p>

<p><br/></p>

<h3>动摇</h3>

<p>智者在这时候告诫我们，要发挥优势，</p>

<p>结合自己的优势才能找到方向。</p>

<p><br/></p>

<p>于是，我们动摇了，</p>

<p>真的该去学别的了，</p>

<p>目前这个领域果然不是我们的优势所在。</p>

<p><br/></p>

<p>某人，某某人，我们真的永远没办法超越他们，</p>

<p>所以，我们要学他们不擅长的东西，</p>

<p>用优势挑战劣势。</p>

<p><br/></p>

<h3>短暂</h3>

<p>人生是那么的短暂，</p>

<p>一万小时是如此的漫长，</p>

<p>可是青春不在，我们能有几个一万小时挥霍自如？</p>

<p><br/></p>

<p>在任何其他领域，</p>

<p>上限的问题同样会遇到，</p>

<p>优势同样还会变得不是那么明显。</p>

<p><br/></p>

<p>其他领域的专家也不容易，</p>

<p>实际上，以这样的心态，根本上也做不到。</p>

<p><br/></p>

<p>到那时候，我们又该何去何从呢？</p>

<p><br/></p>

<h3>忍耐</h3>

<p>继续保持训练吧，</p>

<p>不要因为没有明显进步而灰心丧气，</p>

<p>更不要沾沾自喜。</p>

<p><br/></p>

<p>最大化每天的收获，拼的是耐心，</p>

<p>拼的是比别人更迟的放弃。</p>

<p><br/></p>

<p>做科研工作的，未必当时看起来那么有天分，</p>

<p>是数十年的积累和努力，改变了自身。</p>

<p><br/></p>

<p>做教育工作的，成为教师未必有那么强烈的愿望，</p>

<p>是数十年的耳濡目染和刻意进取，改变了心态。</p>

<p><br/></p>

<p>拼不过天赋，只是失败者的借口而已。</p>

<p><br/></p>

<h3>埋头苦干</h3>

<p>努力和成绩并不是一个线性关系，</p>

<p>从90分到100分的努力，</p>

<p>可能十倍或百倍于0到60分的努力。</p>

<p><br/></p>

<p>坚持锻炼，触摸到天花板，</p>

<p>如果感觉到自己不再进步时，</p>

<p>很有可能是因为成绩的变化太小了。</p>

<p><br/></p>

<p>这时候，调整训练方式是对的，但是不要轻言放弃。</p>

<p>这个时候放弃，就放弃了成为专家的机会，</p>

<p>放弃了突破自己，放弃了梦想。</p>

<p><br/></p>

<p>真的，我们天生没有任何优势，</p>

<p>除了埋头苦干。</p>

<p><br/></p>

<h3>怀疑</h3>

<p>我们应该意识到危机，</p>

<p>但同样还要意识到，怀疑自己是再正常不过的心理。</p>

<p><br/></p>

<p>怀疑自己训练方式错了，</p>

<p>怀疑自己的是否不适合，</p>

<p>这都是正常的，每个人都会遇到。</p>

<p><br/></p>

<p>可是，狠下心来，不急于求成，</p>

<p>专注于自己的成长，不看外部表现，</p>

<p>就极少有人能办到。</p>

<p><br/></p>

<p>追求及格的人多了，而追求完美的人少之又少。</p>

<p><br/></p>

<h3>坚持</h3>

<p>永远不要放弃，专家是坚持到最后的人们。</p>

<p><br/></p>

<p>他们有丰富的经验，专注的训练，</p>

<p>有锲而不舍的努力，有不屈不挠的毅力。</p>

<p><br/></p>

<p>永远无法超越他们，因为弱者会动摇。</p>

<p>永远无法打败他们，因为试图打败他们的人们，先输给了自己。</p>

<p><br/></p>

<p>总之，超越自己的次数越多，对手就越少。</p>

<p><br/></p>

<h3>结语</h3>

<p>莫道君行早，更有早行人。</p>

<p>——《增广贤文》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重在表达]]></title>
    <link href="https://thzt.github.io/blog/2016/07/01/the-way-to-express/"/>
    <updated>2016-07-01T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/07/01/the-way-to-express</id>
    <content type="html"><![CDATA[<p>如果我们以发展的眼光来看待自身拥有的技能，</p>

<p>就会发现，</p>

<p>练习和使用是两个不同的概念。</p>

<p><br/></p>

<p>我们可以不断练习，越来越熟练，</p>

<p>还可以花时间练习新的技能。</p>

<p>我们也可以越来越会使用已经学会的技能，</p>

<p>对自己的控制能力越来越强。</p>

<p><br/></p>

<p>这其中隐含了一个客观事实在里面，</p>

<p>那就是技能是永远学不完的，</p>

<p>也永远练习不到足够熟练的程度。</p>

<p><br/></p>

<p>因此，我们就需要在练习和使用之间找到平衡，</p>

<p>什么时候增加熟练度，</p>

<p>什么时候学习新技能，</p>

<p>什么时候练习如何使用它们，</p>

<p>怎样才能做到灵活运用。</p>

<p><br/></p>

<h2><strong>能不能先上手</strong></h2>

<p>如果说计算机行业对比其他行业有门槛的话，</p>

<p>想必就只有一个了，</p>

<p>那就是，是否有能力把目前的疑问放下，以后再绕回来解决。</p>

<p><br/></p>

<p>每个概念在第一次遇到的时候，</p>

<p>是依赖于以后某个未知概念才可以理解的。</p>

<p>因此，我们要首先把它们全都装入大脑中，</p>

<p>然后等时机成熟，触类旁通。</p>

<p><br/></p>

<p>某个概念没有理解，就无法理解后续概念，</p>

<p>或者无法使用没有理解的概念，</p>

<p>这是软件从业者最大的障碍。</p>

<p><br/></p>

<p>我们可以设想这样一个场景，</p>

<p>假如我们曾经理解过，但是现在印象模糊了，</p>

<p>那么还不是一样使用它吗？</p>

<p><br/></p>

<p>直觉，和依靠不足的信息进行决策的能力，</p>

<p>也是需要锻炼的。</p>

<p><br/></p>

<h2><strong>什么是基础</strong></h2>

<p>很多人都强调基础的重要性，</p>

<p>那么什么是基础呢？</p>

<p>对软件行业来说，哪些是基础呢？</p>

<p><br/></p>

<p>基础，就是那些，</p>

<p>你感觉用不着，但如果成为专家是显然需要的知识。</p>

<p><br/></p>

<p>是的，那些用不着的知识，</p>

<p>潜移默化的影响着你，</p>

<p>影响每一招每一式的施展，</p>

<p>这才是基础。</p>

<p><br/></p>

<p>例如，我们在做Web开发，</p>

<p>那么网络技术，编译原理，算法，设计模式，等等都是基础。</p>

<p>它们能让我们跳出当前的场景看待问题。</p>

<p><br/></p>

<p>那如果我们做编译器的开发呢，</p>

<p>那么形式语言理论，语义学，类型理论，数理逻辑，等等都是基础。</p>

<p>再深入下去还有，</p>

<p>可见，基础之下还有基础，像冰山一样隐藏在水面之下。</p>

<p><br/></p>

<h2><strong>关键在哪</strong></h2>

<p>如果用一句话形容软件工程师的工作，</p>

<p>我想说，软件工程师，就是用DSL降低问题复杂度的人们。</p>

<p>各行各业解决问题的角度都有不同，</p>

<p>而软件工程师，独爱DSL——领域特定语言。</p>

<p><br/></p>

<p>既然和语言有关，那就需要很强的表达能力，</p>

<p>像优秀的作家一样，词汇量固然重要，</p>

<p>但是如果要让人耐看，就必须表达的好。</p>

<p><br/></p>

<p>因此重点在于设计这些DSL的描述方式上，</p>

<p>在于如何使用已有的知识，进行整合。</p>

<p>这是一种创造性的活动。</p>

<p><br/></p>

<p>拿个篮球活动的例子来引出问题吧，</p>

<p>我曾问过高手们一个问题，</p>

<p>“你怎样保证失误率那么低的？”</p>

<p>“两个办法，训练时努力降低失误率，比赛时，不用失误率高的动作”。</p>

<p><br/></p>

<p>这给了我很强的启示，</p>

<p>原来如何使用是一门艺术，</p>

<p>使用方式决定了最后的表现。</p>

<p><br/></p>

<h2><strong>那么路线是什么</strong></h2>

<p>综上所述，我们得到了一个从入门到成熟的行走路线，</p>

<p>首先，我们要不求甚解的往大脑中塞下很多东西，</p>

<p>并强迫自己使用，还要有足够好的恒心让自己一遍一遍重新回来琢磨它。</p>

<p><br/></p>

<p>然后，我们要向下挖掘那些看起来没用的，但成为专家显然需要的知识。</p>

<p>把这些知识放在水面下，用露出的那一点点“细枝末节”去应付浮躁的潮流。</p>

<p>这样就不会随波逐流了，水深才会心静，心静而气自闲。</p>

<p><br/></p>

<p>最后，我们把重点放在表达上，</p>

<p>不要使用那些不熟练的知识，它们是训练时攻克的目标。</p>

<p>要有能力在紧要关头只用熟练的知识解决问题。</p>

<p><br/></p>

<p>为什么会失误？是因为本来就没有多大可能它会成功。</p>

<p>那么为什么还要用它，而不去选择其他成功率高的方式？</p>

<p>因为没有成功率高的方式吗？那为什么不去训练？</p>

<p>没有什么好练的啊？把那些计划以后再练的练了吧。</p>

<p><br/></p>

<p>这样就变成了一个以训练为本，重在表达的正向循环了。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>做到随机应变，并不是一件容易的事情，</p>

<p>要么基本功太弱，要么没有控制自己的能力总是想使用不纯熟的技能。</p>

<p><br/></p>

<p>没有在比赛场上训练的选手，</p>

<p>也没有线上环境试错的码农。</p>

<p><br/></p>

<p>大家都在打基础，练表达，</p>

<p>基本功诚然重要，但是打基础大家都懂，不是盲区，</p>

<p>重在表达，就很少有人意识到了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不动点算子与完全偏序]]></title>
    <link href="https://thzt.github.io/blog/2016/06/25/complete-partial-order/"/>
    <updated>2016-06-25T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/06/25/complete-partial-order</id>
    <content type="html"><![CDATA[<script src="https://thzt.github.io/thirdpart/jQuery/jquery-1.11.1.js"></script>


<p><link href="https://thzt.github.io/thirdpart/KaTeX/katex.min.css" rel="stylesheet"/></p>

<script src="https://thzt.github.io/thirdpart/KaTeX/katex.min.js"></script>


<script src="https://thzt.github.io/javascripts/katex.js"></script>


<h2><strong>域论模型</strong></h2>

<p>类型化lambda演算，有两个常用模型。</p>

<p>其一，域论模型。其二，递归函数论模型。</p>

<p><br/></p>

<p>在众多域论模型中，</p>

<p>主要关心的是一种具有完全偏序（complete partial order）结构的域，简称CPO。</p>

<p>研究它的主要原因是，它是带有不动点算子的模型，</p>

<p>而且它还提供了一种解释递归类型表达式的方法。</p>

<p>域论方法是递归函数论模型的基础。</p>

<p><br/></p>

<h2><strong>递归</strong></h2>

<p>加入递归之后，对表达式进行归约就可能会无限的进行下去，</p>

<p>因此将出现没有范式（normal form）的表达式。</p>

<p>于是，把每个表达式指称为一个数值，这种想法就可能有问题了。</p>

<p>下面我们引入不动点算子（fixed-point operator），用来它定义递归。</p>

<p><br/></p>

<p><span data-katex="letrec~f:\sigma=M~in~N"></span></p>

<p>它表示<span data-katex="N"></span>，但是<span data-katex="N"></span>中f的值，是等式<span data-katex="f=M"></span>的解。</p>

<p>而<span data-katex="M"></span>中可能会包含<span data-katex="f"></span>。</p>

<p><span data-katex="M"></span>的类型根据等式<span data-katex="f=M"></span>也是<span data-katex="\sigma"></span>。</p>

<p><br/></p>

<p>我们将看到，<span data-katex="letrec"></span>是<span data-katex="let"></span>与不动点算子的语法糖（syntactic sugar）。</p>

<p>首先，我们先用<span data-katex="letrec"></span>定义阶乘函数，来计算<span data-katex="5!"></span>。</p>

<p><span data-katex="letrec~f:nat\rightarrow nat=\lambda y:nat.~(if~Eq?~y~0~then~1~else~y*f(y-1))~in~f~5"></span></p>

<p><br/></p>

<p>其中<span data-katex="f"></span>是下列等式的解。</p>

<p><span data-katex="f=\lambda y:nat.~if~Eq?~y~0~then~1~else~y*f(y-1)"></span></p>

<p><br/></p>

<h2><strong>不动点算子</strong></h2>

<p>从数学的角度来看，并不是所有形如<span data-katex="f:\sigma =M"></span>的等式都有解，</p>

<p>如果有多个解，也不知道选择哪个解。</p>

<p>我们先假设每个这样的等式都有解，为此我们增加一个不动点算子来得到这个解。</p>

<p><br/></p>

<p>一般的，如果<span data-katex="F:\sigma \rightarrow \sigma"></span>是某一类型到自身的函数。</p>

<p>那么<span data-katex="F"></span>的一个不动点，是使得<span data-katex="x=F(x)"></span>的值<span data-katex="x:\sigma"></span>。</p>

<p><br/></p>

<p>经过观察我们发现，阶乘函数<span data-katex="f"></span>是以下函数的<span data-katex="F"></span>的不动点，即满足<span data-katex="f=F(f)"></span>。</p>

<p><span data-katex="F=_{def}\lambda f:nat\rightarrow nat.~\lambda y:nat.~if~Eq?~y~0~then~1~else~y*f(y-1)"></span></p>

<p>其中，<span data-katex="f:nat\rightarrow nat"></span>，<span data-katex="F:(nat\rightarrow nat)\rightarrow (nat\rightarrow nat)"></span></p>

<p><br/></p>

<p>我们定义，<span data-katex="fix_\sigma :(\sigma \rightarrow \sigma )\rightarrow \sigma"></span>，是对应于每个类型<span data-katex="\sigma"></span>的不动点算子。</p>

<p>满足的如下等式公理，</p>

<p><span data-katex="fix_\sigma =\lambda f:\sigma \rightarrow \sigma .~f(fix_\sigma f)"></span></p>

<p><br/></p>

<p>可知，对任意的<span data-katex="F:\sigma \rightarrow \sigma"></span>，<span data-katex="fix_\sigma F"></span>是<span data-katex="F"></span>的不动点，即，</p>

<p><span data-katex="fix_\sigma F=F(fix_\sigma F)"></span></p>

<p><br/></p>

<p>我们就可以用<span data-katex="let"></span>和<span data-katex="fix_\sigma"></span>表示<span data-katex="letrec"></span>了。</p>

<p><span data-katex="letrec~f:\sigma =M~in~N=_{def}let~f:\sigma =(fix_\sigma \lambda f:\sigma .~M)~in~N"></span></p>

<p><br/></p>

<h2><strong>归约</strong></h2>

<p>我们以阶乘函数为例，来说明带有不动点算子的表达式是如何归约的。</p>

<p>为了行文方便，我们省略<span data-katex="fix_{nat\rightarrow nat}"></span>的下标，直接记为<span data-katex="fix"></span>。</p>

<p>定义阶乘函数<span data-katex="fact=_{def}fix~F"></span>，其中，</p>

<p><span data-katex="F=_{def}\lambda f:nat\rightarrow nat.~\lambda y:nat.~if~Eq?~y~0~then~1~else~y*f(y-1)"></span></p>

<p><br/></p>

<p>我们来计算<span data-katex="fact~n"></span>。</p>

<p><span data-katex="fact~n=(fix~F)~n"></span></p>

<p><span data-katex="=((\lambda f:nat\rightarrow nat.~f(fix~f))~F)~n"></span></p>

<p><span data-katex="=(F~(fix~F))~n"></span></p>

<p><span data-katex="=((\lambda f:nat\rightarrow nat.~\lambda y:nat.~if~Eq?~y~0~then~1~else~y*f(y-1))~(fix~F))~n"></span></p>

<p><span data-katex="=(if~Eq?~n~0~then~1~else~n*(fix~F))~(n-1)"></span></p>

<p><br/></p>

<h2><strong>无法终止的运算</strong></h2>

<p>由于递归允许我们写出没有范式的表达式，</p>

<p>所以我们相应的必须给这样的表达式赋予含义。</p>

<p><br/></p>

<p>例如，</p>

<p><span data-katex="letrec~f:nat\rightarrow nat=\lambda x:nat.~f(x+1)~in~f~3"></span></p>

<p>尽管该表达式的类型是<span data-katex="nat"></span>，但是我们无法把它简化为一个数值。</p>

<p>所以该表达式的含义就不是一个自然数了。</p>

<p><br/></p>

<p>一方面，认为该表达式的类型是<span data-katex="nat"></span>是合理的，它是类型规则的推导结论。</p>

<p>另一方面，如果我们说该表达式的值是『未定义的』，</p>

<p>那么<span data-katex="f"></span>的语义就变成了部分函数（partial function）。</p>

<p><br/></p>

<p>我们不如给自然数集附加一个值<span data-katex="\perp _{nat}"></span>，</p>

<p>用来表示类型<span data-katex="nat"></span>上无法终止的运算（nonterminating computation）。</p>

<p>这给了我们一个把部分函数看成完全函数（total function）的方法。</p>

<p><br/></p>

<h2><strong>CPO</strong></h2>

<p><strong>偏序</strong></p>

<p>一个偏序（partial order）<span data-katex="\left \langle D,\leqslant  \right \rangle"></span>是一个集合<span data-katex="D"></span>，以及集合上的一个关系（relation）<span data-katex="\leqslant"></span>，</p>

<p>这个关系具有自反性，反对称性，和传递性。</p>

<p><br/></p>

<p>若对于任意<span data-katex="d\in D"></span>有<span data-katex="d\leqslant d"></span>，则称<span data-katex="\leqslant"></span>具有自反性（reflexive）。</p>

<p>若<span data-katex="a\leqslant b"></span>且<span data-katex="b\leqslant a"></span>有<span data-katex="a=b"></span>，则称<span data-katex="\leqslant"></span>具有反对称性（anti-symmetric）。</p>

<p>若<span data-katex="a\leqslant b"></span>且<span data-katex="b\leqslant c"></span>有<span data-katex="a\leqslant c"></span>，则称<span data-katex="\leqslant"></span>具有传递性（transitive）。</p>

<p><br/></p>

<p><strong>上界与最小上界</strong></p>

<p>如果<span data-katex="\left \langle D,\leqslant  \right \rangle"></span>是一个偏序，则子集<span data-katex="S\subseteq D"></span>的上界（upper bound），</p>

<p>是<span data-katex="D"></span>中的一个元素<span data-katex="x\in D"></span>，使得对于任意的<span data-katex="y\in S"></span>有<span data-katex="y\leqslant x"></span>。</p>

<p>最小上界（least upper bound）是那个<span data-katex="\leqslant"></span>任何其它上界的元素。</p>

<p><br/></p>

<p><strong>有向集</strong></p>

<p>如果<span data-katex="\left \langle D,\leqslant  \right \rangle"></span>是一个偏序，称子集<span data-katex="S\subseteq D"></span>是有向的（directed），</p>

<p>如果<span data-katex="S"></span>的每一个有限子集<span data-katex="S_0\subseteq S"></span>在<span data-katex="S"></span>中都有上界。</p>

<p>有向集（directed set）的一个性质是，所有有向集都非空。</p>

<p><br/></p>

<p><strong>完全偏序</strong></p>

<p>完全偏序（complete partial order）简称CPO，它是一个偏序<span data-katex="\left \langle D,\leqslant  \right \rangle"></span>，</p>

<p>且每一个有向子集<span data-katex="S\subseteq D"></span>都有最小上界，我们把这个最小上界记为<span data-katex="\bigvee S"></span>。</p>

<p>可证，任何一个有限的偏序，都是完全偏序。</p>

<p><br/></p>

<p>一个不是CPO的例子是自然数集，自然数集<span data-katex="N"></span>本身是有向的，但没有最小上界。</p>

<p>如果我们加入一个比其他自然数都大的元素<span data-katex="\infty"></span>，我们就得到了一个CPO。</p>

<p><br/></p>

<h2><strong>CPO的提升</strong></h2>

<p><strong>有奇点的CPO</strong></p>

<p>如果<span data-katex="\mathscr{D}=\left \langle D,\leqslant  \right \rangle"></span>是一个有最小元（least element）的偏序，</p>

<p>则称为<span data-katex="\mathscr{D}"></span>是有奇点（pointed）的，我们用<span data-katex="\perp _D"></span>表示<span data-katex="D"></span>的最小元。</p>

<p><br/></p>

<p><strong>提升集</strong></p>

<p>对于任意的集合<span data-katex="A"></span>，我们构建一个CPO，<span data-katex="A_\perp =\left \langle A\cup \{\perp \} ,\leqslant  \right \rangle"></span>，</p>

<p>其中，<span data-katex="x\leqslant y"></span>当且仅当<span data-katex="x=\perp"></span>或<span data-katex="x=y"></span>。</p>

<p>我们称<span data-katex="A_\perp"></span>为<span data-katex="A"></span>的提升集（lifted set）。</p>

<p><br/></p>

<p>用这个方法，我们可以提升任何一个CPO，<span data-katex="\mathscr{D}=\left \langle D,\leqslant _D  \right \rangle"></span>，</p>

<p>得到<span data-katex="\mathscr{D}_\perp =\left \langle D\cup \{\perp \},\leqslant \right \rangle"></span>，</p>

<p>其中<span data-katex="\perp"></span>与<span data-katex="D"></span>中的任何元素都不等，新的序关系<span data-katex="x\leqslant y"></span>当且仅当<span data-katex="x=\perp"></span>或<span data-katex="x\leqslant _D y"></span>。</p>

<p><br/></p>

<p>可证，如果<span data-katex="\mathscr{D}"></span>是一个CPO，则<span data-katex="\mathscr{D}_\perp"></span>是一个有奇点的CPO。</p>

<p><br/></p>

<h2><strong>连续函数</strong></h2>

<p><strong>单调函数</strong></p>

<p>设<span data-katex="\mathscr{D}=\left \langle D,\leqslant _D \right \rangle"></span>和<span data-katex="\mathscr{E}=\left \langle E,\leqslant _E \right \rangle"></span>是CPO，</p>

<p><span data-katex="f:D\rightarrow E"></span>是集合<span data-katex="D"></span>到<span data-katex="E"></span>的一个函数，我们说<span data-katex="f"></span>是单调的（monotonic），</p>

<p>如果<span data-katex="a\leqslant b"></span>就有<span data-katex="f(a)\leqslant f(b)"></span>。</p>

<p><br/></p>

<p><strong>连续函数</strong></p>

<p>一个单调函数<span data-katex="f"></span>是连续的（continuous），如果对于任意有向子集<span data-katex="S\subseteq D"></span>，有<span data-katex="f(\bigvee S)=\bigvee f(S)"></span>。</p>

<p><br/></p>

<p><strong>提升函数</strong></p>

<p>我们定义<span data-katex="f:D\rightarrow E"></span>对应的提升函数（lifted function）为<span data-katex="f_\perp =(D\cup\{ \perp \})\rightarrow (E\cup\{ \perp \})"></span>。</p>

<p>其中，如果<span data-katex="a\in D"></span>，则<span data-katex="f_\perp (a)=f(a)"></span>，否则<span data-katex="f_\perp (a)=\perp"></span>。</p>

<p><br/></p>

<p><strong>函数集构成CPO</strong></p>

<p>假设<span data-katex="\mathscr{D}=\left \langle D,\leqslant _D \right \rangle"></span>和<span data-katex="\mathscr{E}=\left \langle E,\leqslant _E \right \rangle"></span>是CPO，</p>

<p>对于连续函数<span data-katex="f,g:D\rightarrow E"></span>，我们称<span data-katex="f\leqslant_{D\rightarrow E} g"></span>，如果对于任意<span data-katex="d\in D"></span>，都有<span data-katex="f(d)\leqslant _E g(d)"></span>。</p>

<p>于是，所有这些连续函数构成了一个CPO，记为<span data-katex="\mathscr{D}\rightarrow \mathscr{E}=\left \langle D\rightarrow E,\leqslant _{D\rightarrow E} \right \rangle"></span>。</p>

<p><br/></p>

<h2><strong>最小不动点</strong></h2>

<p>我们称<span data-katex="a"></span>是<span data-katex="f"></span>的最小不动点（least fixed point），</p>

<p>如果<span data-katex="a=f(a)"></span>且对于任意的<span data-katex="b=f(b)"></span>，我们有<span data-katex="a\leqslant b"></span>。</p>

<p><br/></p>

<p>如果<span data-katex="\mathscr{D}"></span>是一个有奇点的CPO，且<span data-katex="f:D\rightarrow D"></span>是连续的，则<span data-katex="f"></span>有最小不动点，</p>

<p><span data-katex="fix_D f=\bigvee \{ f^n(\perp )~|~n\geqslant 0 \}"></span>，</p>

<p>且<span data-katex="fix_D"></span>是连续的。</p>

<p><br/></p>

<p>例如，设<span data-katex="\mathscr{D}=\left \langle D,\leqslant _D \right \rangle"></span>是有奇点的CPO，则恒等函数<span data-katex="id:D\rightarrow D"></span>的最小不动点是<span data-katex="\perp _D"></span>。</p>

<p><span data-katex="fix_D~id=\bigvee \{ id^n(\perp _D)~|~n\geqslant 0 \}=\bigvee \{ \perp _D \}=\perp _D"></span></p>

<h2><strong>结语</strong></h2>

<p>初等数学中，某些函数是没有不动点的。</p>

<p>那么在什么情况下，形如<span data-katex="f:\sigma =M"></span>的表达式有解呢？</p>

<p>定义了递归之后，对类型化lambda演算的模型产生了什么影响呢？</p>

<p><br/></p>

<p>这是一直以来我心中是一个问题。</p>

<p>诚然，类型化lambda演算有不同的解释方式，但以上域论模型通俗易懂，</p>

<p>也算是告一段落吧，以后的路还长着呢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[代数数据类型的语法和语义]]></title>
    <link href="https://thzt.github.io/blog/2016/06/08/algebraic-data-type/"/>
    <updated>2016-06-08T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/06/08/algebraic-data-type</id>
    <content type="html"><![CDATA[<script src="https://thzt.github.io/thirdpart/jQuery/jquery-1.11.1.js"></script>


<p><link href="https://thzt.github.io/thirdpart/KaTeX/katex.min.css" rel="stylesheet"/></p>

<script src="https://thzt.github.io/thirdpart/KaTeX/katex.min.js"></script>


<script src="https://thzt.github.io/javascripts/katex.js"></script>


<h3><strong>代数数据类型</strong></h3>

<p>一个代数数据类型，由值的一些集合，以及这些集合之间的一些函数构成。</p>

<p>这些函数都是一阶函数，不能以其他函数作为参数。</p>

<p><br/></p>

<h3><strong>泛代数</strong></h3>

<p>泛代数（universal algebra）也称为等式逻辑（equational logic），</p>

<p>是用于研究代数数据类型的一个数学框架。</p>

<p><br/></p>

<p>在泛代数中，代数数据类型的语法由代数项（algebraic term）描述，公理语义用项之间的等式集（a set of equations）描述，</p>

<p>而指称语义对应于一个<span data-katex="\Sigma"></span>代数，操作语义通过给等式设定方向来表示。</p>

<hr />

<h2><strong>代数数据类型的语法</strong></h2>

<h3><strong>代数项和签名</strong></h3>

<p>一个代数项（algebraic term）由符号和类型来定义，</p>

<p>这些信息放在一起称为代数项的签名（signature）。</p>

<p><br/></p>

<p>构成代数项的基本类型称为sort。</p>

<p><br/></p>

<p>一个签名<span data-katex="\Sigma=\left \langle S,F \right \rangle"></span>，由以下几个部分构成，</p>

<p>（1）以sort为元素构成的集合</p>

<p>（2）sort上函数符号的集合<span data-katex="F=\left \{ f:s_1\times \cdots \times s_k\rightarrow s \right \}"></span></p>

<p>其中，<span data-katex="s_1,\cdots ,s_k,s\in S"></span>，<span data-katex="f"></span>称为类型化的函数符号，</p>

<p>每个函数符号的类型是唯一的。</p>

<p><br/></p>

<p>例如，自然数表达式的签名是<span data-katex="\Sigma_N=\left \langle S,F \right \rangle"></span>，</p>

<p>其中<span data-katex="S=\left \{ nat \right \}"></span>，只包含一个sort，</p>

<p><span data-katex="F"></span>给出以下几个函数符号，</p>

<p><span data-katex="0:nat"></span>，<span data-katex="1:nat"></span>，<span data-katex="+:nat\times nat\rightarrow nat"></span>，<span data-katex="*:nat\times nat\rightarrow nat"></span>。</p>

<p>习惯上为了节省空间，通常把签名写成一个表格形式，</p>

<p><span data-katex="sorts:nat"></span></p>

<p><span data-katex="fctns:0,1:nat"></span></p>

<p><span data-katex="+,*:nat\times nat\rightarrow nat"></span></p>

<p><br/></p>

<h3><strong>变量的指派</strong></h3>

<p>一个指派（sort assignment），是如下一个有限集合，用来指定变量的类型，</p>

<p><span data-katex="\Gamma=\left \{ x_1:s_1,\cdots ,x_k:s_k \right \}"></span></p>

<p>不能为同一个变量指派不同的sort。</p>

<p><br/></p>

<h3><strong>合法代数项的集合</strong></h3>

<p>基于签名<span data-katex="\Sigma"></span>和指派<span data-katex="\Gamma"></span>，可以定义一个sort为<span data-katex="s"></span>的代数项的集合<span data-katex="Terms^s\left ( \Sigma,\Gamma \right )"></span>，</p>

<p>它满足以下几个条件，</p>

<p>（1）如果<span data-katex="x:s\in \Gamma"></span>则<span data-katex="x\in Terms^s\left ( \Sigma,\Gamma \right )"></span></p>

<p>（2）如果<span data-katex="f:s_1\times \cdots \times s_k\rightarrow s"></span>且<span data-katex="M_i\in Terms^{s_i}\left ( \Sigma,\Gamma \right )"></span>，</p>

<p><span data-katex="i=1,\cdots ,n"></span>，则<span data-katex="fM_1\cdots M_k\in Terms^s\left ( \Sigma,\Gamma \right )"></span></p>

<hr />

<h2><strong>代数数据类型的指称语义</strong></h2>

<h3><strong><span data-katex="\Sigma"></span>代数</strong></h3>

<p><span data-katex="\Sigma"></span>代数是一种数学结构，它为代数项提供了含义或指称语义。</p>

<p><br/></p>

<p>一个<span data-katex="\Sigma"></span>代数，包含了一个或多个集合，称为载体（carrier），</p>

<p>以及一些特征元素，和载体上的一些一阶函数，</p>

<p><span data-katex="f:A_1\times \cdots \times A_k \rightarrow A"></span></p>

<p><br/></p>

<p>例如，<span data-katex="\Sigma"></span>代数<span data-katex="\mathscr{N}=\left \langle N,0,1,+,* \right \rangle"></span></p>

<p>具有载体<span data-katex="N"></span>，它是自然数集，</p>

<p>具有特征元素，<span data-katex="0,1\in N"></span>，</p>

<p>以及函数，<span data-katex="+,*:N \times N \rightarrow N"></span>。</p>

<p>其中，特征元素可以看成零元函数。</p>

<p><br/></p>

<p>带有多个载体的例子是<span data-katex="\Sigma"></span>代数<span data-katex="\mathscr{A}_{pcf}=\left \langle N,B,0,1,\cdots ,+,true,false,Eq?,\cdots ,\right \rangle"></span></p>

<p>其中<span data-katex="N"></span>是自然数集，<span data-katex="B"></span>是布尔值集，</p>

<p><span data-katex="0,1,\cdots"></span>是自然数，<span data-katex="+"></span>是加法函数。</p>

<p><br/></p>

<h3><strong>代数项的解释</strong></h3>

<p>我们说<span data-katex="\mathscr{A}=\left \langle \left \{ A^s \right \}_{s\in S}, \mathscr{I} \right \rangle"></span>是与所有合法代数项<span data-katex="\left \{ Terms^s\left ( \Sigma,\Gamma \right ) \right \}_{s\in S}"></span>对应的<span data-katex="\Sigma"></span>代数，</p>

<p>指的是如下对应关系成立，</p>

<p>（1）每一个sort，<span data-katex="s\in S"></span>，恰好对应一个载体<span data-katex="A^s"></span></p>

<p>（2）每一个函数符号<span data-katex="f:s_1\times \cdots \times s_k\rightarrow s"></span>，恰好对应一个函数<span data-katex="\mathscr{I}(f):A^{s_1}\times \cdots \times A^{s_k}\rightarrow A^s"></span></p>

<p>习惯上把<span data-katex="\mathscr{I}(f)"></span>写成<span data-katex="f^{\mathscr{A}}"></span>。</p>

<p><br/></p>

<h3><strong>含变量代数项的解释</strong></h3>

<p><span data-katex="\Sigma"></span>代数<span data-katex="\mathscr{A}"></span>的环境<span data-katex="\eta"></span>，是把变量映射到<span data-katex="\mathscr{A}"></span>的各载体中元素的一个映射。</p>

<p><span data-katex="\eta :\mathscr{V} \rightarrow\cup _sA^s"></span></p>

<p>需要环境的原因是，对于含变量<span data-katex="x"></span>的项<span data-katex="M"></span>，叙述<span data-katex="M"></span>的含义必须先给<span data-katex="x"></span>指定一个确定的值。</p>

<p>如果对于每个<span data-katex="x:s\in \Gamma"></span>，都有<span data-katex="\eta (x)\in A^s"></span>，就说环境<span data-katex="\eta"></span>满足指派<span data-katex="\Gamma"></span>。</p>

<p><br/></p>

<p>假定<span data-katex="\Sigma"></span>代数<span data-katex="\mathscr{A}"></span>的一个环境<span data-katex="\eta"></span>满足指派<span data-katex="\Gamma"></span>，</p>

<p>则可以把环境<span data-katex="\eta"></span>下的任何项<span data-katex="M\in Terms\left ( \Sigma ,\Gamma \right )"></span>的含义<span data-katex="\mathscr{A}[[M]]\eta"></span>定义如下，</p>

<p>（1）<span data-katex="\mathscr{A}[[M]]\eta =\eta (x)"></span></p>

<p>（2）<span data-katex="\mathscr{A}[[fM_1\cdots M_k]]\eta =f^{\mathscr{A}}(\mathscr{A}[[M_1]]\eta ,\cdots ,\mathscr{A}[[M_k]]\eta )"></span></p>

<p><br/></p>

<p>若<span data-katex="\Sigma"></span>代数<span data-katex="\mathscr{A}"></span>在上下文中是明确的，通常省略<span data-katex="\mathscr{A}"></span>而直接写<span data-katex="[[M]]\eta"></span>，</p>

<p>若<span data-katex="M"></span>中没有变量，则<span data-katex="\mathscr{A}[[M]]\eta"></span>不依赖于<span data-katex="\eta"></span>，可以写为<span data-katex="\mathscr{A}[[M]]"></span>。</p>

<hr />

<h2><strong>语法和语义的关系</strong></h2>

<h3><strong>可靠性与完备性</strong></h3>

<p>代数数据类型的公理语义是由代数项之间的等式集给出的，签名和等式集合称代数规范（algebraic specification）。</p>

<p>一个代数规范，或者可以使用等式证明系统推导出代数项之间的其他等式，或者可以检验代数项对应的<span data-katex="\Sigma"></span>代数是否满足这些等式的要求。</p>

<p><br/></p>

<p>代数项对应的<span data-katex="\Sigma"></span>代数并不是唯一的。</p>

<p>从一个代数规范推导得到的等式，在该规范对应的任何<span data-katex="\Sigma"></span>代数中都成立，就称该代数证明系统是可靠的（sound）。</p>

<p>一个代数规范对应的任何<span data-katex="\Sigma"></span>代数中都成立的等式，在该规范中都可证，就称该代数证明系统是完备的（complete）。</p>

<p><br/></p>

<h3><strong>等式的可满足性</strong></h3>

<p>等式（equation）是一个公式<span data-katex="M=N[\Gamma ]"></span>，其中<span data-katex="M,N\in Terms^s\left ( \Sigma ,\Gamma \right )"></span>，<span data-katex="s\in S"></span>。</p>

<p>如果环境<span data-katex="\eta"></span>满足指派<span data-katex="\Gamma"></span>，且<span data-katex="[[M]]\eta =[[N]]\eta"></span>，</p>

<p>就说<span data-katex="\Sigma"></span>代数<span data-katex="\mathscr{A}"></span>在环境<span data-katex="\eta"></span>下满足<span data-katex="M=N[\Gamma ]"></span>，记为</p>

<p><span data-katex="\mathscr{A},\eta \models M=N[\Gamma]"></span></p>

<p><br/></p>

<p>对于含变量的项，我们更感兴趣的是一个等式是否在变量所有可能的取值情况下都成立，</p>

<p>而不是在一个特别的环境中成立。</p>

<p>如果对于满足<span data-katex="\Gamma"></span>的任何一个环境<span data-katex="\eta"></span>都有<span data-katex="\mathscr{A},\eta \models M=N[\Gamma]"></span>，</p>

<p>就可以说，<span data-katex="\Sigma"></span>代数<span data-katex="\mathscr{A}"></span>满足等式<span data-katex="M=N[\Gamma ]"></span>，记为</p>

<p><span data-katex="\mathscr{A} \models M=N[\Gamma]"></span></p>

<p><br/></p>

<p>可满足性也可以扩展到等式集和代数集，</p>

<p>设<span data-katex="E"></span>是一个等式集，如果<span data-katex="\mathscr{A}"></span>满足所有等式，就说<span data-katex="\mathscr{A}"></span>满足<span data-katex="E"></span>。</p>

<p>类似的，若<span data-katex="C"></span>是一类<span data-katex="\Sigma"></span>代数，且对每个<span data-katex="\mathscr{A}\in C"></span>都有<span data-katex="\mathscr{A}\models M=N[\Gamma ]"></span>，则<span data-katex="C\models M=N[\Gamma ]"></span></p>

<p><br/></p>

<p>若任何一个<span data-katex="\Sigma"></span>代数都满足代数项之间的等式<span data-katex="M=N[\Gamma ]"></span>，就说该等式是永真的（valid），写为<span data-katex="\models M=N[\Gamma ]"></span>。</p>

<p>例如，<span data-katex="x=x[x:s]"></span>就是永真的。</p>

<p><br/></p>

<p>若<span data-katex="\mathscr{A}"></span>满足签名<span data-katex="\Sigma=\left \langle S,F \right \rangle"></span>上的所有等式，就说<span data-katex="\Sigma"></span>代数是平凡的（trivial）。</p>

<p><br/></p>

<h3><strong>语义蕴含（semantic implication）</strong></h3>

<p>若满足等式集<span data-katex="E"></span>的每一个<span data-katex="\Sigma"></span>代数<span data-katex="\mathscr{A}"></span>都满足等式<span data-katex="M=N[\Gamma ]"></span>，</p>

<p>则称签名<span data-katex="\Sigma"></span>上的等式集<span data-katex="E"></span>在语义上蕴含等式<span data-katex="M=N[\Gamma ]"></span>，记为，</p>

<p><span data-katex="E\models M=N[\Gamma ]"></span></p>

<p><br/></p>

<p>有了签名<span data-katex="\Sigma"></span>和等式集<span data-katex="E"></span>，我们定义代数规范<span data-katex="Spec=\left \langle \Sigma,E \right \rangle"></span>，</p>

<p>则满足代数规范的，在所有<span data-katex="\Sigma"></span>代数中都成立的等式，就是那些由等式集<span data-katex="E"></span>语义蕴含的等式。</p>

<p><br/></p>

<h3><strong>语义理论</strong></h3>

<p>如果等式集<span data-katex="E"></span>在语义蕴含下封闭（closed），则把它称为一个理论（theory）。</p>

<p>更准确的说，如果<span data-katex="E\models M=N[\Gamma ]"></span>，则<span data-katex="M=N[\Gamma ]\in E"></span>，那么等式集<span data-katex="E"></span>就称为一个语义理论（semantic theory）。</p>

<p>一个<span data-katex="\Sigma"></span>代数<span data-katex="\mathscr{A}"></span>的理论<span data-katex="Th(\mathscr{A})"></span>，就是在<span data-katex="\mathscr{A}"></span>中成立的所有等式的集合。</p>

<p>可以证明一个<span data-katex="\Sigma"></span>代数的理论是一个语义理论。</p>

<p><br/></p>

<h3><strong>形式证明</strong></h3>

<p>一个证明系统的推导规则如下，<span data-katex="\frac{antecedent}{consequent}"></span>，</p>

<p>使得从前件（antecedent）的任何实例出发，通过使用该证明系统的公理和其他规则，</p>

<p>可以推导出后件（consequent）的相应实例。</p>

<p><br/></p>

<p>例如：<span data-katex="\frac{M=N[\Gamma ],N=P[\Gamma ],P=Q[\Gamma ]}{M=Q[\Gamma ]}"></span></p>

<p><br/></p>

<p>若证明了一条规则是可推导的，则能够把它当做系统的一条证明规则来使用。</p>

<p>如果某条规则没有前件，则称它是证明系统的一条公理（axiom）。</p>

<p><br/></p>

<p>我们说等式<span data-katex="M=N[\Gamma ]"></span>是可证的（provable），记为<span data-katex="E\vdash M=N[\Gamma ]"></span></p>

<p>如果从<span data-katex="E"></span>到<span data-katex="M=N[\Gamma ]"></span>存在一个等式序列，</p>

<p>使得每个等式或者是公理（axiom），或者是<span data-katex="E"></span>中的等式，</p>

<p>或者是从序列中之前出现的一个或多个等式经一步推导得到的结果。</p>

<p><br/></p>

<h3><strong>语法理论</strong></h3>

<p>若在可证性下等式集<span data-katex="E"></span>是封闭的，则称<span data-katex="E"></span>是一个语法理论（syntactic theory）。</p>

<p>换句话说，如果<span data-katex="E\vdash M=N[\Gamma ]"></span>，则<span data-katex="M=N[\Gamma ]\in E"></span>，那么等式集<span data-katex="E"></span>就称为一个语法理论。</p>

<p><span data-katex="E"></span>的语法理论<span data-katex="Th(E)"></span>就是从<span data-katex="E"></span>可证的所有等式的集合。</p>

<p><br/></p>

<h3><strong>等式证明系统的性质</strong></h3>

<p>可靠性（soundness）：若<span data-katex="E\vdash M=N[\Gamma ]"></span>，则<span data-katex="E\models M=N[\Gamma ]"></span></p>

<p>演绎完备性（deductive completeness）：若<span data-katex="E\models M=N[\Gamma ]"></span>，则<span data-katex="E\vdash M=N[\Gamma ]"></span></p>

<hr />

<h2><strong>结语</strong></h2>

<p>《<a href="https://book.douban.com/subject/1761918/">Foundations for Programming Languages</a>》是一本好书，</p>

<p>可是中文的翻译《<a href="https://book.douban.com/subject/1944729/">程序设计语言理论基础</a>》简直是晦涩难懂，</p>

<p>把sort翻译为『类子』，把signature翻译为『基调』，容易让人误以为和同调代数有什么联系。</p>

<p>原版书拿到后，看起来轻松了不少，这里只是对第三章部分内容做了个小结，以便卸下包袱轻装上阵。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何应对需求变更]]></title>
    <link href="https://thzt.github.io/blog/2016/06/02/requirement-change/"/>
    <updated>2016-06-02T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/06/02/requirement-change</id>
    <content type="html"><![CDATA[<h2><strong>对需求的误解</strong></h2>

<p>同学们经常提及的需求变更，其实变更的并不是需求，而是需求的实现方案。</p>

<p>首先，我们要对需求和方案进行区分。</p>

<p>需求包括以下几个方面，需求背景，需求目的，需求范围，需求的详细规格，以及错误处理方式。</p>

<p>UI/UE/UX，前端，后端，共同实现了需求，是同一个解决方案的不同侧面。</p>

<p><br/></p>

<p>因此从广义上来讲，开发者之间的内部沟通，不属于需求变更范畴。</p>

<p>软件的大部分问题，存在于开发者之间的沟通上面，而不是开发者对需求的理解上面。</p>

<p>只有理解了什么是需求，才能衡量出需求是否变更了。</p>

<p><br/></p>

<blockquote><p>在软件工程中，需求分析指的是在建立一个新的或改变一个现存的电脑系统时描写新系统的目的、范围、定义和功能时所要做的所有的工作。</p></blockquote>

<p><br/></p>

<h2><strong>从方法到目的</strong></h2>

<p>实现一个目的有多种方法，如何看到这些方法的共性呢？</p>

<p>最快的方式就是找到这些方法要解决的问题。</p>

<p>软件是以解决问题为目的的，不能解决问题的软件没有任何作用。</p>

<p><br/></p>

<p>这要分两方面来说，</p>

<p>其一，当产品经理发起需求变更时，我们要积极配合。因为，需求变更的主要原因在于当前软件不能解决某些问题。</p>

<p>不配合，那么做出的软件就没有用，我们的工作就没有价值。</p>

<p><br/></p>

<p>其二，我们要知道当前软件要解决的问题是什么，才能灵活的改变策略。</p>

<p>甚至可以利用工程师的领域特长，找到更合适的解决方案。</p>

<p><br/></p>

<h2><strong>变更与管控</strong></h2>

<p>我们不怕变化，怕的是对变化失去控制。</p>

<p>当产品经理发起需求变更时，我们要重新安排未完成任务的优先级，这是需要与产品经理沟通的。</p>

<p>因为，变更是需要成本的，意味着原计划要做的某些事情不能做完了，我们得让他们知道。</p>

<p><br/></p>

<p>我们自己首先得有一个任务列表。</p>

<p>然后以优先级的方式管理待办事项。</p>

<p><br/></p>

<h2><strong>知识共享</strong></h2>

<p>不同的人，对需求的理解不同。</p>

<p>每个人都会按照自己的方式去实现想法。</p>

<p>如何设计一个策略，怎样实现这个设计，大相径庭。</p>

<p><br/></p>

<p>因此，我们要预先做一些知识的分享。</p>

<p>在设计阶段排除问题，会比在实现阶段排除问题，成本低很多。</p>

<p>我们不妨谈一谈，我计划怎样解决这个问题，我打算怎样实现。</p>

<p>因为，很有可能，这个计划就是错的。</p>

<p><br/></p>

<h2><strong>主动去沟通</strong></h2>

<p>如果我想改某个文件，担心其他人也在改，以后合并起来麻烦，怎么办？</p>

<p>去问他/她。</p>

<p>某位同学的代码我看不懂，不敢改怎么办？</p>

<p>去问他/她。</p>

<p>产品经理对需求的描述不清楚，我理解不了怎么办？</p>

<p>去问他/她。</p>

<p>交互稿中文案可能有错误，逻辑矛盾，怎么办？</p>

<p>去问他/她。</p>

<p>测试提了一个缺陷，可是我不知道在说什么，也不知道在哪个场景中会出现，怎么办？</p>

<p>去问他/她。</p>

<p><br/></p>

<p>&ldquo;问"，这个简单的动作，会节省大量的时间。</p>

<p>如果不想打断别人的工作，可以用一些非即时沟通工具。</p>

<p>或者走到他旁边，让他注意到你时，你再发问。</p>

<p><br/></p>

<p>提问，并不愚蠢，不问才蠢。</p>

<p>要相信大部分工程师都是喜欢被问的。</p>

<p><br/></p>

<h2><strong>让设计灵活响应变更</strong></h2>

<p>好的设计，在变更中灵活响应。</p>

<p>这实际上是对设计提出了更高的要求，不止是实现功能那么简单了。</p>

<p><br/></p>

<p>因为现实世界是发展中的，业务场景也在与时俱进。</p>

<p>因此，需求本身不可能是不变的。</p>

<p>软件是一个解决动态问题的方案。</p>

<p><br/></p>

<p>程序设计是用来解决发展中问题的。</p>

<p>我们要看到问题的发展趋势，结合整个过程进行设计。</p>

<p>给未来留下余地，不局限于当前状态进行设计。</p>

<p><br/></p>

<p>需求你怎么改都行，因为你不得不改，我也不得不照做，不然软件本身就没用了。</p>

<p>但是我的设计保障我修改的成本最低。</p>

<p><br/></p>

<h2><strong>原谅别人的失误</strong></h2>

<p>人非圣贤孰能无过。</p>

<p>我们会因为手误打错代码，也会因为大脑一时短路犯逻辑错误。</p>

<p>那么，产品经理同样也会对需求理解和描述产生偏差。</p>

<p>我们不能要求别人做到完美。</p>

<p><br/></p>

<p>一方面，我们要原谅他们，但要让他们知道大家的代价。</p>

<p>另一方面，我们要听思想，不要听描述。抓住中心思想，忽略细节。</p>

<p><br/></p>

<p>严于律己，宽以待人。</p>

<h2><strong>结语</strong></h2>

<p>大部分软件从业者，没有软件工程相关的培训，也没有阅读过相关书籍，</p>

<p>是依靠自己的感觉来做软件的。</p>

<p><br/></p>

<p>结果会沿用一些不恰当的类比来理解软件，</p>

<p>也会逐渐形成小作坊式的软件开发过程。</p>

<p>当团队规模扩大时，问题就会越来越严重。</p>

<p><br/></p>

<p>不过，没关系，这有什么。</p>

<p>痛了才会想办法去解决，也无需过度设计。</p>

<p>只是现在我们是否该学一些软件工程的知识了呢？</p>

<p><br/></p>

<p><strong>参考：</strong></p>

<p><a href="https://book.douban.com/subject/1007738/">快速软件开发</a></p>

<p><a href="https://book.douban.com/subject/1140457/">敏捷软件开发 : 原则、模式与实践</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让事情去发生]]></title>
    <link href="https://thzt.github.io/blog/2016/05/29/let-things-happen/"/>
    <updated>2016-05-29T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/05/29/let-things-happen</id>
    <content type="html"><![CDATA[<p>经验增长，并不完全是一件好事，</p>

<p>它也许会阻止本来可能发生的事情。</p>

<p><br/></p>

<p>我们凭着经验来进行判断，</p>

<p>除非遇到完全相同的初始条件，</p>

<p>否则，这样的判断和随意猜测并没有什么不同。</p>

<p><br/></p>

<p>我们踩到的坑多了，走路都战战兢兢，</p>

<p>一年被蛇咬，十年怕井绳。</p>

<p><br/></p>

<p>如何打破经验主义的误区呢？</p>

<p>那就是，让事情去发生。</p>

<p><br/></p>

<p>现实世界中的事情都是发展中的，</p>

<p>我们得有胆量让事情去发展，</p>

<p>然后掌控它的发展过程。</p>

<p><br/></p>

<h2><strong>把责任交出去</strong></h2>

<p>篮球是一项团体运动，</p>

<p>在打篮球时，我们用的最多的是传接球。</p>

<p><br/></p>

<p>可是，新手组织后卫往往无法理解，</p>

<p>球传出去以后，自己都无法掌控它了，</p>

<p>怎样组织这次进攻呢？</p>

<p><br/></p>

<p>这类似于其他团队合作中的责任，</p>

<p>不敢把责任交出去，</p>

<p>担心别人做不好。</p>

<p><br/></p>

<p>这样就无法达到默契的配合。</p>

<p><br/></p>

<p>高手组织后卫怎样理解这件事情呢？</p>

<p>他首先会观察比赛的发展态势，</p>

<p>然后通过运球去影响这个态势的走向，</p>

<p>随后，把球顺着态势传出去。</p>

<p><br/></p>

<p>这样的话，其他人的行为就会被态势所牵引。</p>

<p>比赛仍然在掌控中。</p>

<p><br/></p>

<p>所以，难能可贵的是，</p>

<p>让比赛进行，把球传出去。</p>

<p><br/></p>

<h2><strong>最佳实践</strong></h2>

<p>软件项目中，有前人总结的无数最佳实践，</p>

<p>不遵循它们，会犯很多前人已经犯过的错误。</p>

<p><br/></p>

<p>然而，完全遵循它们，</p>

<p>又会抹杀掉未来的某些可能性。</p>

<p><br/></p>

<p>每种方案都有适得其所的用处，</p>

<p>没有在任何情况下都不适用的方案，</p>

<p>不用它，其实很多人是因为没有真正掌握它。</p>

<p><br/></p>

<p>很多方案是发展而来的，</p>

<p>到了那个境地，解决方案是显而易见的，</p>

<p>现在不用费尽心思，假定到时候很糟。</p>

<p><br/></p>

<p>最佳实践的作用，应该是为了选择方向，</p>

<p>强行预测未来的细节，会担惊受怕，畏首畏尾。</p>

<p><br/></p>

<p>你有胆量让不那么好的事情发生吗？</p>

<p>其实，不那么好与不那么坏，并没有什么区别。</p>

<p><br/></p>

<h2><strong>如何培养人</strong></h2>

<p>世界上最困难的就是把一件你很拿手的工作交给别人，</p>

<p>再眼睁睁看着他把事情搞砸，</p>

<p>而你却还能心平气和不发一言，</p>

<p>那是培养人。</p>

<p>世界上最容易的就是把一件你很拿手的工作交给别人，</p>

<p>再手把手地教他把事情做对，</p>

<p>不给他犯错机会，</p>

<p>那不是培养人，而是锻炼你自己。</p>

<p>——《有一种培养叫放手》</p>

<p><br/></p>

<p>并不是每件事情按计划发生就是好的，</p>

<p>不同的发展轨迹，人们从中的收获也不同。</p>

<p><br/></p>

<p>不让坏事情去发生，就不会身临其境，</p>

<p>没有把事情搞砸过，就不会反思过程。</p>

<h2><strong>人与事情的发展</strong></h2>

<p>事情的发展，总是会涉及到很多人，</p>

<p>因此，个人的作用其实并不那么重要。</p>

<p><br/></p>

<p>让事情去发展，才能观察态势，</p>

<p>才能改变它，才能影响它。</p>

<p><br/></p>

<p>不要把自己看得那么重要，</p>

<p>包括自己在内，大家都是顺势而为，</p>

<p>不改变态势，结果早就被决定了，</p>

<p>有你没你都一样。</p>

<p><br/></p>

<p>所以，要想赢得比赛，</p>

<p>就得做那个能影响比赛走势的人。</p>

<p><br/></p>

<p>不然的话，</p>

<p>胜败已定，预测的再准又有什么用？</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>Let things happen, let them win.</p>

<p>这不仅仅是一种洒脱的态度，</p>

<p>更多的是为了影响事情的整个发展过程。</p>

<p><br/></p>

<p>如果说，新手从犯错，到学会提前意识到错误，是一个进步，</p>

<p>那么老手从丰富的经验，到违反经验的大胆尝试，更是一个进步。</p>

<p><br/></p>

<p>新手，通常把方案静态的理解为当前场景的解，</p>

<p>而高手，更能看到事情的发展过程，</p>

<p>以及采取某个方案，会对事情发展产生什么影响。</p>

<p><br/></p>

<p>让事情发生吧，我来做观众。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[类型理论之拙见]]></title>
    <link href="https://thzt.github.io/blog/2016/05/19/type-theory-in-my-eye/"/>
    <updated>2016-05-19T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/05/19/type-theory-in-my-eye</id>
    <content type="html"><![CDATA[<p>类型系统，是指一种根据所计算出值的种类，对词语进行分类，</p>

<p>从而证明某程序行为不会发生的，</p>

<p>可行语法手段。——《TAPL》</p>

<p><br/></p>

<p>可见类型系统是形式方法的一种，</p>

<p>也是一种证明方法。</p>

<p><br/></p>

<p>当我们把自己写好的程序提交给别人时，</p>

<p>如果别人质疑『你怎么证明它是对的』，</p>

<p>是不好回答的。</p>

<p><br/></p>

<p>因为通过测试用例来检测程序行为，</p>

<p>本身就是在进行不完全归纳，</p>

<p>我们只能断定验证过的事情是正确，</p>

<p>却不能断定一般性质。</p>

<p><br/></p>

<p>类型理论与数学，逻辑学，计算机科学相关，</p>

<p>甚至渗透到了其他学科之中。</p>

<p><br/></p>

<p>类型系统是程序语言之上的一套逻辑系统，</p>

<p>可以对程序进行推理，来断定某些性质。</p>

<p>不同的逻辑系统，『诱导』出了不同的类型系统。</p>

<p><br/></p>

<p>形式系统有个特点，那就是稍微改变一点约束条件，</p>

<p>就会得到一系列好玩的附加特性，</p>

<p>有大量丰富的逻辑系统可以玩。</p>

<p>例如，直觉主义逻辑，模态逻辑，时态逻辑，等等。</p>

<p><br/></p>

<p>可是，仅从代码进行静态分析，来断定程序运行时的所有行为，是不可判定的。</p>

<p>因此只能保证well typed的程序没有某类错误，</p>

<p>每个类型系统有各自要阻止的行为。</p>

<p><br/></p>

<p>类型系统种类繁多，支持各种好玩的特性，</p>

<p>例如，支持Polymorphism的类型系统，某类型可以由其他类型参数化，</p>

<p>支持Dependent type的系统，类型可以由值来决定，</p>

<p>子类型允许我们适当放宽类型要求，</p>

<p>递归类型，存在类型，全称类型。</p>

<p><br/></p>

<p>1934年，Curry意识到简单类型化lambda演算中的类型，与直觉主义逻辑之间的关系，</p>

<p>后面的研究发现，人们把这种对应关系推广为了Curry-Howard-Lambek Correspondance，</p>

<p>它将程序语言的类型，逻辑系统中的命题，和指称语义笛卡尔闭范畴，联系起来了。</p>

<p>一个合法项的存在，就证明了对应它类型的一个命题为真，程序即构造出来的证明。</p>

<p><br/></p>

<p>类型理论的实用内容还有很多，</p>

<p>Gradual typing的动静结合，例如flow，</p>

<p>以及Rust和Linear typeing的应用，</p>

<p>另外还有，Hindley–Milner类型推导算法。</p>

<p><br/></p>

<p>类型系统有一些性质可以衡量，</p>

<p>例如，type soundness，type safety，</p>

<p>以及检查类型的方式，static check，dynamic check，</p>

<p>包括某些语言是explicitly typed，而某些是implicitly typed，</p>

<p>某些语言是被stronger checked，有些则是weaker checked。</p>

<p><br/></p>

<p>现在是学习时间了。</p>

<p><br/></p>

<p>参考：</p>

<p><a href="https://wiki.haskell.org/Curry-Howard-Lambek_correspondence">Curry-Howard-Lambek correspondence</a></p>

<p><a href="https://book.douban.com/subject/1318672/">类型和程序设计语言</a></p>

<p><a href="http://lucacardelli.name/papers/typesystems.pdf">Type System - Luca Cardelli</a></p>

<p><a href="https://book.douban.com/subject/1944729/">程序设计语言理论基础</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不要依赖『道听途说』]]></title>
    <link href="https://thzt.github.io/blog/2016/05/18/do-not-rely-on-the-hearsay/"/>
    <updated>2016-05-18T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/05/18/do-not-rely-on-the-hearsay</id>
    <content type="html"><![CDATA[<p>这几年，信息化的速度明显加快了，</p>

<p>我们获取知识的途径，也大大增多了，</p>

<p>然而，无论是微信，微博，朋友圈，还是论坛，专栏，博客，</p>

<p>大多充斥的是<strong>未经梳理过的碎片化知识</strong>。</p>

<p><br/></p>

<p>我们路过那里，道听途说，</p>

<p>完全凭借别人的只言片语，或他们的心得，去窥探某个领域的内容。</p>

<p>随后，我们马上又急匆匆的转移注意力，把之前看到的都抛之脑后。</p>

<p><br/></p>

<p>似乎，很努力的样子。</p>

<p><br/></p>

<p>结果，</p>

<p>我们虽然看起来什么都懂，却什么也不懂，</p>

<p><strong>阅读了很多科普，也依然不懂科学。</strong></p>

<p><br/></p>

<p>这是危险的。</p>

<p>当我们把努力当做一种习惯的时候，就会忘了反思自己是否在进步。</p>

<p><br/></p>

<p>可是，怎样避免被大量的碎片知识淹没呢？</p>

<p>我们还是要回归本原，<strong>从基础开始，老老实实搭建自己的知识体系</strong>。</p>

<p><br/></p>

<p>对于新知识点，要进行<strong>主动</strong>扩展，</p>

<p>深挖其中的原理和它依赖的内容，<strong>建立起和自己知识体系之间的永久联系</strong>。</p>

<p>只有这样，这块新内容才是有用的，才能为后续的成长做好准备。</p>

<p><br/></p>

<p>必要时，我们还得学会<strong>舍弃</strong>，</p>

<p>过滤大部分信息，虽然它们看起来全都有趣，</p>

<p>从简单处着手，向高大上的方向努力。</p>

<p><br/></p>

<p>于是，</p>

<p>消除浮躁和满怀的斗志吧，回到安静的书房，</p>

<p><strong>打开教科书，静下心来学习</strong>。</p>

<p><br/></p>

<p>读一篇文章，不足以观世界，</p>

<p>阅一部小说，不足以鉴人生。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面向痛点的应变之道]]></title>
    <link href="https://thzt.github.io/blog/2016/05/16/pain-oriented-design/"/>
    <updated>2016-05-16T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/05/16/pain-oriented-design</id>
    <content type="html"><![CDATA[<p>上学写论文时，流传着这么一句话，</p>

<p>『大家虽然不知道鬼的样子，却都在画鬼。』</p>

<p>当时，觉得好有道理啊，我们提出了各种理论模型，却不知道世界到底是什么样子。</p>

<p><br/></p>

<p>没想到后来进入了软件行业，也会遇到同样的问题。</p>

<p><br/></p>

<p>我们很多项目，发起人其实并不知道要做成什么，</p>

<p>只是想做这个，想做那个，</p>

<p>似乎把想做的功能都做完，项目就成了。</p>

<p><br/></p>

<p>我们假想存在某个问题，甚至都没有去调查，</p>

<p>我们觉得别人一定会来用，甚至都没想着去接受反馈，</p>

<p>我们自以为现存方案的问题很多，甚至都没用过它。</p>

<p><br/></p>

<p>这就是在『<strong>画鬼</strong>』，</p>

<p>是一群人憋着实在想做些什么的时候的宏观表现。</p>

<p><br/></p>

<p>那么，我们积极向上的心态，不对吗，</p>

<p>我们想造福社会，推动进步，不好吗？</p>

<p><br/></p>

<p>当然好，只不过要坚持一些设计原则。</p>

<p><br/></p>

<h2><strong>痛点</strong></h2>

<p>学过软件工程之后，我们知道，进行需求分析时，我们得先确定需求的背景和目的。</p>

<p>为什么要做这件事，是什么引起的，<strong>动机</strong>是什么。</p>

<p>只有确定了问题，才能有的放矢。</p>

<p>这是对新项目而言。</p>

<p><br/></p>

<p>而对于实际的项目，几乎都是以现有的解决方案为起点的，</p>

<p>我们还要问，当前方案的<strong>痛点</strong>是什么，哪里做的不够好，</p>

<p>这些问题的优先级怎么安排，怎样逐步解决它。</p>

<p><br/></p>

<p>通过分析痛点，我们才能找到<strong>立项的原因</strong>。</p>

<p>不是我们想做什么，而是我们不得不解决它。</p>

<p>没有迫不得已的形势，事情就不会往前发展。</p>

<p><br/></p>

<p>我们不要急着去解决问题，</p>

<p>而是先要确定，<strong>到底要解决什么问题</strong>。</p>

<p><br/></p>

<h2><strong>应变之道</strong></h2>

<p>应变，是可以锻炼的。</p>

<p><br/></p>

<p>看到每一个方案时，不妨考虑下，它们是<strong>怎样被设计出来的</strong>。</p>

<p>这样才能积累经验，在遇到困难的时候，找到切实可用的办法。</p>

<p><br/></p>

<p>每一个解决方案，都是为它的目的服务的，</p>

<p>人们做了哪些折衷和让步，又是以何种程度达到目的的。</p>

<p><br/></p>

<p>我们要学的，不是会用哪些招数，</p>

<p>而是，<strong>学会这些招数的创造方法</strong>。</p>

<p><br/></p>

<p>由此，繁杂的方案就不会迷惑我们了，</p>

<p>像工匠能看到工具的问题一样，我们会看到<strong>方案的缺陷</strong>，和它们引起的新问题。</p>

<p><br/></p>

<p>无招胜有招。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>不能确定待解决的问题。</p>

<p>给定一个问题，想不出适用的解决方案。</p>

<p><br/></p>

<p>这是两个难点。</p>

<p>我们会假想一个问题，结果做完了以后才发现白费心思。</p>

<p>我们会用流行的解决方案，结果发现越走越远。</p>

<p><br/></p>

<p>经验多了，熟练掌握各种框架类库之后，这两个能力并不会相应提高。</p>

<p>我们需要刻意的训练，才能学会『面向痛点的应变之道』。</p>

<p><br/></p>

<p>Love of bustle is not industry. ——Seneca</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何突破瓶颈]]></title>
    <link href="https://thzt.github.io/blog/2016/05/12/break-through-the-bottleneck/"/>
    <updated>2016-05-12T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/05/12/break-through-the-bottleneck</id>
    <content type="html"><![CDATA[<p>经常遇到有人说，</p>

<p>我现在处于『<strong>瓶颈期</strong>』，无法突破。</p>

<p><br/></p>

<p>什么是瓶颈期呢？</p>

<p>维基百科上这样解释：</p>

<p>瓶颈期为事物在变化发展过程中因无法改变<strong>自身条件</strong>和<strong>外部环境</strong>的情况下，而产生的一个停滞时期。</p>

<p><br/></p>

<p>这个停滞期在学习过程中会出现很多次，</p>

<p>每次遇到都会觉得无处发力，不能超越自己，</p>

<p>而每次突破，都能感觉到明显的进步。</p>

<p><br/></p>

<p>既然，瓶颈期是一个经常出现的现象，</p>

<p>那么突破它的策略，就有<strong>规律</strong>可循了。</p>

<p>通过仔细的分析，我们下文将看到。</p>

<p><br/></p>

<p>是什么造成了瓶颈期？</p>

<p>为什么无法突破瓶颈？</p>

<p>下一个瓶颈为什么更难突破？</p>

<p><br/></p>

<h2><strong>原因</strong></h2>

<p>所谓学习和进步，实际上指的是<strong>对自己有利的改变。</strong></p>

<p>之所以出现停滞期，是因为我们无法做出这些改变了，</p>

<p>我们无法改变自身或者环境，无法更新自己。</p>

<p><br/></p>

<p>对于大多数人而言，环境只能选择，无法迅速改变它，</p>

<p>而选择环境的过程，也是先从改变自己开始的。</p>

<p><br/></p>

<p>所以，停滞期的原因一下子就明朗了，</p>

<p>那就是<strong>行为习惯造成了我们的惰性，使我们不想或无法做出改变。</strong></p>

<p><br/></p>

<p>不主动做出改变，只依靠环境来影响自己，</p>

<p>长此以往，当我们<strong>适应环境</strong>的时候，</p>

<p>瓶颈期就来了，不可避免的来了。</p>

<p><br/></p>

<p>环境已经无法给我们带来新知识了，</p>

<p>内在的更新意识也没有形成，也没有改变环境的契机出现，</p>

<p>一切还是跟昨天一样，那么的平淡无奇，这就是瓶颈。</p>

<p><br/></p>

<p>因此，不要再沉迷过去了，不要再停留了，</p>

<p><strong>做出改变吧，不要等明天，就从现在开始。</strong></p>

<p><br/></p>

<h2><strong>策略</strong></h2>

<p>我们已经决定做出改变了，不达目的誓不罢休。</p>

<p>可是，为什么我们不知道做什么，向哪个方向改变呢？</p>

<p><br/></p>

<p>往往这个时候，<strong>并不是没有改变的方向，</strong></p>

<p><strong>而是，可以改变的方向太多了，我们不知道选择哪个。</strong></p>

<p>哪个选择是最好的，我一直纠结这个，</p>

<p>于是，我什么都不想做，一直纠结到了明天。</p>

<p><br/></p>

<p>放弃吧，骚年。</p>

<p><strong>何不对每个可能的选择做出敏捷的尝试呢？</strong></p>

<p>我们总是对神秘的事物保持自卑和敬畏，</p>

<p>是因为我们从未主动向前探出一步。</p>

<p><br/></p>

<p>因此，我们的策略也就清晰了。</p>

<p>首先，对每个可能的改变，全部做出<strong>试探</strong>，寻找兴趣点，</p>

<p>然后，找到兴趣点后，确立未来的<strong>目标</strong>，</p>

<p>第三，分析目前的状态和目标之间的<strong>差距</strong>，</p>

<p>最后，制定行之有效的短期<strong>计划</strong>，逐步实现它。</p>

<p><br/></p>

<p>这其实是一个<strong>目标管理过程</strong>，</p>

<p>是管理专家彼得·德鲁克（Peter Drucker）在1954年的名著《管理实践》中最先提出的，</p>

<p>德鲁克认为，<strong>并不是有了工作才有目标，而是相反，有了目标才能确定工作内容。</strong></p>

<p><br/></p>

<p>诚然，目标管理对大多数人来说是一个生疏的概念，</p>

<p>可是，<strong>确定目标</strong>，仍然是大环境下同学们的难题，</p>

<p>无法走出第一步，寻找到<strong>兴趣点</strong>，是应试教育的悲剧。</p>

<p><br/></p>

<h2><strong>包袱</strong></h2>

<p>可能，某些人已经越过了好多个瓶颈期了，</p>

<p>从技术修炼，到团队管理，</p>

<p>从不善交流，到布道表达，</p>

<p>从独善其身，到兼济天下。</p>

<p><br/></p>

<p>他们会发现，<strong>每一个瓶颈期的突破都更难一分</strong>，</p>

<p>我虽然知道要做出改变了，为何还是无法行动？</p>

<p>这是因为历史的包袱和惯性。</p>

<p><br/></p>

<p>可能，曾经对某个领域进行了尝试，心灰意冷，</p>

<p>就失去了以后<strong>再次尝试</strong>的热情。</p>

<p>可能，改变工作地点，会导致拖家带口的行动，</p>

<p>这么大的<strong>麻烦</strong>，会阻碍我们做出最有利的决策。</p>

<p>可能，某个知识点太难了，如果学它，</p>

<p>那意味着我要开始画更大的圆，我<strong>没那么多精力</strong>。</p>

<p><br/></p>

<p>这些都是心理包袱，是一切没有尝试的懒惰者的借口。</p>

<p><br/></p>

<p><strong>是我们的每一次决定，而不是努力，</strong></p>

<p><strong>改变了我们的人生轨迹。</strong></p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>与其说，我们谈论了瓶颈期，</p>

<p>不如说，我们讨论了<strong>改变自己的方法论</strong>。</p>

<p><br/></p>

<p>这个方法，不仅适用于个人，</p>

<p>还适用于团队，企业，等团体组织。</p>

<p><br/></p>

<p>大胆试错，是一个必要的环节，</p>

<p>如何降低试错成本，如何提高试错的速度，</p>

<p>是另一个不小的话题。</p>

<p><br/></p>

<p><strong>失败固然痛苦，但更糟糕的是从未去尝试。——西奧多·罗斯福</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[出奇制胜]]></title>
    <link href="https://thzt.github.io/blog/2016/04/27/surprise-move/"/>
    <updated>2016-04-27T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/04/27/surprise-move</id>
    <content type="html"><![CDATA[<p>孙子兵法『兵势篇』中提到，</p>

<p>凡战者，以正合，以奇胜。</p>

<p><br/></p>

<p>战争一开始时局势不太明朗，双方旗鼓相当时就是『以正合』的阶段，</p>

<p>而到后来局势开始明朗，到了决战时刻就是『以奇胜』的时候。</p>

<p><br/></p>

<p>对于『以奇胜』，不同的人有不同的解释，这很正常，</p>

<p>有人说『奇』读作ji，表示预备队，</p>

<p>然而，理解为qi，也无碍，只看目前哪种理解对我们有用。</p>

<p><br/></p>

<p>学习过程，就好像一场持久战，</p>

<p>个人的竞争力与我们采用的学习策略紧密相关。</p>

<p>出奇制胜，指的是用对方意料不到的方法取得胜利。</p>

<p><br/></p>

<p>如何做到这一点呢？</p>

<p>还要从几个层面来说明。</p>

<p><br/></p>

<h2><strong>先不败而后谋胜</strong></h2>

<p>无论从事什么行业，学习什么领域的知识，</p>

<p>扎实的基本功都是很重要的，</p>

<p>为什么呢？</p>

<p><br/></p>

<p>因为，首先要做到不被轻易打败，才能抓住获胜的机会。</p>

<p><br/></p>

<p>以正兵合战，就是这个道理。</p>

<p>合战时输了，奇兵就没有用武之地了。</p>

<p><br/></p>

<p>这个道理还可以用来指导团队建设，</p>

<p>只有在平时不溃败，在关键时期才能发挥更大力量。</p>

<p><br/></p>

<p>怎样才能做到不败呢？</p>

<p>这就要求我们乐于向其他人学习，关注别人在做什么，</p>

<p>用别人的优点，对比自己的弱点，努力弥补。</p>

<p><br/></p>

<p>正面看没有弱点，是制胜的先决条件。</p>

<p><br/></p>

<h2><strong>行进中开火</strong></h2>

<p>Joel Spolsky在『Fire And Motion』中提到，</p>

<p>在进行中开火，你要一边开火一边朝着敌人冲过去，</p>

<p>火力让敌人抬不起头来，不能朝你开火。</p>

<p>前进了，你就可以占领阵地接近敌人，从而搞清楚形势，增加胜算。</p>

<p><br/></p>

<p>在学习过程中，有很多敌军向我方开火的例子。</p>

<p><br/></p>

<p>各路大神发表了数不胜数的文章，会让我们乱了阵脚，</p>

<p>我们无法达到他们中任何一个人的高度。</p>

<p>各个公司，发布了眼花缭乱的类库，框架，开发工具，</p>

<p>让我们沉浸在跟风中无法自拔。</p>

<p><br/></p>

<p>这是敌军在向我们开火呀。</p>

<p><br/></p>

<p>根据别人的优势来规划自己的学习路线，</p>

<p>就会时刻处于被动。</p>

<p>没有自己的优势，就好比刺刀没有开刃一样。</p>

<p><br/></p>

<p>因此，我们要认识自己，找到，</p>

<p>行业的需要，自己的优势，别人的劣势，</p>

<p>三线合一，敢于亮剑。</p>

<p><br/></p>

<h2><strong>后劲十足</strong></h2>

<p>司马懿说过，『夫处世之道，亦即应变之术，岂可偏执一端？』</p>

<p>我们再来看下，如果『奇』理解为ji，我们还有什么收获。</p>

<p><br/></p>

<p>奇兵，指的是预备队，</p>

<p>『以正合，以奇ji胜』，可以解释为，</p>

<p>不要一下子把所有的牌都打完，留一些在手上，关键时候打出去。</p>

<p><br/></p>

<p>这就告诉我们，要留有余地，保持后劲。</p>

<p>做人的道理也是如此，学习和成长都是悄悄完成的。</p>

<p>后劲也必须要有顽强的毅力才能打造出来。</p>

<p><br/></p>

<p>互联网时代，碎片化知识遍布，分散了我们的精力，</p>

<p>让我们没有时间系统的学习任何一块知识，</p>

<p>以奇ji胜，指导我们，在课下静下心来系统学习，维持后劲。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>大家都在学习，那么学习的策略就有了意义，</p>

<p>大家都在努力，那么努力的方向就有了意义。</p>

<p><br/></p>

<p>知识只是学习内容的一种，</p>

<p>对学习策略的调整，本身也是一种学习吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[教育和职业]]></title>
    <link href="https://thzt.github.io/blog/2016/03/18/education-and-career/"/>
    <updated>2016-03-18T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/03/18/education-and-career</id>
    <content type="html"><![CDATA[<p><link href="https://thzt.github.io/stylesheets/p.css" rel="stylesheet"/></p>

<p>随着工作年限的增加，职业路线的明确，越来越多关心我的朋友，对我大学专业和现在从事的职业产生了疑问。
我是一个物理学专业的学生，研究生专业也选择了理论物理，可为什么目前从事软件开发工作呢？
当我被问及此事时，总是难以简要的回答。</p>

<p>职业的选择是一个重要的事情，我明白失败的方式只有一种那就是半途而废。
经过一段时间的仔细考虑，我决定用这篇文章说清我心里的想法。
我区分开了教育的目的，和职业的需要，教育的目的并不是为了就业，而是为就业做好准备。</p>

<p><br/></p>

<h2><strong>教育的目的是为了打好基础</strong></h2>

<p>1693年，洛克在他的《教育漫话》中提出，『英国教育的目的是培养绅士，这种绅士，其实就是社会精英。』
我非常认可这种观点，教育的目的应该是给未来的职业发展打好基础，学那些在社会中无法静下心来学的知识。
教育和社会需要脱节，是当今社会浮躁的表现。</p>

<p>我庆幸自己学了基础学科，学习了自然科学，物理学专业的课表是把日程全占满的，我由衷的自豪。
我学过高等数学，线性代数，数学物理方法，概率论，学过力热光电原子物理，四大力学，激光原理，固体物理，学过模拟电路，数字电路，单片机，VB，C++。
这让我掌握了一套科学方法去理解这个世界，让我学会了用严谨的治学态度去做看待任何事情。
读研以后，我又学了高量，广相，李代数，学过微分流形，纤维丛，量子场论。
我对物理学有浓厚的兴趣，并且学了它，没有留下任何遗憾，我不用一辈子纠结自然界的科普问题了。</p>

<p>在这个过程中，最重要的是，我锻炼了学习能力，学会了把知识传递给别人，学会了交流，以及学会了把钻研精神用于生活中的方方面面。</p>

<p><br/></p>

<h2><strong>职业发展过程中需要坚持学习</strong></h2>

<p>在毕业时，我面临着两种选择，要么继续研究物理，要么走向社会。
经过仔细分析自己的优势和劣势，以及家庭条件，还有进行了市场调研，包括自己的兴趣，我选择了程序员这个职业。
软件是一个低门槛，但是后期学习曲线非常陡峭的行业，这就是为何程序员总是容易『吃青春饭』的原因了。</p>

<p>刚入行时，我查询到计算机专业的本科生学了这些知识，离散数学，编程语言，计算机组成原理，数据库，数据结构与算法，操作系统，计算机网络，编译原理，软件工程。
专业方面还有，数据挖掘，机器学习，人工智能等等。
于是，我找到了相应的书籍，努力学习，软件绝不是编程这么简单，我要做专业人士。</p>

<p>这才发现，当我有了物理学的基础和学习能力之后，自学它们并不困难。
经过3年多的努力，自我感觉已经达到计算机专业本科生的水平了，在部分自己感兴趣的领域也学的较为深入。
比如，lambda演算，类型理论，逻辑学。
编程语言方面，Scheme和Haskell也看得比较多，能在社区帮助一些初学者，回答一些简单的问题了。</p>

<p>到这里为止，在这个行业我算才入门了。后面的职业发展，才可以围绕这些基础建立起来。
以上的学习过程以及书单，请浏览：<a href="http://thzt.github.io/blog/2016/01/29/computer-science/">真实在哪里</a></p>

<p>我想，如果就业时，我选择的不是计算机行业，比如，教师行业，或者任何其他行业，我也会先把领域中的基础知识学好，再谋求发展。
学校教育学到的基础知识，以及锻炼出来的学习能力，原来如此重要啊。
教育的目的确实不应该向某个特定行业提供开箱即用的专才。</p>

<p><br/></p>

<h2><strong>有强大的学习能力才能做好前端</strong></h2>

<p>我从进入计算机行业起，就选择了前端，当时做过大量的调研，也查阅了很多圈内人士的文章。
学习前端与学习其他任何知识并没有什么不同，我只是把当时市面上能找到的关于JavaScript的好书看了一遍。
JavaScript权威指南，JavaScript高级编程，JavaScrip DOM高级程序设计，JavaScript模式，JavaScript精粹，高性能JavaScript，JavaScript异步编程，JavaScript设计模式，Secrets of the JavaScript Ninja，基于MVC的JavaScript Web富应用开发。</p>

<p>看完这些我心里就有底气了。CSS方面，我看的书较少，这里就不列了，工作需要的那些而已。
前端方面有一个特点，因为JavaScript这个语言细节特别多，对语言规范EcmaScript的学习就至关重要。
我从EcmaScript 3，看到了EcmaScript 5，然后就是最近的EcmaScript 2015，和Draft版的EcmaScript 2017。</p>

<p>看着前端这个方向发展迅猛，不禁又一次感叹基本功的重要性，当大家同时学一个知识点的时候，我有能力更快的学会它。
一些新兴的名词，immutable，flux，redux，FRP，等等，有了函数式语言的基础后，很容易理解它们。
这样才能做到心不乱，于是脚步才不会乱。</p>

<p>关于前端技术栈和编程语言对我的影响，请浏览：<a href="http://thzt.github.io/blog/2015/09/01/an-introduction-to-web-front-end/">前端程序员的自我修养</a>，<a href="http://thzt.github.io/blog/2015/06/04/language/">语言的威力</a></p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>当我列举书单的时候，我自己都觉得这看起来太浮躁了，我们无法通过言语来看出一个人背后的努力。</p>

<p>还记得，刚入行时早晨6点爬起来，看完50页书才去上班，还得保证是部门去的最早的那个；
还记得，晚上制定的50页计划，读完了才可以睡觉；
还记得，在项目组各处流窜，就是为了遇到更多的问题，赶紧学习并记录下来；
还记得，过年在家时，医院陪床时，地铁上，手机中闪亮的电子书；
还记得，无数次晚上忽然醒了，拿起手机，记下关于编程方法的点点滴滴。</p>

<p>如果不得不用十年才能学会编程，我情愿每天多花一个小时，让这个梦想早些实现。</p>

<p>蚓无爪牙之利，筋骨之强，上食埃土，下饮黄泉，用心一也。蟹六跪而二螯，非蛇鳝之穴无可寄托者，用心躁也。——荀子《劝学》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[观看AlphaGo与李世石比赛有感]]></title>
    <link href="https://thzt.github.io/blog/2016/03/14/alphago/"/>
    <updated>2016-03-14T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/03/14/alphago</id>
    <content type="html"><![CDATA[<p>在这之前，我对围棋一窍不通，</p>

<p>但是深信任何领域都可以对其他领域产生触类旁通的影响。</p>

<p>为了能多学些道道，体会大师的精髓，</p>

<p>这次对人机大战关注了不少。</p>

<p><br/></p>

<p>在此之前，几乎为了同样的目的，</p>

<p>我专门看过一部叫做《棋魂》的漫画，</p>

<p>它使我印象深刻，获益良多。</p>

<p><br/></p>

<p>讲的是一个小学生——近藤光，</p>

<p>无意间被旧棋盘上的古代围棋高手——藤原佐为，灵魂附体，</p>

<p>小光有了和佐为进行心灵对话的能力。</p>

<p><br/></p>

<p>由于佐为对『神之一手』的执着追求，</p>

<p>小光的生活产生了变化，</p>

<p>从接触围棋，到理解围棋，最后甚至达到了佐为所追求的最高境界。</p>

<p><br/></p>

<p>漫画中介绍了一群人，</p>

<p>他们为了同一个目的，不怕困难，不断努力。</p>

<p><br/></p>

<p>小光进入到专业棋坛之后，深深体会到了专业人士的辛酸和泪水，</p>

<p>这种体会让读者可以联想到任一行业，联想到自己现在所做的事情。</p>

<p>任何领域达到专业，都不是容易的事情，甚至对某些人来说根本不可能，哪怕再努力。</p>

<p><br/></p>

<p>然而，我们仍然要有追求『神之一手』的执着，</p>

<p>像佐为一样，历经千年仍旧灵魂不散。</p>

<p><br/></p>

<h2><strong>机器学习</strong></h2>

<p>这次人机大战的看点，莫过于人工智能的噱头了。</p>

<p>机器学习领域再一次吸引了大众的眼球。</p>

<p><br/></p>

<p>这个领域在学术圈一直很火，</p>

<p>去年为了了解它，我读了两本简单的入门书，</p>

<p>《集体智慧编程》和《统计学习方法》。</p>

<p><br/></p>

<p>阅读的目的其实是为了消除神秘性和盲目性，</p>

<p>能脚踏实地的理解这些新概念。</p>

<p><br/></p>

<p>机器学习领域水很深，远不是几本书几十本书就可以窥探的，</p>

<p>但是，对我来说，最明显的认识就是，</p>

<p>这些神秘的概念，其实是一些数学方法，</p>

<p>结合统计学，计算机科学，以及大数据，所进行的计算。</p>

<p><br/></p>

<p>比如，AlphaGo集以下方法于一身，</p>

<p>蒙特卡洛树搜索，估值网络，强化学习，等等。</p>

<p><br/></p>

<p>这让我认识到了知识的作用，</p>

<p>不但能用于改变世界，还能用于维持心态的平和。</p>

<p>知道原理后，就不会对人工智能产生恐慌，</p>

<p>就好比我们并不会惊讶计算器也可以得到1+1=2一样。</p>

<p><br/></p>

<h2><strong>人类的经验</strong></h2>

<p>与人对弈和与计算机对弈，确实是不同的。</p>

<p>不禁让人们反思，人类这么多年里总结的围棋经验，到底还有没有用。</p>

<p><br/></p>

<p>前三局，AlphaGo赢了李世石，打击了每一个人。</p>

<p>那些前人总结出来的所谓『定式』，是否本来就是有问题的？</p>

<p><br/></p>

<p>因为围棋涉及到博弈，涉及到资源的管理，涉及到统筹与规划，</p>

<p>如果数千年积累的经验，被机器证明了有更好的方法，</p>

<p>不知道是要高兴还是悲伤啊。</p>

<p><br/></p>

<p>这在一定程度上动摇了人们的自信，</p>

<p>人们越来越怀疑自己在局部进行决策的能力了，</p>

<p>如果不能看得更远，那么现在的决定还有没有用呢？</p>

<p><br/></p>

<p>这确实是一个值得反思的方面。</p>

<p><br/></p>

<p>另一方面，AlphaGo的表现，也让我们看到了科技的力量，</p>

<p>受大数据和机器学习的影响，用经验和感觉来指导实践的套路可能会改变，</p>

<p>数据和计算对决策来说，将占据越来越大的比重。</p>

<p><br/></p>

<p>这无疑是非常大进步。</p>

<p><br/></p>

<h2><strong>神之一手</strong></h2>

<p>第四局，李世石终于赢了。</p>

<p><br/></p>

<p>不少行家指出，李世石的第78手，下了一招妙棋，</p>

<p>导致AlphaGo决策失误，后面连续走出『臭棋』。</p>

<p><br/></p>

<p>且不管原因是什么，先看看我们的收获。</p>

<p><br/></p>

<p>这不禁让人感叹人类的直觉能力，</p>

<p>有很多东西是不能或者难以通过数据计算得到的，</p>

<p>人类更擅长在资源不足的情况下，通过直觉给出大致的选择。</p>

<p><br/></p>

<p>这时候，如果面面俱到，可能更慢，甚至是不可行的。</p>

<p><br/></p>

<p>那些行家们也指出，很多时候，</p>

<p>专业棋手，所追求的，不只是『赢了比赛』，</p>

<p>还有『赢得漂亮』，有审美因素包含其中。</p>

<p><br/></p>

<p>我觉得直觉是人类创造力的源泉，</p>

<p>美学的追求，能让人类看到从数据上无法预言的东西，</p>

<p>它指引我们去发现新事物，开辟新领域。</p>

<p><br/></p>

<p>创造力，是人与机器的重大区别。</p>

<p>穷举所有的选择，并不能有效的完成创造。</p>

<p><br/></p>

<h2><strong>胜败</strong></h2>

<p>围棋还关系到人们对胜败的理解，</p>

<p>怎样获胜，怎样韬光养晦，怎样示弱，都是兵法的精髓。</p>

<p><br/></p>

<p>第四局李世石能够胜利，跟布局阶段的隐忍有关。</p>

<p>他一反常态，并没有表现出那么强烈的攻击力，</p>

<p>而是稳扎稳打，先做到不败，才能有胜利的可能。</p>

<p><br/></p>

<p>这对我们为人处世，有很大的借鉴意义，</p>

<p>没有常胜将军，只有不可战胜的军队。</p>

<p><br/></p>

<p>做学问，搞项目，也是如此，</p>

<p>只有在平时努力训练，加强团队能力的建设，</p>

<p>才能打好基础，在关键时候扛住压力，不被击垮。</p>

<p><br/></p>

<p>胜兵先胜而后求战，败兵先战而后求胜，就是这个道理。</p>

<p><br/></p>

<p>另外，与竞技体育类似，讲究做好防守引诱对方发力，</p>

<p>借着破绽，才有机会获胜。</p>

<p>同时，也只有打好基础，才能在对方发力的时候不被一击致命，</p>

<p>留下有翻盘的可能。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>写这篇文章的时候，第五局还没有进行。</p>

<p>我迫不及待的写出此篇，因为收获简直是太大了。</p>

<p><br/></p>

<p>正如兵家所言，</p>

<p>胜败乃兵家常事。</p>

<p><br/></p>

<p>然而，这胜败之理，人们对『神之一手』的追求，</p>

<p>可是历经千年而不变啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[论工具]]></title>
    <link href="https://thzt.github.io/blog/2016/03/11/tools/"/>
    <updated>2016-03-11T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/03/11/tools</id>
    <content type="html"><![CDATA[<p>中学的历史课本上曾经讲过，</p>

<p>学会制作工具，是人类进步的标志。</p>

<p><br/></p>

<p>我深以为然。</p>

<p>可是现实生活中，<strong>存在着对工具很多的误解</strong>。</p>

<p><br/></p>

<p>有的人，认为制作工具浪费时间和精力，做了不必要的事情，</p>

<p>有的人，认为既然有现成的工具可用，为什么还要自己造轮子。</p>

<p>有的人，认为应该专门区分开制作工具的人和使用工具的人。</p>

<p><br/></p>

<p>这些看法，在各自的角度来讲，都说的通，</p>

<p>可以没有对工具有个<strong>全面的</strong>认识。</p>

<p><br/></p>

<p>下面，我们仔细分析一下，</p>

<p>看能不能从更高的角度来看待它，</p>

<p>做好工具，用好工具。</p>

<p><br/></p>

<h2><strong>工具就是解决方案</strong></h2>

<p>无论是日常生活中，还是在软件开发中，</p>

<p>我们经常有直接解决问题的场景，</p>

<p>貌似并没有使用工具。</p>

<p><br/></p>

<p>这就给了人们一种<strong>假象</strong>，</p>

<p>那种特意找来的才叫工具，</p>

<p>用了别人的东西，才叫用了工具。</p>

<p><br/></p>

<p>其实不然。</p>

<p>一个<strong>解决方案</strong>，实际上就是一个具体的工具了，</p>

<p>只不过它只能用来解决那个问题罢了。</p>

<p><br/></p>

<p>好的解决方案，就好比适用的工具，</p>

<p>用最直接的办法解决了问题，</p>

<p>不拖泥带水，不带来附加的问题。</p>

<p><br/></p>

<h2><strong>不得已而造轮子</strong></h2>

<p>着手实施的过程，</p>

<p>实际上就是将目前的项目问题<strong>还原</strong>成历史上已经解决过问题的过程。</p>

<p><br/></p>

<p>这个阶段，我们在进行问题求解。</p>

<p>为了尽可能的少耗费精力，我们总会优先选择已经成型的工具，</p>

<p>在软件开发中，相当于找到各种类库，框架来用。</p>

<p><br/></p>

<p>可是，市面上广为流传的那些通用工具，</p>

<p>并不一定非常切题，我们必须做出调整，甚至废弃一部分功能，</p>

<p>这个时候，就有点造轮子的萌芽了。</p>

<p><br/></p>

<p>随着业务的发展，业务模型逐渐清晰起来了，</p>

<p>没有趁手的工具，也无法跟得上业务的发展需要了，</p>

<p><strong>只能从基础开始，借用各种工具的设计思想，让工具和业务共同发展。</strong></p>

<p><br/></p>

<p>此之所谓，重新造轮子。</p>

<p><br/></p>

<p>这样不好吗？</p>

<p>在项目初期，诚然不太合适，</p>

<p>但是，全程中我们的目的都是为了找到合适的工具解决问题呀，</p>

<p>并没有偏离主题，并没有为了造而造。</p>

<p><br/></p>

<p>这也是<strong>不得已而为之</strong>的事情。</p>

<p><br/></p>

<h2><strong>工具的创造者和使用者</strong></h2>

<p>在大多数人眼中，</p>

<p>工具都是一些人造出来，给另外一些不同的人来使用的，</p>

<p>这里就又有误区了。</p>

<p><br/></p>

<p>其实不必强制如此，</p>

<p>一个能工巧匠，必然有<strong>自己的</strong>一套工具箱，</p>

<p>这些工具箱中都是他趁手的工具。</p>

<p><br/></p>

<p>这些工具，全是跟别人一样的吗？</p>

<p>未必啊。</p>

<p>有雷同的，有调整过的，更有自创的。</p>

<p><br/></p>

<p>工具完全可以自己造给自己用，是<strong>为了给自己的工作助力</strong>，</p>

<p>在软件行业，这有一个名词叫『dog fooding』，</p>

<p>很多软件公司都深谙此道。</p>

<p><br/></p>

<p>比如，Visual Studio本来只是Microsoft内部使用的一个编辑器，</p>

<p>随着不断完善，它完全可以作为一个产品来卖了，</p>

<p>那么就可以拿出来了，面向普通大众开放了。</p>

<p><br/></p>

<p>再比如，Facebook很多项目都主张尽量开源，</p>

<p>首先解决本公司自己的问题，</p>

<p>再通过解决社区的问题逐渐完善，同时也降低了维护成本。</p>

<p><br/></p>

<p>此外，如果不事先限定工具的未来使用者的话，</p>

<p>还会促进人们对工具进行更好的设计。</p>

<p><br/></p>

<p>另一方面，有些人喜欢写工具给别人用，</p>

<p>但是，<strong>眼高手低，只是解决一些假想的问题</strong>，过于理想主义。</p>

<p><br/></p>

<p>不能解决问题的工具，还不如没有，</p>

<p>它会造成解决方案的混乱，加大原始问题的难度。</p>

<p><br/></p>

<p>因此，工具的创造者和使用者，必须紧密合作。</p>

<p>工具才能发挥它最大的作用。</p>

<p><br/></p>

<h2><strong>业务逻辑并不啰嗦</strong></h2>

<p>有些人不喜欢写业务逻辑，说是因为它繁琐。</p>

<p>我觉得这是对编程认识的<strong>偏见</strong>。</p>

<p><br/></p>

<p>因为编程就是用代码解决问题的，</p>

<p>业务逻辑繁琐，本身就是一个问题。</p>

<p><br/></p>

<p>我们完全可以写一个业务逻辑的管理器，</p>

<p>把这些复杂业务逻辑分离开，然后用这个管理器统筹规划，</p>

<p>非常干净清爽了，不是吗？</p>

<p><br/></p>

<p>因此，这种情况下，代码要做的事情不是关键，</p>

<p><strong>关键在于，怎样写，用什么样的策略来写，</strong></p>

<p><strong>没有注定繁琐的代码，只有不合理的繁琐表述。</strong></p>

<p><br/></p>

<h2><strong>工具还可以用来制造工具</strong></h2>

<p>只要存在问题，我们就可以想到借助工具来解决它，</p>

<p>那么假设这里有好多人需要斧子这种工具，</p>

<p>就要造出那么多斧子来吗，好累啊。</p>

<p><br/></p>

<p>其实，这引出了另外一个问题，</p>

<p>那就是如何制造多个斧子的问题。</p>

<p><br/></p>

<p>我们可以造一个机器，它用来生产斧子，</p>

<p>这个机器，就是<strong>用来制造工具的工具</strong>，</p>

<p>而制作这个机器所用的道具，同样也是工具。</p>

<p><br/></p>

<p>原来，世界这么奇妙，</p>

<p>工具可以组合，还可以互相影响。</p>

<p><br/></p>

<h2><strong>学会别人的设计思想</strong></h2>

<p>当我们定位问题后，怎样将适用工具制造出来呢？</p>

<p>现存的解决方案是怎样想出来的呢？</p>

<p><br/></p>

<p>这就得求助历史了，求助于同行们前辈们的经验教训。</p>

<p><br/></p>

<p>我们要先找到类似的工具，</p>

<p><strong>看它是如何解决问题的，用了什么办法，它的作者是怎么想的。</strong></p>

<p><br/></p>

<p>学会了这些，抓住思考问题的方式，</p>

<p>我们就能<strong>随机应变，灵活处理</strong>，做出趁手适用的工具来。</p>

<p><br/></p>

<p>其他工具中任何有用的部分，都可以借来，只要能达到目的。</p>

<p>即，目的明确后，方法可以灵活多变。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>过分的依赖工具和过度的排斥工具，都是盲目的。</p>

<p><strong>做到正视一个事物，是非常困难的。</strong></p>

<p><br/></p>

<p>jQuery的作者在《Secrets of the JavaScript Ninja》中所言，</p>

<p>很多人都被教导说，不要使用eval，这是不对的，</p>

<p>相反，<strong>我们应该学会它，从而才有能力善用它。</strong></p>

<p><br/></p>

<p>对于其他事物也是如此啊，</p>

<p>全盘接受和全盘否定，都会丢掉半壁江山，</p>

<p>我们要深入理解，目的是把它用到可以用的地方，发挥它的作用。</p>

<p><br/></p>

<p>不理解它，怎么做到在需要的时候使用呢？</p>

<p><br/></p>

<p>君子生非异也，善假于物也。</p>

<p>——荀子《劝学》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件工程师的前瞻性]]></title>
    <link href="https://thzt.github.io/blog/2016/03/08/forward-looking-engineer/"/>
    <updated>2016-03-08T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/03/08/forward-looking-engineer</id>
    <content type="html"><![CDATA[<p>受过多年学校教育的我们，容易产生一个误区。</p>

<p>我们学会了很多知识，学会了怎样解决问题，</p>

<p>但是却不知道这些问题是怎么来的，</p>

<p>以后将要如何发展。</p>

<p><br/></p>

<p>我们要解决的问题都是静态的，</p>

<p>只要我们给出方案，</p>

<p>那它就永远是这个问题的解。</p>

<p><br/></p>

<p>然而，现实生活中的问题，却复杂得多。</p>

<p><br/></p>

<p>我们不仅需要考虑问题的解法，</p>

<p>而且更重要的还要考虑问题本身。</p>

<p>我们当前是否在把精力用于解决一个正确的问题，还说不定，</p>

<p>我们的方案是否在一段时间内仍然有效，也未可知。</p>

<p><br/></p>

<p>这也是软件行业的主要特点。</p>

<p><br/></p>

<h2><strong>困难的软件工程</strong></h2>

<p>人们常把软件工程比作建筑，我认为这极不合理。</p>

<p>完全忽视了软件的本质特点。</p>

<p><br/></p>

<p>与建筑行业不同的是，软件所解决的问题都是动态的，</p>

<p>楼还没有盖完，我们的图纸就变了，</p>

<p>怎样在这种情况下把楼盖起来，才是软件工程所面临的问题。</p>

<p><br/></p>

<p>诚然，用户的需求是不稳定的，今天说这个，明天说那个，</p>

<p>但这并不是一个主要方面。</p>

<p>短期内，需求的稳定性取决于我们的挖掘和控制。</p>

<p><br/></p>

<p>然而，从长远来看，市场在变，业务在变，</p>

<p>用户使用软件的目的就会改变，</p>

<p>软件岂能不变？</p>

<p><br/></p>

<p>采取什么样的方案，应对这些发展中的业务需要，</p>

<p>才是软件要解决的本质问题。</p>

<p><br/></p>

<p>这是困难的。</p>

<p><br/></p>

<p>且不谈增加新功能了，</p>

<p>甚至对于有缺陷的地方进行修改，也得慎重考虑。</p>

<p>所有依赖这个错误的特性而表现良好的程序，都是有问题的。</p>

<p><br/></p>

<p>每改一处都可能意味着全盘重写。</p>

<p><br/></p>

<h2><strong>编程层面的技术修炼</strong></h2>

<p>好的软件工程师，可以隔离变化，简化依赖关系。</p>

<p>他们通过抽象搭建框架，通过组装分离影响，</p>

<p>让每一个功能点都是可拆卸的。</p>

<p><br/></p>

<p>为了抽象，就得理解问题背后的数学结构，</p>

<p>为了封装，就得理解子问题之间的逻辑关联。</p>

<p><br/></p>

<p>好的代码，行云流水，层次分明，逻辑清晰，赏心悦目，</p>

<p>更重要的是，解决了当前问题，并留有余地。</p>

<p><br/></p>

<p>到了这一步，才可以谈论软件是如何进行设计的了，</p>

<p>的确，编程是一门设计手法，</p>

<p>更多的是考虑如何描述，如何组织，如何扩展等等问题。</p>

<p><br/></p>

<p>不但如此，一个架构师，还要考虑如何量产，</p>

<p>如何并行开发，如何降低抽象层次，</p>

<p>如何交流，如何推广。</p>

<p><br/></p>

<p>这绝对是一门手艺。</p>

<p><br/></p>

<h2><strong>工程师需要前瞻性</strong></h2>

<p>要想给出一个灵活可扩展的方案，</p>

<p>只是知道用动态的观点看待问题，作用是微小的。</p>

<p>我们还需要明白业务场景，分析它的趋势，看到它的未来。</p>

<p><br/></p>

<p>随着业务规模扩大，软件越来越复杂，</p>

<p>前瞻性将是衡量一个软件工程师的首要标准了，</p>

<p>这也是工程与编程的重要区别。</p>

<p><br/></p>

<p>可是，要想获得前瞻性是很难的，</p>

<p>我们必须先认识当前，明白现状，</p>

<p>必须跳出当前的生活，从更高的角度俯视它。</p>

<p><br/></p>

<p>我们得看到，现行方案已经帮助问题解决到了什么程度，</p>

<p>当前的痛点在哪，客观约束条件有哪些，</p>

<p>只有看清这些，才能确定目的地和实现路线。</p>

<p><br/></p>

<p>没有前瞻性的工程师是可怕的，</p>

<p>因为他自己都不知道要去哪，以及正在做什么，</p>

<p>那么他当前选择的路线就可能是盲目的，有风险的。</p>

<p><br/></p>

<p>只有确定目标，并逐步实现，</p>

<p>才有达到目标的可能。</p>

<p><br/></p>

<p>世界上，可没有那么多的巧合出现。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>知道自己在哪里，有计划要去哪里，</p>

<p>并努力付诸实践，才能达成目标。</p>

<p><br/></p>

<p>人们在计划出行时，总是这么考虑，</p>

<p>然而在其他问题上却容易迷茫</p>

<p><br/></p>

<p>其实，当不知道自己要去哪里的时候，</p>

<p>往往是对现在做的事情，不求甚解。</p>

<p><br/></p>

<p>还是从认识自己开始吧，</p>

<p>锻炼有前瞻性的思维习惯，</p>

<p>才能越走越稳，看尽沿途的风光美景。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[团队建设中的博弈论]]></title>
    <link href="https://thzt.github.io/blog/2016/03/06/game-theory-in-team-building/"/>
    <updated>2016-03-06T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/03/06/game-theory-in-team-building</id>
    <content type="html"><![CDATA[<p>博弈论又称为对策论（Game Theory），</p>

<p>既是现代数学的一个分支，也是运筹学的一个重要学科。</p>

<p><br/></p>

<p>博弈论思想古已有之，</p>

<p>中国古代的《孙子兵法》等著作就不仅是一部军事著作，</p>

<p>而且算是最早的一部博弈论著作。</p>

<p><br/></p>

<p><strong>故我欲战，敌虽高垒深沟，不得不与我战者，攻其所必救也；</strong></p>

<p><strong>我不欲战，画地而守之，敌不得与我战者，乖其所之也。</strong></p>

<p>我想与敌交战，虽然敌人高筑防御工事也不得不出来与我交战，</p>

<p>是因为我攻击它必然要救援的地方；</p>

<p>我不想同敌交战，只要在地上画个界线便可守住，敌人无法与我交锋，</p>

<p>是因为我设法调动它，使它背离所要进攻的方向。</p>

<p><br/></p>

<p>敌军怎么肯听从调遣呢？</p>

<p>原因就在于，敌军可进行的所有选择中，</p>

<p>我们安排了一条<strong>利益最大</strong>的选择使之中招。</p>

<p><br/></p>

<p>这就是《孙子兵法》讲究的<strong>『势』</strong>了。</p>

<p><br/></p>

<p><strong>故善战者，求之于势，不责于人。</strong></p>

<p>高明的指挥员，总是从自己造『势』中去追求胜利，而不苛求部下以苦战取胜。</p>

<p><br/></p>

<p>可是，这是战争，和团队建设有什么关系呢？</p>

<p>和博弈论又有什么关系呢？</p>

<p><br/></p>

<p>这还要从一个例子说起。</p>

<p><br/></p>

<h2><strong>势：囚徒困境与纳什均衡</strong></h2>

<p>两个共谋犯罪的人被关入监狱，不能互相沟通。</p>

<p>如果两个人都不揭发对方，则由于证据不确定，每个人都坐牢一年；</p>

<p>若一人揭发，而另一人沉默，则揭发者因为立功而立即获释，沉默者因不合作而入狱五年；</p>

<p>若互相揭发，则因证据确实，二者都判刑两年。</p>

<p><br/></p>

<p>在这种情况下，每个囚徒，都是这样考虑的。</p>

<p>如果对方不揭发，自己不揭发，判刑两年，自己揭发，免刑。</p>

<p>如果对方揭发，自己不揭发，判刑五年，自己揭发，判刑两年。</p>

<p><br/></p>

<p><strong>可见，无论对方怎样选择，自己选择揭发总是最优的。</strong></p>

<p>最终两个人由于互相揭发，各判两年。</p>

<p><br/></p>

<p>从博弈论来看，</p>

<p>囚徒们所采取的这种策略，是囚徒困境中的一个<strong>纳什均衡</strong>。</p>

<p><br/></p>

<p>所谓纳什均衡，指的是参与人的这样一种策略组合，</p>

<p>在该策略组合上，任何参与人单独改变策略，都不会得到好处。</p>

<p><br/></p>

<p>可惜的是，纳什均衡并不一定是整体最优的。</p>

<p>但是局中人所受的影响却是巨大的。</p>

<p><br/></p>

<h2><strong>险：团队凝聚之道</strong></h2>

<p>团队合作是一个老生常谈的问题，</p>

<p>怎样打造有凝聚力的团队，是重中之重。</p>

<p><br/></p>

<p>《孙子兵法》有这样的一个例子。</p>

<p><br/></p>

<p><strong>夫吴人与越人相恶也，当其同舟而济，遇风，其相救也如左右手。</strong></p>

<p><strong>故善用兵者，携手若使一人，不得已也。</strong></p>

<p>吴人与越人是相互仇视的，当他们同船过渡突遇大风时，他们相互救助起来如同左右手。</p>

<p>因此，古代善于用兵的人，能使部队携手如同一个人一样服从指挥，是将部队置于不得已的情况下形成的。</p>

<p><br/></p>

<p>这样看来，与其相信团队天生默契，</p>

<p>不如把默契看做成员们不得已而为之的选择。</p>

<p><br/></p>

<p><strong>故兵之情，围则御，不得已则斗，过则从。</strong></p>

<p>士兵的心理变化规律是：</p>

<p>被包围就会合力抵御，不得已时就会殊死奋战，陷于深重危难境地就非常听从指挥。</p>

<p><br/></p>

<p>因此，要想让团队凝聚，就得营造一种危难的局势，</p>

<p>出于自救，大家才不得不团结起来。</p>

<p><br/></p>

<h2><strong>动：机会把握的三种境界</strong></h2>

<p>在其他领域，也会涉及团队和执行。</p>

<p>例如，在篮球比赛中，怎么样评价一个战术执行者的优劣呢？</p>

<p>（组织后卫是篮球比赛中的战术执行者）</p>

<p><br/></p>

<p>能力差的后卫，<strong>错过机会</strong>。</p>

<p>他的表现是，一直追赶之前错过的时间，</p>

<p>让团队处于被动局面。</p>

<p><br/></p>

<p>可以类比，表现差的团队领导者，</p>

<p>使成员们仓促救火，疲于奔命。</p>

<p><br/></p>

<p>能力合格的后卫，<strong>抓住机会</strong>。</p>

<p>他目光敏锐，不错过任何可乘之隙，</p>

<p>是一个好的观察者。</p>

<p><br/></p>

<p>正如合格的领导者一样，</p>

<p>带领团队成员在正确的时间做着正确的事情。</p>

<p><br/></p>

<p>能力超群的后卫，<strong>创造机会</strong>。</p>

<p>他擅长打开局面，化腐朽为神奇，</p>

<p>整个团队焕然一新。</p>

<p><br/></p>

<p>优秀的团队领导者，正是如此，</p>

<p>出奇制胜，力挽狂澜。</p>

<p><br/></p>

<p>这就是把握机会的三种境界了。</p>

<p>那么如何做到优秀呢？</p>

<p><br/></p>

<h2><strong>变：应对与顺势</strong></h2>

<p><strong>水因地而制流，兵因敌而制胜。</strong></p>

<p><strong>故兵无常势，水无常形，能因敌变化而取胜者，谓之神。</strong></p>

<p>水流根据地形决定流向，用兵根据敌情采取致胜方略。</p>

<p>战争无固定不变的态势，流水无固定不变的流向。</p>

<p>能随着敌情发展变化而采取灵活变化的措施取胜的人，才称得上是神秘莫测的高明者。</p>

<p><br/></p>

<p>知道了『势』决定发展方向之后，</p>

<p>就可以随机应变了。</p>

<p><strong>造势，使团队向着健康的方向发展，</strong></p>

<p><strong>设险，让团队更加团结。</strong></p>

<p><br/></p>

<p>方向健康，大家团结，</p>

<p>才是一个有战斗力的团队。</p>

<p><br/></p>

<p>影响成员做出决定的外部条件是关键，</p>

<p>我们怎样改变它，就能怎样改变团队的未来。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>对于一个企业来说，</p>

<p>不获益，等待它的就只能是破产和灭亡，</p>

<p>对于团队，甚至对于个人的成长来说，更是如此。</p>

<p><br/></p>

<p>利用好囚徒的心理，就可以顺势而为，</p>

<p>巧妙的调整得失，甚至还能做到全局最优。</p>

<p><br/></p>

<p>相反，僵硬的改变，</p>

<p>往往不尽人意，一事无成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[形式证明与逻辑推理]]></title>
    <link href="https://thzt.github.io/blog/2016/03/01/proof-and-deduction/"/>
    <updated>2016-03-01T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/03/01/proof-and-deduction</id>
    <content type="html"><![CDATA[<script src="https://thzt.github.io/thirdpart/jQuery/jquery-1.11.1.js"></script>


<p><link href="https://thzt.github.io/thirdpart/KaTeX/katex.min.css" rel="stylesheet"/></p>

<script src="https://thzt.github.io/thirdpart/KaTeX/katex.min.js"></script>


<script src="https://thzt.github.io/javascripts/katex.js"></script>


<p>小时候，我就对侦探非常着迷，</p>

<p>买了很多介绍破案的漫画书，故事书，小说。</p>

<p><br/></p>

<p>什么《大宇神秘惊奇系列》啊，</p>

<p>《名侦探柯南》啊，</p>

<p>《福尔摩斯探案全集》啊，等等。</p>

<p><br/></p>

<p>可是，对于<strong>什么是推理</strong>，</p>

<p>以及怎样进行推理，</p>

<p>并没有清晰系统的认识。</p>

<p><br/></p>

<p>学生时代，从平面几何开始，</p>

<p>我们就知道了证明题。</p>

<p>经过一步一步的推导，</p>

<p>最后证明结论成立。</p>

<p><br/></p>

<p>可是，对于<strong>什么是证明</strong>，</p>

<p>并没有人能说出精确的定义。</p>

<p><br/></p>

<p>这一切，难道真是只是个谜吗？</p>

<p>是人类的未知领域吗？</p>

<p><br/></p>

<p>其实不然。</p>

<p><strong>逻辑学</strong>就是研究推理和证明的学科，</p>

<p>研究思维的形式，规律和方法。</p>

<p><br/></p>

<p>其中，数理逻辑是逻辑学与数学的交叉学科，</p>

<p>用数学的方法研究逻辑，</p>

<p>我想，答案应该在这里吧。</p>

<p><br/></p>

<h2><strong>大局观</strong></h2>

<p>数理逻辑虽然博大精深，</p>

<p>但是研究方法却非常简洁优美。</p>

<p><br/></p>

<p>给定一套逻辑系统，</p>

<p>分别从两个侧面来描述这个系统的性质。</p>

<p>语法层面，语义层面。</p>

<p><br/></p>

<p><strong>语法</strong>，指的是构成这个逻辑系统的符号规则，</p>

<p>由公理和定理的推导规则组成，</p>

<p>让我们可以从一串合法的符号得到另一串合法符号，</p>

<p>称之为<strong>形式证明</strong>。</p>

<p><br/></p>

<p><strong>语义</strong>，指的是用什么样的数学对象可以解释这些符号，</p>

<p>由论域和解释函数组成，我们得到的是一些代数结构，</p>

<p>而且，从已知符号串的语义性质得到了其他符号串的性质，</p>

<p>称之为<strong>逻辑推理</strong>。</p>

<p><br/></p>

<p>学校中的数理逻辑教科书，介绍了<strong>命题演算</strong>和<strong>一阶谓词演算</strong>这两个典型的逻辑系统。</p>

<p>它们各自的语义解释，恰好描述了日常生活中推理问题。</p>

<p><br/></p>

<p>总之，数理逻辑，用一套符号，对生活中常见的逻辑问题，进行了数学建模，</p>

<p>研究它，希望得到与证明和推理相关的更多性质和结论。</p>

<p><br/></p>

<h2><strong>形式证明</strong></h2>

<p>为了说明问题，而又不引入过多的逻辑学概念，</p>

<p>我们从命题逻辑开始。</p>

<p><br/></p>

<p>命题逻辑的形式化演算系统大体上可分为两种类型，</p>

<p>一是<strong>希尔伯特式</strong>的公理化演算系统，</p>

<p>二是<strong>甘岑(Gentzen)式</strong>的自然推理系统。</p>

<p><br/></p>

<p>这两个系统各有所长，</p>

<p>前者更能体现公理化的思想，但其推理过程比较繁琐，</p>

<p>后者形式推理比较自然，但是规则较多。</p>

<p><br/></p>

<p>下面只说<strong>命题演算的自然推理系统</strong>。</p>

<p><br/></p>

<p><strong>语法：</strong></p>

<p>（1）可数个命题符号：<span data-katex="p_1,p_2,\cdots"></span></p>

<p>（2）5个联接词符号：<span data-katex="\neg,\lor,\land,\to,\leftrightarrow"></span></p>

<p>（3）2个辅助符号：<span data-katex="),("></span></p>

<p><br/></p>

<p><strong>公式：（BNF）</strong></p>

<p><span data-katex="\alpha::=p|(\neg\alpha)|(\alpha_1\lor\alpha_2)|(\alpha_1\land\alpha_2)|(\alpha_1\to\alpha_2)|(\alpha_1\leftrightarrow\alpha_2)"></span></p>

<p><br/></p>

<p><strong>推导规则：</strong></p>

<p>（1）<span data-katex=""></span>包含律：<span data-katex="\frac{\alpha\in\Gamma}{\Gamma\vdash\alpha}"></span></p>

<p>（2）<span data-katex="\neg"></span>消去律：<span data-katex="\frac{\Gamma,\neg\alpha\vdash\beta;\Gamma,\neg\alpha\vdash\neg\beta}{\Gamma\vdash\alpha}"></span></p>

<p>（3）<span data-katex="\to"></span>消去律：<span data-katex="\frac{\Gamma\vdash(\alpha\to\beta);\Gamma\to\alpha}{\Gamma\vdash\beta}"></span></p>

<p>（4）<span data-katex="\to"></span>引入律：<span data-katex="\frac{\Gamma,\alpha\vdash\beta}{\Gamma\vdash\alpha\to\beta}"></span></p>

<p>（5）<span data-katex="\lor"></span>消去律：<span data-katex="\frac{\Gamma,\alpha\vdash\gamma;\Gamma,\beta\vdash\gamma}{\Gamma,\alpha\lor\beta\vdash\gamma}"></span></p>

<p>（6）<span data-katex="\lor"></span>引入律：<span data-katex="\frac{\Gamma\vdash\alpha}{\Gamma\vdash\alpha\lor\beta;\Gamma\vdash\beta\lor\alpha}"></span></p>

<p>（7）<span data-katex="\land"></span>消去律：<span data-katex="\frac{\Gamma\vdash\alpha\land\beta}{\Gamma\vdash\alpha;\Gamma\vdash\beta}"></span></p>

<p>（8）<span data-katex="\land"></span>引入律：<span data-katex="\frac{\Gamma\vdash\alpha;\Gamma\vdash\beta}{\Gamma\vdash\alpha\land\beta}"></span></p>

<p>（9）<span data-katex="\leftrightarrow"></span>消去律：<span data-katex="\frac{\Gamma\vdash\alpha\leftrightarrow\beta;\Gamma\vdash\alpha}{\Gamma\vdash\beta}"></span>，<span data-katex="\frac{\Gamma\vdash\alpha\leftrightarrow\beta;\Gamma\vdash\beta}{\Gamma\vdash\alpha}"></span></p>

<p>（10）<span data-katex="\leftrightarrow"></span>引入律：<span data-katex="\frac{\Gamma,\alpha\vdash\beta;\Gamma,\beta\vdash\alpha}{\Gamma\vdash\alpha\leftrightarrow\beta}"></span></p>

<p><br/></p>

<p><strong>例子：</strong></p>

<p>使用这些推理规则，我们就可以从一些合法的符号串，</p>

<p>推导出另一些合法的符号串了。</p>

<p><br/></p>

<p>（1）<span data-katex="\alpha\to\beta,\beta\to\gamma,\alpha\vdash\alpha\to\beta"></span>：<span data-katex=""></span>包含律</p>

<p>（2）<span data-katex="\alpha\to\beta,\beta\to\gamma,\alpha\vdash\alpha"></span>：<span data-katex=""></span>包含律</p>

<p>（3）<span data-katex="\alpha\to\beta,\beta\to\gamma,\alpha\vdash\beta"></span>：<span data-katex="\to"></span>消去律，式（1），式（2）</p>

<p>（4）<span data-katex="\alpha\to\beta,\beta\to\gamma,\alpha\vdash\beta\to\alpha"></span>：<span data-katex=""></span>包含律</p>

<p>（5）<span data-katex="\alpha\to\beta,\beta\to\gamma,\alpha\vdash\gamma"></span>：<span data-katex="\to"></span>消去律，式（3），式（4）</p>

<p>（6）<span data-katex="\alpha\to\beta,\beta\to\gamma,\alpha\vdash\alpha\to\gamma"></span>：<span data-katex="\to"></span>引入律，式（5）</p>

<p><br/></p>

<p>有了这些以后，我们就可以定义什么是一个<strong>证明</strong>了。</p>

<p><strong>证明序列：</strong></p>

<p>若有限序列，<span data-katex="\Gamma_1\vdash\alpha_1,\Gamma_2\vdash\alpha_2,\cdots ,\Gamma_n\vdash\alpha_n"></span>满足，</p>

<p>（1）<span data-katex="\Gamma_1,\Gamma_2,\cdots ,\Gamma_n"></span>为有限公式集</p>

<p>（2）<span data-katex="\alpha_1,\alpha_2,\cdots ,\alpha_n"></span>为公式</p>

<p>（3）每个<span data-katex="\Gamma_i\vdash\alpha_i(1\leq i\leq n)"></span>都是它之前若干个<span data-katex="\Gamma_j\vdash\alpha_j(1\leq j<i\leq n)"></span>应用某条推导规则得到的</p>

<p><br/></p>

<p>则称这个有限序列为<span data-katex="\Gamma_n\vdash\alpha_n"></span>的一个<strong>（形式）证明序列</strong>。</p>

<p>此时，也称<span data-katex="\alpha_n"></span>可由<span data-katex="\Gamma_n"></span><strong>（形式）证明</strong>，</p>

<p>记为<span data-katex="\Gamma_n\vdash_N\alpha_n"></span>，其中<span data-katex="N"></span>表示自然推理系统。</p>

<p><br/></p>

<h2><strong>逻辑推理</strong></h2>

<p>上文提到的是命题演算的自然推理系统，</p>

<p>这是一个形式系统，我们介绍了它的语法和推导规则，</p>

<p>根据这些推导规则，可以从一些合法的符号串推导出另一些，</p>

<p>在这个基础上，我们定义了什么叫做（形式）证明。</p>

<p><br/></p>

<p>如何<strong>解释</strong>这些符号呢？</p>

<p>它们有什么含义呢？</p>

<p><br/></p>

<p>我们给每一个合法的<strong>公式</strong>指定一个<strong>逻辑命题</strong>，作为这个公式的解释。</p>

<p>为每一个<strong>联接词符号</strong>指定一个<strong>真值函数</strong>，作为这个联接词符号的解释。</p>

<p><br/></p>

<p><strong>命题：</strong></p>

<p>命题是可以判断真假值的句子。</p>

<p><br/></p>

<p><strong>真值函数：</strong></p>

<p><span data-katex="\{0,1\}"></span>上的<span data-katex="n"></span>元函数，<span data-katex="f:\{0,1\}^n\to\{0,1\}"></span></p>

<p>称为一个<span data-katex="n"></span>元真值函数。</p>

<p><br/></p>

<p>我们将每个联接词与一个真值函数一一对应起来，</p>

<p>那么，复合命题的真假值就可以通过子命题的真假值计算出来了。</p>

<p><br/></p>

<p><strong>指派：</strong></p>

<p>设<span data-katex="\alpha"></span>为一个命题，<span data-katex="\alpha"></span>中出现的所有命题变元构成了一个序列<span data-katex="p_1,p_2,\cdots ,p_n"></span>，</p>

<p>对该序列指定的任一真假值序列<span data-katex="t_1,t_2,\cdots ,t_n"></span>称为<span data-katex="\alpha"></span>关于<span data-katex="p_1,p_2,\cdots ,p_n"></span>的一个<strong>指派</strong>，</p>

<p>其中<span data-katex="t_i=0,1"></span>。</p>

<p><br/></p>

<p><strong>真值表：</strong></p>

<p>命题在所有可能的指派下，所取值列成的表，称为真值表。</p>

<p><br/></p>

<p><strong>永真式：</strong></p>

<p>如果命题关于其中出现命题变元的所有指派均为真，则称该命题是一个永真式。</p>

<p><br/></p>

<p>有了这些以后，我们就可以定义<strong>推理</strong>了。</p>

<p>设<span data-katex="\alpha_1,\alpha_2,\cdots ,\alpha_n,\beta"></span>都是命题，</p>

<p>称<strong>推理『<span data-katex="\alpha_1,\alpha_2,\cdots ,\alpha_n"></span>推出<span data-katex="\beta"></span>』是有效的</strong>，</p>

<p>如果对<span data-katex="\alpha_1,\alpha_2,\cdots ,\alpha_n,\beta"></span>中出现的命题变元的任一指派，</p>

<p>若<span data-katex="\alpha_1,\alpha_2,\cdots ,\alpha_n"></span>都为真，则<span data-katex="\beta"></span>也为真，</p>

<p>记为<span data-katex="\alpha_1,\alpha_2,\cdots ,\alpha_n\models\beta"></span></p>

<p>否则，称推理『<span data-katex="\alpha_1,\alpha_2,\cdots ,\alpha_n"></span>推出<span data-katex="\beta"></span>』是无效的。</p>

<p><br/></p>

<p><strong>例子：</strong></p>

<p><span data-katex="\alpha\to\beta,\alpha\models\beta"></span></p>

<p><span data-katex="\alpha\lor\beta,\neg\alpha\models\beta"></span></p>

<p><br/></p>

<h2><strong>证明与推理之间的关系</strong></h2>

<p>命题演算的自然推理系统，有很多性质，其中，</p>

<p><br/></p>

<p><strong>可靠性</strong></p>

<p><span data-katex="\Gamma\vdash\alpha\Rightarrow\Gamma\models\alpha"></span></p>

<p><br/></p>

<p><strong>完备性</strong></p>

<p><span data-katex="\Gamma\models\alpha\Rightarrow\Gamma\vdash\alpha"></span></p>

<p><br/></p>

<p>它们表明，如果一个公式可以被证明，那么它所对应命题的推理就是有效的，</p>

<p>如果某些命题的推理是有效的，那么它就可以被证明。</p>

<p><br/></p>

<p>然而，形式化系统这种研究方法，并不是完美无缺的。</p>

<p><strong>哥德尔不完全性定理</strong></p>

<p>如果<span data-katex="\Gamma"></span>是一个有穷并包含初等算术<span data-katex="\Pi"></span>的形式理论，那么<span data-katex="\Gamma"></span>是一个不完全的形式理论。</p>

<p><br/></p>

<p><strong>哥德尔协调性定理</strong></p>

<p>如果形式理论<span data-katex="\Gamma"></span>包含初等算术<span data-katex="\Pi"></span>，那么<span data-katex="\Pi"></span>的协调性不能在<span data-katex="\Gamma"></span>中被证明。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>证明和推理也是可以研究的，</p>

<p>并且，一直以来都是人们的感兴趣的研究对象。</p>

<p><br/></p>

<p>逻辑学对自动定理证明，程序设计语言中的类型系统，</p>

<p>协议验证，软硬件的安全等领域，</p>

<p>有很重要的理论价值。</p>

<p><br/></p>

<p>以命题逻辑和一阶谓词逻辑为基础，</p>

<p>人们构造出了各式各样种类繁多的逻辑系统，</p>

<p>包括模态逻辑，直觉主义逻辑，时序逻辑，动态逻辑，</p>

<p>多值逻辑，模糊逻辑，非单调逻辑，λ演算，组合逻辑等等。</p>

<p><br/></p>

<p>现代逻辑学已经应用到了越来越多的学科之中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[真实在哪里]]></title>
    <link href="https://thzt.github.io/blog/2016/01/29/computer-science/"/>
    <updated>2016-01-29T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/01/29/computer-science</id>
    <content type="html"><![CDATA[<h2><strong>引子</strong></h2>

<p>以下，我总结了这些年对理想的追求，以及看的一些书，还有走的一些弯路，目的是为了把回忆保存起来，过几年再仔细品味。</p>

<p><br/></p>

<h2><strong>导火线</strong></h2>

<p>游客问毕加索：为什么你的画不像照片上的那么真实呢？毕加索说：你觉得照片上的，就是真实的你吗？</p>

<p>是啊，到底什么是真实的，什么是虚幻的？这句话是我初中时看到的，影响了我十几年，一直为我指引方向。</p>

<p><br/></p>

<h2><strong>学生时代</strong></h2>

<p>我找到了当时在国内很火的『第一推动系列』，《时间简史》《皇帝新脑》《黑洞与时间弯曲》。</p>

<p>当我认识到物理学是一门研究大自然的学科时，不顾父母发对，选择了冷门的大学专业。</p>

<p>与很多调剂过来的同学不同的是，我的收获简直是太大了，每一门课都认真的学着，并努力向这个『真实』的方向靠拢。</p>

<p>除了把基础物理学好之外，我又对编程产生了浓厚的兴趣，我依稀记得当时，通宵的编写VB，彻夜的学习汇编，仔细的理解C与C++。</p>

<p>终于到了毕业季，本来已经找到工作的我，由于社会的压力，父亲良言相劝，让我读研，至今我觉得这件事情非常正确。</p>

<p>当时有两个选择，跨专业考计算机或者继续学习物理，对物理学我还是比较执着，于是就选择了理论物理。并且，至今我也没有后悔这个决定。</p>

<p>研究生阶段，学的最多的其实是数学，数学基本功渐渐体现出来了。然而，当我了解到国内的科研现状后，我决定还是不要读博了。</p>

<p><br/></p>

<h2><strong>厚积而薄发</strong></h2>

<p>毕业后，我找了一个程序员的工作，不为什么，因为社会需要。能力再大也没用，社会稀缺才是重要的，这能保证我的生活一直很轻松。</p>

<p>既然选择了程序员的道路，我就决定好好研究一下编程，把基础打牢，同时不忘自己对『真实性』的追求。编程不就是写写代码吗？有什么基础可言？我不这么认为。</p>

<p>因为已经有了很多年的编程经验，一万小时定律已经不算什么了，这才让我能更清醒的做出选择。把基础再打牢一些，基础决定了最后的高度，欲速则不达。</p>

<p>我先是重新研读了《计算机程序的构造与解释》，这本圣经早有耳闻，但只是翻着看了看，我后悔一开始没有认真的阅读，否则可能就改写我当时的学习路线了。</p>

<p>这本书让我对Lisp语言产生了好感，于是，开始疯狂学习大法，『把市面上所有能找到的书都看一遍』。当然，这是不可能的，这不过是一种决心罢了。</p>

<p>不过在这之前，我面临了一个选择，Lisp两大方言中，到底是学Common Lisp还是Scheme？不错，当时Racket还没有这么火。</p>

<p>我做出了艰难的决定，选择大而全的Common Lisp，不为别的，就是因为他可能『更不必需』。</p>

<p>这一向是我的决策准则，在大方向上，总是选择『更不必需』的方案，广度优先。否则，如果不这么做，就可能一辈子都不会再接触它了，总是有更重要的事情等着我。</p>

<p>《ANSI Common Lisp》《Land of Lisp》《Pratical Common Lisp》《On Lisp》《Let Over Lambda》《Lisp语言（马希文）》《Lisp in small pieces》</p>

<p>好了，这些看完后，对Common Lisp有了一个基本的认识了，于是该学Scheme了吧，这个『更必需』一点，看吧，必需的东西早晚会去学的。</p>

<p>《R5RS》《The Litter Schemer》《The Scheme Promgramming Language》《Essentials of Programming Languages》《An Introduction to Scheme and its Implementation》</p>

<p>可以看到Scheme的书更学术一些，如果没有Common Lisp的基础，这里就比较费力了。</p>

<p>在读Scheme的过程中，发现了自己编译原理很弱，于是恶补了一下，不懂形式语言和编译原理，都不敢说自己学计算机的。</p>

<p>《编程语言实现模式》《程序设计语言·实践之路》《形式语言与自动机》《自动机理论，语言和计算导论》《编译原理》《编译器设计》</p>

<p>然后，又发现自己算法很弱，恶补了几本算法。不懂算法，都不敢做工程啊。《算法导论》《算法》《具体数学》</p>

<p>这些刷完之后，我马上发现了更基础的薄弱环节，那就是Lambda演算。Lisp是函数式语言的一种，一门很像Lambda演算的语言，究竟有什么渊源呢，还得看书，同时各种语言的实现原理也吸引了我。</p>

<p>《Lambda-Calculus and Combinators, an Introduction》《Concept in Programming Languages》《Compiling Continuations》《Lecture notes on the Lambda Calculus》《数学·计算·逻辑（陆汝钤）》《哥德尔·爱舍尔·巴赫 集异璧之大成》</p>

<p>刷怪的途中，是不可能绕过Haskell的，身为函数式家族的一朵奇葩，必须得学，是该死磕一下的时候了。</p>

<p>《Learn you a Haskell for Great good》《Real world Haskell》《A History of Haskell》《Beginning Haskell》《Programming in Haskell》《Haskell函数式编程入门》《Parallel and Concurrent Programming in Haskell》《Haskell: The Craft of Functional Programming》</p>

<p>好吧，我承认，Lisp中遇到Continuation，Haskell中遇到Monad的时候，我真的跪了，只能硬着头皮看，谁叫我不知道别人也跪了呢。这其实也表明学习时最好不要看别人，自己学才能走的更远。</p>

<p><br/></p>

<h2><strong>放松一下</strong></h2>

<p>把这些放一放，容我先把其他主流语言刷一遍，压压惊。</p>

<p>《C与指针》《C专家编程》《程序员的自我修养》《Rust Essentials》《Realm of Racket》《Seven Concurrency Models in Seven Weeks》《Programming in Standard ML》《Learn you some Erlang for Great Good》《Scala编程》《C++模板元编程》</p>

<p>各种工业级的语言就不说了，语法过一下就行了，反正以后有的是机会学的，这些不是『更不必需』的。</p>

<p>Go，Java，C#，PHP，Python，Ruby，JavaScript，Clojure，Swift，C++。</p>

<p><br/></p>

<h2><strong>数学与逻辑学交相呼应</strong></h2>

<p>好了，有了这些『基本功』之后，让我们再来一战吧。那我必须先把类型理论搞一搞，这个始终是个没有填的坑。</p>

<p>《类型和程序设计语言》《Type Systems》《The Litter Prover》</p>

<p>然后，发现类型其实和逻辑学有一腿，逻辑学可是一个大的方向，琢磨了好几天，我决定还是先尝试一下吧。</p>

<p>《Teach yourself Logic 2015》《Logic and Structure》《数理逻辑》《计算机科学中的现代逻辑学》</p>

<p>其实，决定后发现并不是那么难，难的是决定不是决定后的行动。让我感到惊讶的是，逻辑学的很多结论都暗示着人们对『真实性』问题的探索，我非常幸运走到了这里。</p>

<p>以集合论，证明论，递归论，模型论为基础的逻辑学，完美的诠释了『真实性』问题的最新进展。</p>

<p>感叹之余，可以绕回来了学学数学了，读读范畴论，然而还要从抽象代数开始。</p>

<p>《近世代数基础》《Categories for the Working Mathematician》</p>

<p>幸亏研究生阶段学了一些数学，群论，集合论，拓扑学，微分流形，都已经学过，这里就相对容易了一些。</p>

<p>到后来才发现了计算机科学的数学基础，《离散数学教程》——北大版，其中包含了集合论，图论，代数结构，组合数学，数理逻辑，5大部分，早看这本就好了。</p>

<p>其中，逻辑和代数，分别在语法和语义层面为计算机科学打下了坚实基础。</p>

<p>目前有一些遗憾，那就是同调代数，代数拓扑，同伦类型论还没有看，希望以后坚持读下去，</p>

<p>《Practical Fundations of Programming Languages》是一本好书，只读了一半，希望能读完，《程序设计语言的理论基础》，《计算机语言的形式语义》值得认真学习。</p>

<p><br/></p>

<h2><strong>其他的</strong></h2>

<p>其实以上过程中，我故意的隐藏了作为一个软件工程师应该读的那部分书。</p>

<p>让我们来看看吧，软件工程是一个不小的领域，也是需要修炼的，幸亏是工作需要，让我不得不学好它。</p>

<p>从哪开始呢，当然是设计模式了，不懂设计模式，怎么进行『面向对象』的编程呢？《大话设计模式》《设计模式之禅》《软件架构模式》</p>

<p>然后是代码质量，《测试驱动开发》《代码大全》《程序员修炼之道》《重构》《重构与模式》</p>

<p>软件开发方法论，《快速软件开发》《软件需求模式》《人月神话》《大教堂与市集》《没有银弹》《敏捷软件开发: 原则，模式与实践》</p>

<p>编程思想，《UNIX编程艺术》《代码之殇》《高效程序员的奥秘》《理解专业程序员》《软件随想录》《程序员的呐喊》《黑客与画家》《代码的未来》《图灵的秘密》《你的灯亮着吗》</p>

<p>新潮的东西也该玩玩，《大数据时代》《集体智慧编程》《统计学习方法》</p>

<p>有过Lisp的基础，Emacs应该是正常的选择了吧，《GNU Emacs Lisp Reference Manual》</p>

<p>还有很多没有看完的书，太难的太无聊的，或者印象不够深刻的书，没有提到，希望以后能够再有机会拿起来读一下。不过，也可能根本就没有这个机会了。</p>

<p>总结一下，Scheme和Haskell绝对是两个正确的切入点，越早接触越好。同时也会更早接触到领域内的大神，粉碎自尊与自傲，含着泪跪着走完剩下的路。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>那么，言归正传，到底什么是真实呢？我的理解是，科学方法就是目前最有效的对真实性的保障。</p>

<p>科学方法讲究从假设出发，约定一套推理规则，那么就可以推导出很多结论来了。然而这些结论并不是现实世界本身，这些结论与现实世界之间的解释关系构成了一个数学模型。</p>

<p>我们看到，不同的假设和推理规则构成了不同的公理系统，连同对它们的解释又构成了不同的模型，所解释的现实世界是公理系统的语义。</p>

<p>怎样证明某个公理系统是『对』的呢？不幸的是，无法证明，只能证伪。而且，只需要找出一个反例即可。</p>

<p>这就是科学方法。以上是数学（集合论），逻辑学（一阶逻辑），哲学（科学哲学），自然科学（物理学），计算机科学（可计算性理论）的交汇点。</p>

<p>我庆幸之前的所有选择，给了我这样的认识，我还会一直坚持下去，直到有更深入的理解。</p>

<p>我觉得一个人终究会走到自己想要去的地方，不管经过何种途径，沿途中任何我们所做的积累都是有用的，未来的某一天真的就能用上。</p>

<p>人们也不可能在一个阶段同时抓住两件东西，只能舍弃一个，没关系，舍弃说明你得到了更重要的那个，过后你完全可以再有机会得到失去的那个，只要你坚持自己的梦想。</p>

<p>相反，如果当时你拥有了失去的那个，应得的就会被错过，人生本来就是不完美的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多做不如少做，不做不如去做]]></title>
    <link href="https://thzt.github.io/blog/2016/01/26/less-is-more/"/>
    <updated>2016-01-26T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/01/26/less-is-more</id>
    <content type="html"><![CDATA[<p>喜欢忙碌并不是勤奋。——塞内加</p>

<p><br/></p>

<p>在生活节奏日益加快的今天，</p>

<p>忙碌似乎已经成了普遍现象了，</p>

<p>大家急匆匆的做这个，</p>

<p>忙着做那个，口里说着<strong>没时间</strong>。</p>

<p><br/></p>

<p>且不说对自身的影响，</p>

<p><strong>我们这么忙，真的对要做的事情有益吗</strong>？</p>

<p><br/></p>

<p>有人说，</p>

<p>初级人才，完成任务。</p>

<p>中级人才，解决问题。</p>

<p>高级人才，<strong>带来价值</strong>。</p>

<p><br/></p>

<p>我十分同意这种说法。</p>

<p><br/></p>

<p>上帝安排我们来到这个世界上，</p>

<p>是希望我们有自己的活法，</p>

<p>给世界带来不同。</p>

<p><br/></p>

<p>公司雇佣我们，</p>

<p>是因为我们数十年的人生积累，</p>

<p>可以帮助公司为客户带来价值，</p>

<p>而不是仅仅忙起来这么简单。</p>

<p><br/></p>

<p>相似的，</p>

<p>程序员应该把自己定位成解决方案的提供者，</p>

<p>而不是帮助别人实现想法的人。</p>

<p><br/></p>

<p><strong>带来更大价值的事情是思考</strong>，</p>

<p>要有成效，而不是忙碌起来。</p>

<p><br/></p>

<h2>有效的思考时间</h2>

<p>如果回顾一下的话，</p>

<p>每天中，我们的有效思考时间，</p>

<p>实际上只占很少一部分，</p>

<p><strong>可能只有短短几秒钟</strong>。</p>

<p><br/></p>

<p>那么，我们经过这么多年的，</p>

<p>科学教育，人生阅历，挑灯苦读，</p>

<p>都白白浪费了。</p>

<p><br/></p>

<p>事实上，<strong>多思考才对得起别人支付的薪水</strong>，</p>

<p>否则，为什么请我们来做这件事情呢？</p>

<p>好吧，我们其实并不是那么重要。</p>

<p>不过，要先有这个自信。</p>

<p><br/></p>

<p>如果我们做的事情，</p>

<p>当初不必努力学习，现在就可以做，</p>

<p>那对企业来说就是资源浪费，</p>

<p>也可能我们并不适合这个地方。</p>

<p><br/></p>

<p>因此，要<strong>尽可能的延长自己每天中的有效思考时间</strong>，</p>

<p>这些通过思考而得来的结论，是我们的王牌，</p>

<p>也是我们唯一的价值所在。</p>

<p><br/></p>

<p>与此同时，也不要走到另一个极端。</p>

<p><strong>空想没有任何好处</strong>，</p>

<p>还必须为自己的想法给出实现，</p>

<p>落到实处。</p>

<p><br/></p>

<p>所以，我们一定是在实现自己的想法，</p>

<p>而不是别人的想法。</p>

<p><br/></p>

<p>想法也必须由自己实现，</p>

<p>才可以得到最直接的反馈，</p>

<p>做出<strong>快速的调整</strong>。</p>

<p><br/></p>

<h2>学会拒绝</h2>

<p>一个人的底线是什么，</p>

<p>他在社会中对外界的表现就是什么。</p>

<p><br/></p>

<p>无论他能力超群，</p>

<p>还是技高一筹，</p>

<p>或者出类拔萃，</p>

<p>这些都没有用。</p>

<p><br/></p>

<p><strong>同别人合作时</strong>，</p>

<p><strong>迟早会迫使退回自己的底线</strong>，</p>

<p>无法完全施展。</p>

<p><br/></p>

<p>所以说，在现实项目中，</p>

<p>一个程序员的代码好坏，</p>

<p>不止取决于自身的编码水平，</p>

<p>还取决于他的底线。</p>

<p><br/></p>

<p>没有不紧的工期，</p>

<p>没有资源足够的工程，</p>

<p>如果一个程序员不坚守底线，哪怕水平再高，</p>

<p>也只能编写劣质的软件。</p>

<p><br/></p>

<p>因为，实际安排工作的人，</p>

<p>并不会面面俱到，亲自落实每一件事情，</p>

<p>总会有一个折衷处理。</p>

<p><br/></p>

<p>学会拒绝吧。</p>

<p><br/></p>

<p>压力是我们自己造成的，</p>

<p>除了吃饭睡觉之外，</p>

<p>再<strong>没有不得不做的事情</strong>了。</p>

<p><br/></p>

<p>拒绝，还可以让安排工作的人清晰的认识到，</p>

<p>他<strong>对资源的可控程度</strong>。</p>

<p><br/></p>

<p>很简单，<strong>要想有时间，那就少做点事情</strong>。</p>

<p>如果可以多做，</p>

<p>就不会考虑怎样在少做的情况下，</p>

<p>达到相同的效果了。</p>

<p><br/></p>

<p>人们都会多做，很忙，</p>

<p>然而对<strong>结果</strong>可能并没有什么帮助。</p>

<p><br/></p>

<h2>勇气</h2>

<p>勇者，气也。</p>

<p>气之所至，力亦至焉。</p>

<p><strong>心</strong>之所至，气乃至焉。</p>

<p><br/></p>

<p>首先要有想法去做某件事情，</p>

<p>又很想把它做好，才会有勇气。</p>

<p><br/></p>

<p>如果说从多做到少做，是第一步，</p>

<p>从少做到不做，是第二步，</p>

<p>那么从不做到<strong>去做</strong>，就是第三步了。</p>

<p><br/></p>

<p>在选择不做的前提下，</p>

<p>在仔细分析了后果的条件下，</p>

<p>我们要<strong>勇于做一些自认为正确的事情</strong>。</p>

<p><br/></p>

<p>对于所有的事情而言，</p>

<p>如果不主动说出来，就没有人会理解，</p>

<p>如果没有人开始，就不可能继续下去。</p>

<p><br/></p>

<p>没有勇气的人，</p>

<p>对社会没有价值，</p>

<p>对他人没有帮助。</p>

<p><br/></p>

<p><strong>有拈叶飞花都可以伤人的武功，却消极逃避</strong>，</p>

<p><strong>不如，一把钝剑，勇于济世</strong>。</p>

<p><br/></p>

<h2>结语</h2>

<p>如果心脏病发作了，</p>

<p>每天只能工作4个小时，</p>

<p>我们会怎样工作？</p>

<p><br/></p>

<p>怎么可能每天的工作，都恰好8个小时可以做完？</p>

<p><br/></p>

<p>人生不是通过加速就可以体味到更多。——莫罕达斯·甘地</p>

<p>忙碌的人忙于任何事情，除了生活。——塞内加</p>

<p><br/></p>

<p>参考：</p>

<p>《<a href="http://book.douban.com/subject/10786476/">每周工作4小时</a>》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件开发的节奏]]></title>
    <link href="https://thzt.github.io/blog/2016/01/21/the-rhythm-of-the-development/"/>
    <updated>2016-01-21T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/01/21/the-rhythm-of-the-development</id>
    <content type="html"><![CDATA[<p>有时候，在软件项目的巨大压力下，</p>

<p>我们会不由自主的做出，违反<strong>自然规律</strong>的事情。</p>

<p><br/></p>

<p>短期来看，确实受益了，</p>

<p>然而，长期看来，无异于<strong>揠苗助长</strong>，</p>

<p>流毒无穷。</p>

<p><br/></p>

<p>人们以为，</p>

<p>软件行业中，<strong>加班</strong>是家常便饭，</p>

<p>但实际上，这是管理上缺陷。</p>

<p><br/></p>

<p>处于底层的程序员们，无力涉足管理，</p>

<p>但也可以认真想一想，<strong>如何高效的加班</strong>。</p>

<p><br/></p>

<p>我们先从几个角度来看看加班这件事吧。</p>

<p><br/></p>

<h2>从收支上看加班</h2>

<p>长期加班并不是一件好事，</p>

<p>因为，它增加了投入。</p>

<p><br/></p>

<p>这还不好吗？</p>

<p>其实不然。</p>

<p><br/></p>

<p>因为一件事情的<strong>代价</strong>，</p>

<p>在很大程度上，影响了我们的<strong>决策</strong>。</p>

<p><br/></p>

<p>如果在计划阶段，</p>

<p>认为不加班可以做完，</p>

<p>最后结果是加班做完的。</p>

<p><br/></p>

<p>这只能说明我们低估了成本，</p>

<p>那么做这件事情就可能不是那么值得了。</p>

<p><br/></p>

<p>因此，<strong>加班会影响我们去评判某一选择的正确性</strong>，</p>

<p><strong>还会让我们继续做出错误的决定</strong>。</p>

<p><br/></p>

<h2>从工作性质上看加班</h2>

<p>短期加班，是很有效果的，</p>

<p>但是，人不能不休息，</p>

<p>软件工程师也不能不重新思考自己的设计。</p>

<p><br/></p>

<p>加班会迫使人们把工作赶出来，</p>

<p>那么任何有创造力的事情都将被错过。</p>

<p><br/></p>

<p>而且，代码质量会变差，</p>

<p><strong>添加新功能的成本也会越来也大</strong>。</p>

<p><br/></p>

<p>经常发生的事情是，</p>

<p>本来很简单的一个功能，因为有历史原因，</p>

<p>才不得不使用复杂的实现方案。</p>

<p><br/></p>

<p>加班会让这件事更频繁的发生。</p>

<p><br/></p>

<h2>从工作总量上看加班</h2>

<p>短期内，工作总量是会增加的，</p>

<p>因为前几天人们都不累，</p>

<p>延长了工作时间，代码总量肯定是会增加的。</p>

<p><br/></p>

<p>然而，长期加班会导致人们效率下降，</p>

<p>在明知道要加班的情况下，</p>

<p>会更有意识的降低自己的工作效率，</p>

<p>反正要加班嘛。</p>

<p><br/></p>

<p>因此，工作总量不增反降。</p>

<p><br/></p>

<p>另外，人是不可能违背自然规律的，</p>

<p><strong>没有必要用第二天一整天的无精打采</strong>，</p>

<p><strong>来换取今天几个小时的加班</strong>。</p>

<p><br/></p>

<p>只是改变了生物钟，</p>

<p>没有什么意义呀。</p>

<p><br/></p>

<p>而且，代码多一定不是好事，</p>

<p><strong>错的越多，要改的就越多</strong>。</p>

<p><br/></p>

<h2>从软件工程来看加班</h2>

<p>如果去饭店吃饭，</p>

<p>厨师说做一个鱼香肉丝要10分钟，</p>

<p>我们再急，也不会要求厨师5分钟把它做出来，</p>

<p>让他加班也没用。</p>

<p><br/></p>

<p>一个女人，必须经过10月怀胎，</p>

<p>才能生下小孩，</p>

<p>肯定不会有人强迫她5个月就生下来，</p>

<p>让她加班，给她加人手也没用。</p>

<p><br/></p>

<p>经验表明，</p>

<p><strong>有些事情经历的时间是不可压缩的</strong>。</p>

<p><br/></p>

<p>因此可以说，</p>

<p>当工期足够短的情况下，</p>

<p>加再多的人也是徒劳的。</p>

<p><br/></p>

<p>这时候，我们应该努力反思了，</p>

<p><strong>为什么我们要做那么多的事</strong>，</p>

<p><strong>却还剩下了这么少的时间</strong>？</p>

<p><br/></p>

<h2>工程师的价值</h2>

<p>以上的分析不少了，</p>

<p>我相信如果有领导看到这里，</p>

<p>还是想让你加班，那就是故意的了。</p>

<p><br/></p>

<p>在不可抗拒的情况下，</p>

<p>底层程序员们，实际上应该考虑，</p>

<p><strong>高效加班的办法</strong>。</p>

<p><br/></p>

<p>因为，只有我们明白软件，</p>

<p>知道它的生命周期，</p>

<p>了解它的特性，</p>

<p>更知道怎么做好它。</p>

<p><br/></p>

<p>我们在工期紧的情况下，</p>

<p>最应该做的事情就是，</p>

<p><strong>管理好自己的时间，调节好工作状态</strong>。</p>

<p><br/></p>

<p>用正确的姿势走好每一步。</p>

<p><br/></p>

<h2>保持节奏</h2>

<p>无论外界有多么大的压力，</p>

<p>我们都要<strong>保持自己的节奏</strong>。</p>

<p><br/></p>

<p>这不但是对自己负责，</p>

<p>也是从专业的角度对项目负责。</p>

<p><br/></p>

<p><strong>我们只有保持节奏的产出</strong>，</p>

<p><strong>才能帮助项目成功</strong>。</p>

<p><br/></p>

<p>不能为了速度一味的牺牲质量，</p>

<p>也不能因为洁癖，减缓前进的步伐。</p>

<p><br/></p>

<p>其实，更多情况下，我们是自乱阵脚。</p>

<p><br/></p>

<p>别人不了解软件，让我们精疲力尽，让项目走向失败，</p>

<p>如果就听之任之的话，那就只能怪我们自己了。</p>

<p><br/></p>

<p><strong>身为一名软件工程师</strong>，</p>

<p><strong>没有努力把项目调整到正确的轨道</strong>，</p>

<p><strong>而是选择傻傻的加班</strong>。</p>

<p><br/></p>

<p><strong>我觉得，这才是团队的悲哀</strong>。</p>

<p><br/></p>

<h2>结语</h2>

<p>再多的加班，</p>

<p>也比不上想人们在主观上想把它做好。</p>

<p><br/></p>

<p>可惜，可惜。</p>

<p><br/></p>

<p>欲将心事付瑶筝，</p>

<p>知音少，弦断有谁听？</p>

<p>——《小重山》岳飞</p>
]]></content>
  </entry>
  
</feed>
