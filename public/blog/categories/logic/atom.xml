<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Logic | 何幻]]></title>
  <link href="https://thzt.github.io/blog/categories/logic/atom.xml" rel="self"/>
  <link href="https://thzt.github.io/"/>
  <updated>2016-08-24T14:21:17+08:00</updated>
  <id>https://thzt.github.io/</id>
  <author>
    <name><![CDATA[thzt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[类型理论之拙见]]></title>
    <link href="https://thzt.github.io/blog/2016/05/19/type-theory-in-my-eye/"/>
    <updated>2016-05-19T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/05/19/type-theory-in-my-eye</id>
    <content type="html"><![CDATA[<p>类型系统，是指一种根据所计算出值的种类，对词语进行分类，</p>

<p>从而证明某程序行为不会发生的，</p>

<p>可行语法手段。——《TAPL》</p>

<p><br/></p>

<p>可见类型系统是形式方法的一种，</p>

<p>也是一种证明方法。</p>

<p><br/></p>

<p>当我们把自己写好的程序提交给别人时，</p>

<p>如果别人质疑『你怎么证明它是对的』，</p>

<p>是不好回答的。</p>

<p><br/></p>

<p>因为通过测试用例来检测程序行为，</p>

<p>本身就是在进行不完全归纳，</p>

<p>我们只能断定验证过的事情是正确，</p>

<p>却不能断定一般性质。</p>

<p><br/></p>

<p>类型理论与数学，逻辑学，计算机科学相关，</p>

<p>甚至渗透到了其他学科之中。</p>

<p><br/></p>

<p>类型系统是程序语言之上的一套逻辑系统，</p>

<p>可以对程序进行推理，来断定某些性质。</p>

<p>不同的逻辑系统，『诱导』出了不同的类型系统。</p>

<p><br/></p>

<p>形式系统有个特点，那就是稍微改变一点约束条件，</p>

<p>就会得到一系列好玩的附加特性，</p>

<p>有大量丰富的逻辑系统可以玩。</p>

<p>例如，直觉主义逻辑，模态逻辑，时态逻辑，等等。</p>

<p><br/></p>

<p>可是，仅从代码进行静态分析，来断定程序运行时的所有行为，是不可判定的。</p>

<p>因此只能保证well typed的程序没有某类错误，</p>

<p>每个类型系统有各自要阻止的行为。</p>

<p><br/></p>

<p>类型系统种类繁多，支持各种好玩的特性，</p>

<p>例如，支持Polymorphism的类型系统，某类型可以由其他类型参数化，</p>

<p>支持Dependent type的系统，类型可以由值来决定，</p>

<p>子类型允许我们适当放宽类型要求，</p>

<p>递归类型，存在类型，全称类型。</p>

<p><br/></p>

<p>1934年，Curry意识到简单类型化lambda演算中的类型，与直觉主义逻辑之间的关系，</p>

<p>后面的研究发现，人们把这种对应关系推广为了Curry-Howard-Lambek Correspondance，</p>

<p>它将程序语言的类型，逻辑系统中的命题，和指称语义笛卡尔闭范畴，联系起来了。</p>

<p>一个合法项的存在，就证明了对应它类型的一个命题为真，程序即构造出来的证明。</p>

<p><br/></p>

<p>类型理论的实用内容还有很多，</p>

<p>Gradual typing的动静结合，例如flow，</p>

<p>以及Rust和Linear typeing的应用，</p>

<p>另外还有，Hindley–Milner类型推导算法。</p>

<p><br/></p>

<p>类型系统有一些性质可以衡量，</p>

<p>例如，type soundness，type safety，</p>

<p>以及检查类型的方式，static check，dynamic check，</p>

<p>包括某些语言是explicitly typed，而某些是implicitly typed，</p>

<p>某些语言是被stronger checked，有些则是weaker checked。</p>

<p><br/></p>

<p>现在是学习时间了。</p>

<p><br/></p>

<p>参考：</p>

<p><a href="https://wiki.haskell.org/Curry-Howard-Lambek_correspondence">Curry-Howard-Lambek correspondence</a></p>

<p><a href="https://book.douban.com/subject/1318672/">类型和程序设计语言</a></p>

<p><a href="http://lucacardelli.name/papers/typesystems.pdf">Type System - Luca Cardelli</a></p>

<p><a href="https://book.douban.com/subject/1944729/">程序设计语言理论基础</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[形式证明与逻辑推理]]></title>
    <link href="https://thzt.github.io/blog/2016/03/01/proof-and-deduction/"/>
    <updated>2016-03-01T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/03/01/proof-and-deduction</id>
    <content type="html"><![CDATA[<script src="https://thzt.github.io/thirdpart/jQuery/jquery-1.11.1.js"></script>


<p><link href="https://thzt.github.io/thirdpart/KaTeX/katex.min.css" rel="stylesheet"/></p>

<script src="https://thzt.github.io/thirdpart/KaTeX/katex.min.js"></script>


<script src="https://thzt.github.io/javascripts/katex.js"></script>


<p>小时候，我就对侦探非常着迷，</p>

<p>买了很多介绍破案的漫画书，故事书，小说。</p>

<p><br/></p>

<p>什么《大宇神秘惊奇系列》啊，</p>

<p>《名侦探柯南》啊，</p>

<p>《福尔摩斯探案全集》啊，等等。</p>

<p><br/></p>

<p>可是，对于<strong>什么是推理</strong>，</p>

<p>以及怎样进行推理，</p>

<p>并没有清晰系统的认识。</p>

<p><br/></p>

<p>学生时代，从平面几何开始，</p>

<p>我们就知道了证明题。</p>

<p>经过一步一步的推导，</p>

<p>最后证明结论成立。</p>

<p><br/></p>

<p>可是，对于<strong>什么是证明</strong>，</p>

<p>并没有人能说出精确的定义。</p>

<p><br/></p>

<p>这一切，难道真是只是个谜吗？</p>

<p>是人类的未知领域吗？</p>

<p><br/></p>

<p>其实不然。</p>

<p><strong>逻辑学</strong>就是研究推理和证明的学科，</p>

<p>研究思维的形式，规律和方法。</p>

<p><br/></p>

<p>其中，数理逻辑是逻辑学与数学的交叉学科，</p>

<p>用数学的方法研究逻辑，</p>

<p>我想，答案应该在这里吧。</p>

<p><br/></p>

<h2><strong>大局观</strong></h2>

<p>数理逻辑虽然博大精深，</p>

<p>但是研究方法却非常简洁优美。</p>

<p><br/></p>

<p>给定一套逻辑系统，</p>

<p>分别从两个侧面来描述这个系统的性质。</p>

<p>语法层面，语义层面。</p>

<p><br/></p>

<p><strong>语法</strong>，指的是构成这个逻辑系统的符号规则，</p>

<p>由公理和定理的推导规则组成，</p>

<p>让我们可以从一串合法的符号得到另一串合法符号，</p>

<p>称之为<strong>形式证明</strong>。</p>

<p><br/></p>

<p><strong>语义</strong>，指的是用什么样的数学对象可以解释这些符号，</p>

<p>由论域和解释函数组成，我们得到的是一些代数结构，</p>

<p>而且，从已知符号串的语义性质得到了其他符号串的性质，</p>

<p>称之为<strong>逻辑推理</strong>。</p>

<p><br/></p>

<p>学校中的数理逻辑教科书，介绍了<strong>命题演算</strong>和<strong>一阶谓词演算</strong>这两个典型的逻辑系统。</p>

<p>它们各自的语义解释，恰好描述了日常生活中推理问题。</p>

<p><br/></p>

<p>总之，数理逻辑，用一套符号，对生活中常见的逻辑问题，进行了数学建模，</p>

<p>研究它，希望得到与证明和推理相关的更多性质和结论。</p>

<p><br/></p>

<h2><strong>形式证明</strong></h2>

<p>为了说明问题，而又不引入过多的逻辑学概念，</p>

<p>我们从命题逻辑开始。</p>

<p><br/></p>

<p>命题逻辑的形式化演算系统大体上可分为两种类型，</p>

<p>一是<strong>希尔伯特式</strong>的公理化演算系统，</p>

<p>二是<strong>甘岑(Gentzen)式</strong>的自然推理系统。</p>

<p><br/></p>

<p>这两个系统各有所长，</p>

<p>前者更能体现公理化的思想，但其推理过程比较繁琐，</p>

<p>后者形式推理比较自然，但是规则较多。</p>

<p><br/></p>

<p>下面只说<strong>命题演算的自然推理系统</strong>。</p>

<p><br/></p>

<p><strong>语法：</strong></p>

<p>（1）可数个命题符号：<span data-katex="p_1,p_2,\cdots"></span></p>

<p>（2）5个联接词符号：<span data-katex="\neg,\lor,\land,\to,\leftrightarrow"></span></p>

<p>（3）2个辅助符号：<span data-katex="),("></span></p>

<p><br/></p>

<p><strong>公式：（BNF）</strong></p>

<p><span data-katex="\alpha::=p|(\neg\alpha)|(\alpha_1\lor\alpha_2)|(\alpha_1\land\alpha_2)|(\alpha_1\to\alpha_2)|(\alpha_1\leftrightarrow\alpha_2)"></span></p>

<p><br/></p>

<p><strong>推导规则：</strong></p>

<p>（1）<span data-katex=""></span>包含律：<span data-katex="\frac{\alpha\in\Gamma}{\Gamma\vdash\alpha}"></span></p>

<p>（2）<span data-katex="\neg"></span>消去律：<span data-katex="\frac{\Gamma,\neg\alpha\vdash\beta;\Gamma,\neg\alpha\vdash\neg\beta}{\Gamma\vdash\alpha}"></span></p>

<p>（3）<span data-katex="\to"></span>消去律：<span data-katex="\frac{\Gamma\vdash(\alpha\to\beta);\Gamma\to\alpha}{\Gamma\vdash\beta}"></span></p>

<p>（4）<span data-katex="\to"></span>引入律：<span data-katex="\frac{\Gamma,\alpha\vdash\beta}{\Gamma\vdash\alpha\to\beta}"></span></p>

<p>（5）<span data-katex="\lor"></span>消去律：<span data-katex="\frac{\Gamma,\alpha\vdash\gamma;\Gamma,\beta\vdash\gamma}{\Gamma,\alpha\lor\beta\vdash\gamma}"></span></p>

<p>（6）<span data-katex="\lor"></span>引入律：<span data-katex="\frac{\Gamma\vdash\alpha}{\Gamma\vdash\alpha\lor\beta;\Gamma\vdash\beta\lor\alpha}"></span></p>

<p>（7）<span data-katex="\land"></span>消去律：<span data-katex="\frac{\Gamma\vdash\alpha\land\beta}{\Gamma\vdash\alpha;\Gamma\vdash\beta}"></span></p>

<p>（8）<span data-katex="\land"></span>引入律：<span data-katex="\frac{\Gamma\vdash\alpha;\Gamma\vdash\beta}{\Gamma\vdash\alpha\land\beta}"></span></p>

<p>（9）<span data-katex="\leftrightarrow"></span>消去律：<span data-katex="\frac{\Gamma\vdash\alpha\leftrightarrow\beta;\Gamma\vdash\alpha}{\Gamma\vdash\beta}"></span>，<span data-katex="\frac{\Gamma\vdash\alpha\leftrightarrow\beta;\Gamma\vdash\beta}{\Gamma\vdash\alpha}"></span></p>

<p>（10）<span data-katex="\leftrightarrow"></span>引入律：<span data-katex="\frac{\Gamma,\alpha\vdash\beta;\Gamma,\beta\vdash\alpha}{\Gamma\vdash\alpha\leftrightarrow\beta}"></span></p>

<p><br/></p>

<p><strong>例子：</strong></p>

<p>使用这些推理规则，我们就可以从一些合法的符号串，</p>

<p>推导出另一些合法的符号串了。</p>

<p><br/></p>

<p>（1）<span data-katex="\alpha\to\beta,\beta\to\gamma,\alpha\vdash\alpha\to\beta"></span>：<span data-katex=""></span>包含律</p>

<p>（2）<span data-katex="\alpha\to\beta,\beta\to\gamma,\alpha\vdash\alpha"></span>：<span data-katex=""></span>包含律</p>

<p>（3）<span data-katex="\alpha\to\beta,\beta\to\gamma,\alpha\vdash\beta"></span>：<span data-katex="\to"></span>消去律，式（1），式（2）</p>

<p>（4）<span data-katex="\alpha\to\beta,\beta\to\gamma,\alpha\vdash\beta\to\alpha"></span>：<span data-katex=""></span>包含律</p>

<p>（5）<span data-katex="\alpha\to\beta,\beta\to\gamma,\alpha\vdash\gamma"></span>：<span data-katex="\to"></span>消去律，式（3），式（4）</p>

<p>（6）<span data-katex="\alpha\to\beta,\beta\to\gamma,\alpha\vdash\alpha\to\gamma"></span>：<span data-katex="\to"></span>引入律，式（5）</p>

<p><br/></p>

<p>有了这些以后，我们就可以定义什么是一个<strong>证明</strong>了。</p>

<p><strong>证明序列：</strong></p>

<p>若有限序列，<span data-katex="\Gamma_1\vdash\alpha_1,\Gamma_2\vdash\alpha_2,\cdots ,\Gamma_n\vdash\alpha_n"></span>满足，</p>

<p>（1）<span data-katex="\Gamma_1,\Gamma_2,\cdots ,\Gamma_n"></span>为有限公式集</p>

<p>（2）<span data-katex="\alpha_1,\alpha_2,\cdots ,\alpha_n"></span>为公式</p>

<p>（3）每个<span data-katex="\Gamma_i\vdash\alpha_i(1\leq i\leq n)"></span>都是它之前若干个<span data-katex="\Gamma_j\vdash\alpha_j(1\leq j<i\leq n)"></span>应用某条推导规则得到的</p>

<p><br/></p>

<p>则称这个有限序列为<span data-katex="\Gamma_n\vdash\alpha_n"></span>的一个<strong>（形式）证明序列</strong>。</p>

<p>此时，也称<span data-katex="\alpha_n"></span>可由<span data-katex="\Gamma_n"></span><strong>（形式）证明</strong>，</p>

<p>记为<span data-katex="\Gamma_n\vdash_N\alpha_n"></span>，其中<span data-katex="N"></span>表示自然推理系统。</p>

<p><br/></p>

<h2><strong>逻辑推理</strong></h2>

<p>上文提到的是命题演算的自然推理系统，</p>

<p>这是一个形式系统，我们介绍了它的语法和推导规则，</p>

<p>根据这些推导规则，可以从一些合法的符号串推导出另一些，</p>

<p>在这个基础上，我们定义了什么叫做（形式）证明。</p>

<p><br/></p>

<p>如何<strong>解释</strong>这些符号呢？</p>

<p>它们有什么含义呢？</p>

<p><br/></p>

<p>我们给每一个合法的<strong>公式</strong>指定一个<strong>逻辑命题</strong>，作为这个公式的解释。</p>

<p>为每一个<strong>联接词符号</strong>指定一个<strong>真值函数</strong>，作为这个联接词符号的解释。</p>

<p><br/></p>

<p><strong>命题：</strong></p>

<p>命题是可以判断真假值的句子。</p>

<p><br/></p>

<p><strong>真值函数：</strong></p>

<p><span data-katex="\{0,1\}"></span>上的<span data-katex="n"></span>元函数，<span data-katex="f:\{0,1\}^n\to\{0,1\}"></span></p>

<p>称为一个<span data-katex="n"></span>元真值函数。</p>

<p><br/></p>

<p>我们将每个联接词与一个真值函数一一对应起来，</p>

<p>那么，复合命题的真假值就可以通过子命题的真假值计算出来了。</p>

<p><br/></p>

<p><strong>指派：</strong></p>

<p>设<span data-katex="\alpha"></span>为一个命题，<span data-katex="\alpha"></span>中出现的所有命题变元构成了一个序列<span data-katex="p_1,p_2,\cdots ,p_n"></span>，</p>

<p>对该序列指定的任一真假值序列<span data-katex="t_1,t_2,\cdots ,t_n"></span>称为<span data-katex="\alpha"></span>关于<span data-katex="p_1,p_2,\cdots ,p_n"></span>的一个<strong>指派</strong>，</p>

<p>其中<span data-katex="t_i=0,1"></span>。</p>

<p><br/></p>

<p><strong>真值表：</strong></p>

<p>命题在所有可能的指派下，所取值列成的表，称为真值表。</p>

<p><br/></p>

<p><strong>永真式：</strong></p>

<p>如果命题关于其中出现命题变元的所有指派均为真，则称该命题是一个永真式。</p>

<p><br/></p>

<p>有了这些以后，我们就可以定义<strong>推理</strong>了。</p>

<p>设<span data-katex="\alpha_1,\alpha_2,\cdots ,\alpha_n,\beta"></span>都是命题，</p>

<p>称<strong>推理『<span data-katex="\alpha_1,\alpha_2,\cdots ,\alpha_n"></span>推出<span data-katex="\beta"></span>』是有效的</strong>，</p>

<p>如果对<span data-katex="\alpha_1,\alpha_2,\cdots ,\alpha_n,\beta"></span>中出现的命题变元的任一指派，</p>

<p>若<span data-katex="\alpha_1,\alpha_2,\cdots ,\alpha_n"></span>都为真，则<span data-katex="\beta"></span>也为真，</p>

<p>记为<span data-katex="\alpha_1,\alpha_2,\cdots ,\alpha_n\models\beta"></span></p>

<p>否则，称推理『<span data-katex="\alpha_1,\alpha_2,\cdots ,\alpha_n"></span>推出<span data-katex="\beta"></span>』是无效的。</p>

<p><br/></p>

<p><strong>例子：</strong></p>

<p><span data-katex="\alpha\to\beta,\alpha\models\beta"></span></p>

<p><span data-katex="\alpha\lor\beta,\neg\alpha\models\beta"></span></p>

<p><br/></p>

<h2><strong>证明与推理之间的关系</strong></h2>

<p>命题演算的自然推理系统，有很多性质，其中，</p>

<p><br/></p>

<p><strong>可靠性</strong></p>

<p><span data-katex="\Gamma\vdash\alpha\Rightarrow\Gamma\models\alpha"></span></p>

<p><br/></p>

<p><strong>完备性</strong></p>

<p><span data-katex="\Gamma\models\alpha\Rightarrow\Gamma\vdash\alpha"></span></p>

<p><br/></p>

<p>它们表明，如果一个公式可以被证明，那么它所对应命题的推理就是有效的，</p>

<p>如果某些命题的推理是有效的，那么它就可以被证明。</p>

<p><br/></p>

<p>然而，形式化系统这种研究方法，并不是完美无缺的。</p>

<p><strong>哥德尔不完全性定理</strong></p>

<p>如果<span data-katex="\Gamma"></span>是一个有穷并包含初等算术<span data-katex="\Pi"></span>的形式理论，那么<span data-katex="\Gamma"></span>是一个不完全的形式理论。</p>

<p><br/></p>

<p><strong>哥德尔协调性定理</strong></p>

<p>如果形式理论<span data-katex="\Gamma"></span>包含初等算术<span data-katex="\Pi"></span>，那么<span data-katex="\Pi"></span>的协调性不能在<span data-katex="\Gamma"></span>中被证明。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>证明和推理也是可以研究的，</p>

<p>并且，一直以来都是人们的感兴趣的研究对象。</p>

<p><br/></p>

<p>逻辑学对自动定理证明，程序设计语言中的类型系统，</p>

<p>协议验证，软硬件的安全等领域，</p>

<p>有很重要的理论价值。</p>

<p><br/></p>

<p>以命题逻辑和一阶谓词逻辑为基础，</p>

<p>人们构造出了各式各样种类繁多的逻辑系统，</p>

<p>包括模态逻辑，直觉主义逻辑，时序逻辑，动态逻辑，</p>

<p>多值逻辑，模糊逻辑，非单调逻辑，λ演算，组合逻辑等等。</p>

<p><br/></p>

<p>现代逻辑学已经应用到了越来越多的学科之中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数理逻辑定义汇总]]></title>
    <link href="https://thzt.github.io/blog/2015/11/23/introduction-to-mathematical-logic/"/>
    <updated>2015-11-23T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2015/11/23/introduction-to-mathematical-logic</id>
    <content type="html"><![CDATA[<script src="https://thzt.github.io/thirdpart/jQuery/jquery-1.11.1.js"></script>


<p><link href="https://thzt.github.io/thirdpart/KaTeX/katex.min.css" rel="stylesheet"/></p>

<script src="https://thzt.github.io/thirdpart/KaTeX/katex.min.js"></script>


<script src="https://thzt.github.io/javascripts/katex.js"></script>


<p><strong>逻辑学</strong>真是博大精深，</p>

<p>first-order logic，propositional logic，predicate logic，</p>

<p>mathematical logic，second-order Logic，intuitionistic logic，</p>

<p>modal logic，free logic，plural logic&hellip;</p>

<p><br/></p>

<p>所涉及的内容也很广，</p>

<p>set theory，proof theory，model theory，recursion theory，</p>

<p>theory of computation，computability and decidability&hellip;</p>

<p><br/></p>

<p>学习它，对<strong>数学</strong>，<strong>计算机科学</strong>或其他学科都有指导意义。</p>

<p><br/></p>

<p>例如，哥德尔协调性定理指出了公理化方法的局限性，</p>

<p>它告诉我们，<strong>在理论上就不能通过逻辑推理解决所有的问题</strong>，</p>

<p>必要时，要通过构造模型来进行检验。</p>

<p>对软件进行测试，就是这样的一个例子。</p>

<p><br/></p>

<p>例如，<strong>类型系统</strong>，相当于加在程序语言语法层面上的(谓词)逻辑，</p>

<p>类型系统的<strong>可靠性</strong>保证了语法正确的程序，</p>

<p>语义上也是满足规范的。</p>

<p><br/></p>

<p>这样的例子还有很多，</p>

<p>实际工作中，只有<strong>见多识广</strong>，站在更高的角度，</p>

<p>才能做到庖丁解牛，<strong>游刃有余</strong>。</p>

<p><br/></p>

<p>到此，我们还是从一阶谓词逻辑开始，慢慢打好基础吧。</p>

<p>以下摘自《<a href="http://book.douban.com/subject/2364517/">数理逻辑</a>》——李未</p>

<p><br/></p>

<h2><strong>一阶语言的定义</strong></h2>

<p>每个一阶语言的字符集由两类符号集合组成。</p>

<p>一类称为逻辑符号集合，另一类称为非逻辑符号集合。</p>

<p><br/></p>

<p><strong>逻辑符号集合</strong>包括：</p>

<p><span data-katex="V"></span>：变元符号集合，<span data-katex="x_1, x_2, ..., x_n, ..."></span></p>

<p><span data-katex="C"></span>：逻辑连接词符号集合，<span data-katex="\neg , \wedge , \vee , \rightarrow , \leftrightarrow"></span></p>

<p><span data-katex="Q"></span>：量词符号集合，<span data-katex="\forall , \exists"></span></p>

<p><span data-katex="E"></span>：等词符号集合，<span data-katex="\doteq"></span></p>

<p><span data-katex="P"></span>：括号集合，<span data-katex="(, )"></span></p>

<p><br/></p>

<p><strong>非逻辑符号集合</strong>包括：</p>

<p><span data-katex="\mathscr{L}_c"></span>：常元符号集合，<span data-katex="c_1, c_2, ..."></span></p>

<p><span data-katex="\mathscr{L}_f"></span>：函数符号集合，<span data-katex="f_1, f_2, ..."></span></p>

<p><span data-katex="\mathscr{L}_P"></span>：谓词符号集合，<span data-katex="P_1, P_2, ..."></span></p>

<p><br/></p>

<p><strong>例子：</strong>初等算术语言<span data-katex="\mathscr{A}"></span></p>

<p>初等算术语言是一个一阶语言，</p>

<p>它的常元符号集为<span data-katex="\{0\}"></span>，</p>

<p>函数符号集为<span data-katex="\{S, +, \cdot \}"></span>，</p>

<p>谓词符号集合为<span data-katex="\{<\}"></span>。</p>

<p><br/></p>

<h2><strong>项</strong></h2>

<p>一阶语言<span data-katex="\mathscr{L}"></span>中的项被下述三个规则归纳的定义：</p>

<p><span data-katex="T_1"></span>：每一个常元是一个项</p>

<p><span data-katex="T_2"></span>：每一个变元是一个项</p>

<p><span data-katex="T_3"></span>：如果<span data-katex="t_1, ..., t_n"></span>是项，而f是一个n元函数符号，那么，<span data-katex="ft_1\cdot \cdot \cdot t_n"></span>是一个项</p>

<p><br/></p>

<p>此定义也可以表述成下述形式：</p>

<p><span data-katex="t ::= c | x | ft_1\cdot \cdot \cdot t_n"></span></p>

<p><br/></p>

<p><strong>例子：</strong><span data-katex="\mathscr{A}"></span>的项</p>

<p><span data-katex="S0, Sx_1, +S0SSx, \cdot x_1+Sx_1x_2"></span></p>

<p><br/></p>

<h2><strong>逻辑公式</strong></h2>

<p>语言<span data-katex="\mathscr{L}"></span>中的逻辑公式，简称<strong>公式</strong>，用大写字母<span data-katex="A, B, ..."></span>表示，并用下述五条规则归纳的定义：</p>

<p><br/></p>

<p><span data-katex="F_1"></span>：如果<span data-katex="t_1"></span>和<span data-katex="t_2"></span>为项，那么<span data-katex="t_1\doteq t_2"></span>是公式</p>

<p><span data-katex="F_2"></span>：如果<span data-katex="t_1, ..., t_n"></span>为项，而<span data-katex="R"></span>是一个n元谓词，那么<span data-katex="Rt_1\cdot \cdot \cdot t_n"></span>是公式</p>

<p><span data-katex="F_3"></span>：如果<span data-katex="A"></span>是公式，则<span data-katex="\neg A"></span>是公式</p>

<p><span data-katex="F_4"></span>：若<span data-katex="A, B"></span>是公式，则<span data-katex="A\wedge B, A\vee B, A\rightarrow B, A\leftrightarrow B"></span>都是公式</p>

<p><span data-katex="F_5"></span>：若<span data-katex="A"></span>是公式并且<span data-katex="x"></span>是一个变元，那么<span data-katex="\forall xA"></span>和<span data-katex="\exists xA"></span>也是公式，<span data-katex="x"></span>称为<strong>约束变元</strong></p>

<p><br/></p>

<p>上述结构归纳定义的Backus范式为：</p>

<p><span data-katex="A ::= t_1\doteq t_2 | Rt_1\cdot \cdot \cdot t_n | \neg A | A\wedge B | A\vee B | A\rightarrow B | A\leftrightarrow B | \forall xA | \exists xA"></span></p>

<p><br/></p>

<p><strong>例子：</strong><span data-katex="\mathscr{A}"></span>的公式</p>

<p><span data-katex="\forall x\neg (Sx\doteq 0), \forall x\forall y(< xy\rightarrow(\exists (y\doteq +xz)))"></span></p>

<p><br/></p>

<h2><strong><span data-katex="\mathscr{L}"></span>的结构</strong></h2>

<p>一阶语言<span data-katex="\mathscr{L}"></span>的<strong>结构</strong><span data-katex="M"></span>是一个偶对，记为<span data-katex="M=(\mathbb{M}, I)"></span>，其中，</p>

<p>（1）<span data-katex="\mathbb{M}"></span>是一个非空集合，称为<strong>论域</strong></p>

<p>（2）<span data-katex="I"></span>是从<span data-katex="\mathscr{L}"></span>到<span data-katex="\mathbb{M}"></span>的映射，称为<strong>解释</strong>，记为<span data-katex="I:\mathscr{L} \rightarrow \mathbb{M}"></span>，它满足下面三个条件</p>

<p>a) 对<span data-katex="\mathscr{L}"></span>中的每一个常元符号<span data-katex="c"></span>，<span data-katex="I(c)"></span>是<span data-katex="\mathbb{M}"></span>中的元素</p>

<p>b) 对<span data-katex="\mathscr{L}"></span>中的每一个n元函数符号<span data-katex="f"></span>，<span data-katex="I(f)"></span>是<span data-katex="\mathbb{M}"></span>上的n元函数</p>

<p>c) 对<span data-katex="\mathscr{L}"></span>中的每一个n元谓词符号<span data-katex="P"></span>，<span data-katex="I(P)"></span>是<span data-katex="\mathbb{M}"></span>上的一个n元关系</p>

<p><br/></p>

<p><strong>例子：</strong><span data-katex="\mathscr{A}"></span>的结构</p>

<p><span data-katex="\mathscr{A}"></span>的常元符号为<span data-katex="0"></span>，</p>

<p>函数符号有<span data-katex="\{S, +, \cdot \}"></span>，</p>

<p>谓词符号只有一个，它是<span data-katex="<"></span>。</p>

<p><br/></p>

<p>我们定义偶对<span data-katex="N=(\mathbb{N}, I)"></span>，其中论域<span data-katex="\mathbb{N}"></span>为自然数系。</p>

<p>令<span data-katex="s"></span>为<span data-katex="\mathbb{N}"></span>上的加1函数，即<span data-katex="s(x)=x+1"></span>，</p>

<p><span data-katex="+, \cdot"></span>代表<span data-katex="\mathbb{N}"></span>上的加法和乘法，</p>

<p><span data-katex="<"></span>为<span data-katex="\mathbb{N}"></span>上的小于关系。</p>

<p><br/></p>

<p>我们定义解释映射<span data-katex="I"></span>如下：</p>

<p><span data-katex="I(0)=0, I(S)=s, I(+)=+, I(\cdot )=\cdot , I(<)=<"></span></p>

<p><br/></p>

<p>解释映射<span data-katex="I"></span>将常元符号<span data-katex="0"></span>解释为自然数<span data-katex="0"></span>，</p>

<p>将一元函数符号<span data-katex="S"></span>解释为自然数集合上的加1运算<span data-katex="s"></span>，</p>

<p>将二元函数符号<span data-katex="+"></span>和<span data-katex="\cdot"></span>分别解释为自然数集合上的加法和乘法，</p>

<p>将二元谓词符号<span data-katex="<"></span>解释为自然数集合上的小于关系，</p>

<p>而<span data-katex="N"></span>是初等算术语言<span data-katex="\mathscr{A}"></span>的一个结构。</p>

<p><br/></p>

<h2><strong>赋值</strong></h2>

<p>赋值<span data-katex="\sigma"></span>是一个定义域为变元集合<span data-katex="V"></span>，值域为<span data-katex="\mathbb{M}"></span>的一个映射，记为<span data-katex="\sigma :V\rightarrow \mathbb{M}"></span>。</p>

<p>赋值<span data-katex="\sigma"></span>把<span data-katex="\mathscr{L}"></span>中的每一个变元<span data-katex="x"></span>，赋以论域<span data-katex="\mathbb{M}"></span>中的一个元素<span data-katex="a\in \mathbb{M}"></span>，</p>

<p>记为<span data-katex="\sigma (x)=a"></span>。</p>

<p><br/></p>

<h2><strong>模型</strong></h2>

<p>给定一阶语言<span data-katex="\mathscr{L}"></span>，以及它的结构<span data-katex="M"></span>和赋值<span data-katex="\sigma"></span>，</p>

<p>偶对<span data-katex="(M, \sigma )"></span>称为<span data-katex="\mathscr{L}"></span>的一个<strong>模型</strong>。</p>

<p><br/></p>

<h2><strong>项的语义</strong></h2>

<p>给定一阶语言<span data-katex="\mathscr{L}"></span>，结构<span data-katex="M=(\mathbb{M}, I)"></span>和赋值<span data-katex="\sigma :V\rightarrow \mathbb{M}"></span>。</p>

<p>在模型<span data-katex="(M, \sigma )"></span>下，项<span data-katex="t"></span>的语义是<span data-katex="\mathbb{M}"></span>中的一个元素，它用<span data-katex="t_{M[\sigma]}"></span>表示，并被归纳的定义：</p>

<p>（1）<span data-katex="x_{M[\sigma ]}=\sigma (x)"></span>，<span data-katex="x"></span>为变元符号</p>

<p>（2）<span data-katex="c_{M[\sigma ]}=c_M"></span>，<span data-katex="c"></span>为常元符号</p>

<p>（3）<span data-katex="(ft_1\cdot \cdot \cdot t_n)_{M[\sigma ]}=f_M((t_1)_{M[\sigma ]},\cdot \cdot \cdot (t_n)_{M[\sigma ]})"></span></p>

<p><br/></p>

<p><strong>例子：</strong><span data-katex="\mathscr{A}"></span>项的语义</p>

<p><span data-katex="(+x_1Sx_7)_{N[\sigma ]}=(x_1)_{N[\sigma ]}+(Sx_7)_{N[\sigma ]}=1+((x_7)_{N[\sigma ]}+1)=1+(7+1)=9"></span></p>

<p><br/></p>

<h2><strong>逻辑连接词符号的语义</strong></h2>

<p>为了避免逻辑连接词符号的多义性，我们把每一个逻辑连接词符号的语义都定义为一个真值函数，</p>

<p>此函数的定义域是一个真值集合或两个真值集合的笛卡尔积，而函数值是一个真假值。</p>

<p>对于一阶语言而言，逻辑连接词符号<span data-katex="\neg"></span>的真值函数为<span data-katex="B_\neg"></span>，</p>

<p>其自变量是<span data-katex="X"></span>，<span data-katex="X"></span>只能取<span data-katex="T"></span>和<span data-katex="F"></span>，</p>

<p>而函数值<span data-katex="B_\neg (X)"></span>由下述真值表定义：</p>

<p><span data-katex="B_\neg (T)=F, B_\neg (F)=T"></span></p>

<p><br/></p>

<p>二元函数<span data-katex="B_\wedge, B_\vee, B_\rightarrow, B_\leftrightarrow"></span>分别为逻辑连接词符号<span data-katex="\wedge, \vee, \rightarrow, \leftrightarrow"></span>的真值函数。</p>

<p><br/></p>

<h2><strong>公式的语义</strong></h2>

<p>设<span data-katex="M"></span>和<span data-katex="\sigma"></span>分别为一阶语言<span data-katex="\mathscr{L}"></span>的结构和赋值，而<span data-katex="A"></span>为<span data-katex="\mathscr{L}"></span>的公式。</p>

<p>公式<span data-katex="A"></span>在模型<span data-katex="(M, \sigma )"></span>下的语义是一个真假值，用<span data-katex="A_{M[\sigma ]}"></span>表示，被归纳的定义如下：</p>

<p>（1）<span data-katex="(Pt_1\cdot \cdot \cdot t_n)_{M[\sigma ]}=P_M((t_1)_{M[\sigma ]},\cdot \cdot \cdot ,(t_n)_{M[\sigma ]})"></span></p>

<p>（2）<span data-katex="(t_1\doteq t_2)_{M[\sigma ]}=\begin{cases}T,&\text{if }(t_1)_{M[\sigma ]}=(t_2)_{M[\sigma ]}\\F,&\text{otherwise}\end{cases}"></span></p>

<p>（3）<span data-katex="(\neg A)_{M[\sigma ]}=B_\neg (A_{M[\sigma ]})"></span></p>

<p>（4）<span data-katex="(A\vee B)_{M[\sigma ]}=B_\vee (A_{M[\sigma ]}, B_{M[\sigma ]})"></span></p>

<p>（5）<span data-katex="(A\wedge B)_{M[\sigma ]}=B_\wedge (A_{M[\sigma ]}, B_{M[\sigma ]})"></span></p>

<p>（6）<span data-katex="(A\rightarrow B)_{M[\sigma ]}=B_\rightarrow (A_{M[\sigma ]}, B_{M[\sigma ]})"></span></p>

<p>（7）<span data-katex="(A\leftrightarrow B)_{M[\sigma ]}=B_\leftrightarrow (A_{M[\sigma ]}, B_{M[\sigma ]})"></span></p>

<p>（8）<span data-katex="(\forall x_iA)_{M[\sigma ]}=\begin{cases}T,&\forall a\in M, A_{M[\sigma [x_i:=a]]}=T\\F,&\text{otherwise}\end{cases}"></span></p>

<p>（9）<span data-katex="(\exists x_iA)_{M[\sigma ]}=\begin{cases}T,&\exists a\in M, A_{M[\sigma [x_i:=a]]}=T\\F,&\text{otherwise}\end{cases}"></span></p>

<p><br/></p>

<h2><strong>可满足性</strong></h2>

<p>给定一阶语言<span data-katex="\mathscr{L}"></span>和它的公式<span data-katex="A"></span>以及公式集合<span data-katex="\Gamma"></span>。</p>

<p>如果存在模型<span data-katex="(M, \sigma )"></span>，使得<span data-katex="A_{M[\sigma ]}=T"></span>成立，</p>

<p>那么称公式<span data-katex="A"></span>关于模型<span data-katex="(M, \sigma )"></span>是<strong>可满足的</strong>，</p>

<p>简称<span data-katex="A"></span>可满足，也称为模型<span data-katex="(M, \sigma )"></span>满足<span data-katex="A"></span>，记为<span data-katex="M\models _\sigma A"></span>。</p>

<p>如果<span data-katex="A"></span>是一个语句，那么记为<span data-katex="A"></span>，记为<span data-katex="M\models A"></span></p>

<p><br/></p>

<p>如果<span data-katex="\Gamma"></span>中的每一个公式关于模型<span data-katex="(M, \sigma )"></span>都是可满足的，即，</p>

<p><span data-katex="M\models _\sigma A"></span>对于任意<span data-katex="A\in \Gamma"></span>成立，</p>

<p>那么称为公式集合<span data-katex="\Gamma"></span>关于模型<span data-katex="(M, \sigma )"></span>可满足，</p>

<p>简称公式集合<span data-katex="\Gamma"></span>可满足，</p>

<p>也称模型<span data-katex="(M, \sigma )"></span>满足公式集合<span data-katex="\Gamma"></span>，或<span data-katex="(M, \sigma )"></span>是<span data-katex="\Gamma"></span>的模型，记为<span data-katex="M\models _\sigma \Gamma"></span>。</p>

<p>如果<span data-katex="\Gamma"></span>是由语句组成的集合，那么记为<span data-katex="M\models \Gamma"></span>。</p>

<p><br/></p>

<h2><strong>永真性</strong></h2>

<p>称公式<span data-katex="A"></span>是<strong>永真的</strong>或有效的，如果<span data-katex="A"></span>对<span data-katex="\mathscr{L}"></span>的任意模型<span data-katex="(M, \sigma )"></span>均可满足，</p>

<p>即，对任意结构<span data-katex="M"></span>和赋值<span data-katex="\sigma"></span>，<span data-katex="M\models _\sigma A"></span>成立，记为<span data-katex="\models A"></span>。</p>

<p>称公式集合<span data-katex="\Gamma"></span>是永真的或有效的，如果<span data-katex="\Gamma"></span>中的每一个公式<span data-katex="A"></span>都是永真的，记为<span data-katex="\models \Gamma"></span></p>

<p>永真公式，也称为重言式，是与模型无关的公式，它们在任何模型下都为真。</p>

<p><br/></p>

<p><strong>例子：</strong>重言式</p>

<p><span data-katex="A\vee \neg A, \forall x(x\doteq x)"></span></p>

<p><br/></p>

<h2><strong>逻辑结论</strong></h2>

<p>设<span data-katex="A"></span>为公式，<span data-katex="\Gamma"></span>为公式集合，如果<span data-katex="M"></span>为任意结构，<span data-katex="\sigma"></span>为任意赋值，并且，</p>

<p>如果<span data-katex="M\models _\sigma \Gamma"></span>成立，则有<span data-katex="M\models _\sigma A"></span>成立，</p>

<p>那么称<span data-katex="A"></span>是<span data-katex="\Gamma"></span>的<strong>逻辑结论</strong>或语义结论，记为<span data-katex="\Gamma \models A"></span>，也称<span data-katex="\Gamma \models A"></span>有效。</p>

<p><br/></p>

<p><strong>注：</strong>符号<span data-katex="\models"></span>可以出现在4种不同类型的语义关系式中，它们是，</p>

<p><span data-katex="M\models _\sigma A, M\models A, \models A, \Gamma \models A"></span></p>

<p><span data-katex="\models"></span>在每种语义关系式中的含义不同，</p>

<p>区别这些关系式的简单办法是，</p>

<p>当<span data-katex="M"></span>和<span data-katex="\sigma"></span>同时出现时，表示此式仅对给定的<span data-katex="M"></span>和<span data-katex="\sigma"></span>成立，</p>

<p>当<span data-katex="\sigma"></span>不出现时，表示此式对任意<span data-katex="\sigma"></span>成立，</p>

<p>当<span data-katex="M"></span>及<span data-katex="\sigma"></span>均不出现时，表示此式对任意<span data-katex="M"></span>和任意<span data-katex="\sigma"></span>成立。</p>

<p><br/></p>

<p><span data-katex="\Gamma \models A"></span>也是一个语义关系式，它表示对任意<span data-katex="M"></span>和任意<span data-katex="\sigma"></span>，</p>

<p>如果<span data-katex="\Gamma"></span>为真，那么<span data-katex="A"></span>也为真。</p>

<p><br/></p>

<h2><strong>序贯</strong></h2>

<p>设<span data-katex="\Gamma ,\Delta"></span>为公式的有穷集合，<span data-katex="\Gamma \vdash \Delta"></span>称为<strong>序贯</strong>。</p>

<p><span data-katex="\Gamma"></span>称为序贯的前提，<span data-katex="\Delta"></span>称为序贯的结论。</p>

<p><br/></p>

<h2><strong>公理</strong></h2>

<p>设<span data-katex="\Gamma ,\Delta ,\Lambda ,\Theta"></span>为有穷公式集合，<span data-katex="A"></span>为公式，</p>

<p>则序贯<span data-katex="\Gamma ,A,\Delta \vdash \Lambda ,A,\Theta"></span>称为<strong>公理</strong>。</p>

<p><br/></p>

<p><strong>注：</strong>公理序贯之所以成立，是因为证明结论中至少有一个公式包含在公理序贯的前提之中。</p>

<p><br/></p>

<h2><strong>G推理系统</strong></h2>

<p>（1）<span data-katex="\neg"></span>规则</p>

<p><span data-katex="\neg -L:\frac{\Gamma ,\Delta \vdash A,\Lambda }{\Gamma ,\neg A,\Delta \vdash \Lambda}"></span></p>

<p><span data-katex="\neg -R:\frac{A,\Gamma \vdash \Lambda ,\Delta }{\Gamma \vdash \Lambda ,\neg A,\Delta }"></span></p>

<p>（2）<span data-katex="\vee"></span>规则</p>

<p><span data-katex="\vee -L:\frac{\Gamma ,A,\Delta \vdash \Lambda \quad \Gamma ,B,\Delta \vdash \Lambda }{\Gamma ,A\vee B,\Delta \vdash \Lambda }"></span></p>

<p><span data-katex="\vee -R:\frac{\Gamma \vdash \Lambda ,A,B,\Theta }{\Gamma \vdash \Lambda ,A\vee B,\Theta }"></span></p>

<p>（3）<span data-katex="\wedge"></span>规则</p>

<p><span data-katex="\wedge -L:\frac{\Gamma ,A,B,\Delta \vdash \Lambda }{\Gamma ,A\wedge B,\Delta \vdash \Lambda }"></span></p>

<p><span data-katex="\wedge -R:\frac{\Gamma \vdash \Lambda ,A,\Theta \quad \Gamma \vdash \Lambda ,B,\Theta }{\Gamma \vdash \Lambda ,A\wedge B,\Theta }"></span></p>

<p>（4）<span data-katex="\rightarrow"></span>规则</p>

<p><span data-katex="\rightarrow -L:\frac{\Gamma ,\Delta \vdash A,\Lambda \quad B,\Gamma ,\Delta \vdash \Lambda }{\Gamma ,A\rightarrow B,\Delta \vdash \Lambda }"></span></p>

<p><span data-katex="\rightarrow -R:\frac{A,\Gamma \vdash B,\Lambda ,\Theta }{\Gamma \vdash \Lambda ,A\rightarrow B,\Theta }"></span></p>

<p>（5）<span data-katex="\forall"></span>规则</p>

<p><span data-katex="\forall -L:\frac{\Gamma ,A[t/x],\forall xA(x),\Delta \vdash \Lambda }{\Gamma ,\forall xA(x),\Delta \vdash \Lambda }"></span></p>

<p><span data-katex="\forall -R:\frac{\Gamma \vdash \Lambda ,A[y/x],\Theta }{\Gamma \vdash \Lambda ,\forall xA(x),\Theta }"></span></p>

<p>（6）<span data-katex="\exists"></span>规则</p>

<p><span data-katex="\exists -L:\frac{\Gamma ,A[y/x],\Delta \vdash \Lambda }{\Gamma ,\exists xA(x),\Delta \vdash \Lambda }"></span></p>

<p><span data-katex="\exists -L:\frac{\Gamma ,A[y/x],\Delta \vdash \Lambda }{\Gamma ,\exists xA(x),\Delta \vdash \Lambda }"></span></p>

<p><br/></p>

<h2><strong>可靠性，紧致性，协调性，完全性</strong></h2>

<p><strong>可靠性</strong></p>

<p>如果序贯<span data-katex="\Gamma \vdash \Lambda"></span>可证，那么<span data-katex="\Gamma \models \Lambda"></span>成立。</p>

<p><br/></p>

<p><strong>紧致性</strong></p>

<p>如果<span data-katex="\Gamma"></span>是一个公式集合，<span data-katex="A"></span>是一个公式，并且序贯<span data-katex="\Gamma \vdash A"></span>可证，</p>

<p>那么必然存在有穷公式集合<span data-katex="\Delta"></span>，使得<span data-katex="\Delta \subseteq \Gamma"></span>并且<span data-katex="\Delta \vdash A"></span>可证。</p>

<p><br/></p>

<p><strong>协调性</strong></p>

<p>设<span data-katex="\Gamma"></span>为公式集合，如果不存在一个公式<span data-katex="A"></span>使得序贯<span data-katex="\Gamma \vdash A"></span>与<span data-katex="\Gamma \vdash \neg A"></span>均可证，</p>

<p>那么称<span data-katex="\Gamma"></span>是协调的。</p>

<p><br/></p>

<p><strong>完全性</strong></p>

<p>令<span data-katex="\Gamma"></span>为一个公式集合，<span data-katex="A"></span>为一个公式，</p>

<p>如果<span data-katex="\Gamma \models A"></span>成立，那么<span data-katex="\Gamma \vdash A"></span>可证。</p>

<p><br/></p>

<p><strong>定理：</strong>令<span data-katex="\Gamma"></span>为一个公式集合，<span data-katex="A"></span>为一个公式，</p>

<p>（1）<span data-katex="\Gamma \models A"></span>有效，当且仅当<span data-katex="\Gamma \vdash A"></span></p>

<p>（2）<span data-katex="\Gamma"></span>可满足，当且仅当<span data-katex="\Gamma"></span>协调</p>

<p><br/></p>

<h2><strong>形式理论</strong></h2>

<p>设<span data-katex="\Gamma"></span>是一阶语言<span data-katex="\mathscr{L}"></span>的有穷或可数无穷的语句集合，</p>

<p>如果<span data-katex="\Gamma"></span>协调，则称<span data-katex="\Gamma"></span>是一阶语言的形式理论，简称<strong>形式理论</strong>。</p>

<p>而称<span data-katex="\Gamma"></span>中的语句为<span data-katex="\Gamma"></span>的<strong>公理</strong>。</p>

<p><br/></p>

<p>如果<span data-katex="\Gamma"></span>是一个形式理论，</p>

<p>那么称语句集合，<span data-katex="Th(\Gamma )=\{A|A"></span>是<span data-katex="\mathscr{L}"></span>的语句，并且<span data-katex="\Gamma \vdash A"></span>可证<span data-katex="\}"></span>，</p>

<p>为<span data-katex="\Gamma"></span>的<strong>理论闭包</strong>。</p>

<p><br/></p>

<p>如果<span data-katex="\Gamma =\emptyset"></span>，那么，<span data-katex="Th(\emptyset )=\{A|A"></span>是<span data-katex="\mathscr{L}"></span>的语句，并且<span data-katex="\vdash A"></span>可证<span data-katex="\}"></span>，</p>

<p>是由全体重言式组成的集合。</p>

<p><br/></p>

<p>如果<span data-katex="M"></span>是<span data-katex="\mathscr{L}"></span>的模型，并且<span data-katex="M\models \Gamma"></span>，那么称<span data-katex="M"></span>是<span data-katex="\Gamma"></span>的模型。</p>

<p><br/></p>

<h2><strong>关于模型的形式理论</strong></h2>

<p>如果<span data-katex="M"></span>是一阶语言<span data-katex="\mathscr{L}"></span>的模型，那么称语句集合，</p>

<p><span data-katex="Th(M)=\{A|A"></span>是<span data-katex="\mathscr{L}"></span>的语句，并且<span data-katex="M\models A\}"></span></p>

<p>为<span data-katex="\mathscr{L}"></span>关于模型<span data-katex="M"></span>的形式理论。</p>

<p><br/></p>

<h2><strong>形式理论的完全性</strong></h2>

<p>称形式理论<span data-katex="\Gamma"></span>是完全的，如果对任意语句<span data-katex="A"></span>，</p>

<p><span data-katex="\Gamma \vdash A"></span>及<span data-katex="\Gamma \vdash \neg A"></span>中必有一个可证。</p>

<p><br/></p>

<h2><strong>函数的可表示性</strong></h2>

<p>设<span data-katex="f:\mathbb{N}^k\rightarrow \mathbb{N}"></span>是<span data-katex="\mathbb{N}"></span>上的<span data-katex="k"></span>元函数，</p>

<p>如果存在<span data-katex="\mathscr{A}"></span>公式<span data-katex="A(x_1,...,x_{k+1})"></span>，使得对任意自然数<span data-katex="n_1,...,n_{k+1}"></span>，</p>

<p>如果<span data-katex="f(n_1,...,n_k)=n_{k+1}"></span>，那么<span data-katex="\Pi \vdash A[S^{n_1}0,...,S^{n_{k+1}}0]"></span>可证</p>

<p>如果<span data-katex="f(n_1,...,n_k)\neq n_{k+1}"></span>，那么<span data-katex="\Pi \vdash \neg A[S^{n_1}0,...,S^{n_{k+1}}0]"></span>可证</p>

<p>在这种情况下，称函数<span data-katex="f"></span>在<span data-katex="\Pi"></span>中<strong>可表示</strong>，</p>

<p>并称公式<span data-katex="A(x_1,...,x_k,x_{k+1})"></span>是函数<span data-katex="f"></span>在<span data-katex="\Pi"></span>中的<strong>表示</strong>。</p>

<p><br/></p>

<p><strong>定理：</strong>如果<span data-katex="f:\mathbb{N}^k\rightarrow \mathbb{N}"></span>是<span data-katex="\mathbb{N}"></span>上的<span data-katex="k"></span>元可计算函数，</p>

<p>那么函数<span data-katex="f"></span>在<span data-katex="\Pi"></span>中可表示。</p>

<p><br/></p>

<h2><strong>关系的可表示性</strong></h2>

<p>设<span data-katex="r"></span>是<span data-katex="\mathbb{N}"></span>上的<span data-katex="k"></span>元关系，</p>

<p>如果存在<span data-katex="\mathscr{A}"></span>公式<span data-katex="A(x_1,...,x_{k+1})"></span>，使得对任意自然数<span data-katex="n_1,...,n_{k+1}"></span>，有</p>

<p>如果<span data-katex="r(n_1,...,n_k)=n_{k+1}"></span>，那么<span data-katex="\Pi \vdash A[S^{n_1}0,...,S^{n_{k+1}}0]"></span>可证</p>

<p>如果<span data-katex="r(n_1,...,n_k)\neq n_{k+1}"></span>，那么<span data-katex="\Pi \vdash \neg A[S^{n_1}0,...,S^{n_{k+1}}0]"></span>可证</p>

<p>在这种情况下，称关系<span data-katex="r"></span>在<span data-katex="\Pi"></span>中<strong>可表示</strong>，</p>

<p>并称公式<span data-katex="A(x_1,...,x_k,x_{k+1})"></span>在<span data-katex="\Pi"></span>中表示关系<span data-katex="r"></span>。</p>

<p><br/></p>

<p><strong>定理：</strong>如果<span data-katex="r:\mathbb{N}^k\rightarrow \mathbb{N}"></span>是<span data-katex="\mathbb{N}"></span>上的<span data-katex="k"></span>元可判定关系，</p>

<p>那么<span data-katex="r"></span>在<span data-katex="\Pi"></span>中可表示。</p>

<p><br/></p>

<h2><strong>哥德尔定理</strong></h2>

<p><strong>哥德尔不完全性定理</strong></p>

<p>如果<span data-katex="\Gamma"></span>是一个有穷并包含初等算术<span data-katex="\Pi"></span>的形式理论，</p>

<p>那么<span data-katex="\Gamma"></span>是一个不完全的形式理论。</p>

<p><br/></p>

<p><strong>哥德尔协调性定理</strong></p>

<p>如果形式理论<span data-katex="\Gamma"></span>包含初等算术<span data-katex="\Pi"></span>，</p>

<p>那么<span data-katex="\Pi"></span>的协调性不能在<span data-katex="\Gamma"></span>中被证明。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>以上，只是对谓词逻辑中用到的部分公式，进行了整理，</p>

<p>对建立<strong>用证明论和模型论的观点来理解公理系统</strong>，是很有帮助的。</p>

<p>然而，从更高的角度来看，有些观点很有可能就是<strong>错误</strong>的，</p>

<p>因此，此篇只是一个开始，督促我朝着更广阔的方向努力学习。</p>

<p><br/></p>

<p><strong>参考</strong></p>

<p><a href="http://book.douban.com/subject/2364517/">数理逻辑</a></p>

<p><a href="http://www.logicmatters.net/tyl/">Teach Yourself Logic 2015</a></p>

<p><a href="http://book.douban.com/subject/2878521/">logic and structure</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[模型观]]></title>
    <link href="https://thzt.github.io/blog/2015/06/24/model/"/>
    <updated>2015-06-24T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2015/06/24/model</id>
    <content type="html"><![CDATA[<p>Robert Sedgewick/Kevin Wayne的《算法》一书中，</p>

<p>强调了科学方法，</p>

<p><br/></p>

<p>细致的观察真实世界的特点。</p>

<p><strong>根据观察结果提出假设模型</strong>。</p>

<p>根据模型预测未来的事件。</p>

<p>继续观察并核实预测的准确性。</p>

<p>如此反复直到确认预测和观察一致。</p>

<p><br/></p>

<p>可是，</p>

<p>我们永远也没法知道某个假设是否<strong>永远正确</strong>，</p>

<p>我们只能验证它和我们的观察的一致性。</p>

<p><br/></p>

<p>爱因斯坦说，</p>

<p>再多的实验也不一定能够证明我是对的，</p>

<p>但只需要一个实验就能证明我是错的。</p>

<p><br/></p>

<p>科学方法可能大家都很清楚，</p>

<p>但是遇到具体问题，</p>

<p>人们却容易忽视它。</p>

<p><br/></p>

<p>实践是检验真理的唯一标准，</p>

<p>大胆假设，小心求证，</p>

<p>建立正确的<strong>模型观</strong>，</p>

<p>可以少走很多弯路。</p>

<p><br/></p>

<h2><strong>模型与目标系统</strong></h2>

<p>我们经常混淆<strong>模型</strong>与<strong>目标系统</strong>的区别，</p>

<p>把符号“1”，“2”，“3”,&hellip;</p>

<p>当做数学对象中的自然数本身。</p>

<p><br/></p>

<p>这只是用印刷符号对<strong>自然数</strong>进行建模，</p>

<p>实际上还有不同的模型，</p>

<p>除了阿拉伯数字，还有罗马数字，中国筹，等等，</p>

<p>甚至还有Church number。</p>

<p><br/></p>

<p>这个世界上<strong>并没有本质的道理</strong>，</p>

<p>因为，我们无法验证什么是绝对正确的。</p>

<p><br/></p>

<p>我们只能拿着模型来进行<strong>假设</strong>，</p>

<p>然后通过实验<strong>验证</strong>它的准确性。</p>

<p><br/></p>

<p>使用模型，我们可以从不同侧面，</p>

<p>对目标系统进行研究。</p>

<p><br/></p>

<h2><strong>模型的发展与多样性</strong></h2>

<p>对观察结果提出的模型，</p>

<p>是一直在发展的，</p>

<p>并没有哪一个是终极的。</p>

<p><br/></p>

<p>当我们问“<strong>到底是什么</strong>”的时候，</p>

<p><strong>其实是以静态的观点，分析动态发展中的事物</strong>。</p>

<p><br/></p>

<p>模型在不断修正和演进中，</p>

<p>对目标系统做出更精确的<strong>解释</strong>。</p>

<p><br/></p>

<p>例如，lambda calculus，</p>

<p>是一种计算模型，</p>

<p>一开始是无类型的，</p>

<p>但是同样也得不到类型系统的种种好处。</p>

<p><br/></p>

<p>因此lambda calculus就被扩展了，</p>

<p>变成了typed lambda calculus的一个<strong>特例</strong>。</p>

<p><br/></p>

<p>对计算建模的方法也并<strong>不唯一</strong>，</p>

<p>图灵机，combinatory logic，形式语言，等等，</p>

<p>都是和lambda calculus具有相同计算能力的模型。</p>

<p><br/></p>

<h2><strong>编程语言</strong></h2>

<p>编程语言是一种形式语言，</p>

<p>不同的编程语言，只是用不同的一堆<strong>符号</strong>，</p>

<p>按着不同的<strong>文法规则</strong>，</p>

<p>对计算进行建模。</p>

<p><br/></p>

<p>根据形式语言理论，</p>

<p>不受限文法，与图灵机等价。</p>

<p><br/></p>

<p>可以把不同的编程语言，</p>

<p>看做计算过程的多样化模型。</p>

<p><br/></p>

<p>同样，它们的建模方式也在演化，</p>

<p>语言的规范在发展。</p>

<p><br/></p>

<p>遇到具体问题，</p>

<p><strong>我们需要选择合适的编程语言</strong>。</p>

<p><br/></p>

<p>而编程范型，</p>

<p>是语义上的一种分类，</p>

<p>并没有明确的界线。</p>

<p><br/></p>

<p>我们也没必要成见太深，</p>

<p>强行把语言用在<strong>不适用</strong>的场景中。</p>

<p><br/></p>

<p>毕竟，语言是用来沟通和表达的。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>当我还是孩子的时候，</p>

<p>对大自然，就喜欢问“到底是什么”，</p>

<p>它指引我沿着科学之路越走越远。</p>

<p><br/></p>

<p>随着学习的深入，</p>

<p>让我开始懂得<strong>反思问题本身</strong>，</p>

<p>站在更高的角度。</p>

<p><br/></p>

<p>从模型角度来看，</p>

<p>物理学就是对大自然现实世界的建模，</p>

<p>耳熟能详的物理学理论，也只是<strong>可行的模型之一</strong>。</p>

<p><br/></p>

<p>例如：</p>

<p>牛顿的万有引力理论，</p>

<p>爱因斯坦的广义相对论，</p>

<p>都是引力理论。</p>

<p><br/></p>

<p>当然还有其他的引力理论，</p>

<p><strong>他们都是数学模型，用来解释目标系统</strong>，</p>

<p>并不是大自然本身。</p>

<p><br/></p>

<p>终极理论之梦，</p>

<p>可能会随着认识的提高，</p>

<p>不再成为问题了。</p>

<p><br/></p>

<p>就像“没有银弹”一样，</p>

<p><strong>任何领域都没有一劳永逸的事情</strong>。</p>
]]></content>
  </entry>
  
</feed>
