<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Logic | 何幻]]></title>
  <link href="https://thzt.github.io/blog/categories/logic/atom.xml" rel="self"/>
  <link href="https://thzt.github.io/"/>
  <updated>2016-01-29T14:53:47+08:00</updated>
  <id>https://thzt.github.io/</id>
  <author>
    <name><![CDATA[thzt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[真实在哪里]]></title>
    <link href="https://thzt.github.io/blog/2016/01/29/computer-science/"/>
    <updated>2016-01-29T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/01/29/computer-science</id>
    <content type="html"><![CDATA[<h2><strong>引子</strong></h2>

<p>以下，我总结了这些年对理想的追求，以及看的一些书，还有走的一些弯路，目的是为了把回忆保存起来，过几年再仔细品味。</p>

<p><br/></p>

<h2><strong>导火线</strong></h2>

<p>游客问毕加索：为什么你的画不像照片上的那么真实呢？毕加索说：你觉得照片上的，就是真实的你吗？</p>

<p>是啊，到底什么是真实的，什么是虚幻的？这句话是我初中时看到的，影响了我十几年，一直为我指引方向。</p>

<p><br/></p>

<h2><strong>学生时代</strong></h2>

<p>我找到了当时在国内很火的『第一推动系列』，《时间简史》《皇帝新脑》《黑洞与时间弯曲》。</p>

<p>当我认识到物理学是一门研究大自然的学科时，不顾父母发对，选择了冷门的大学专业。</p>

<p>与很多调剂过来的同学不同的是，我的收获简直是太大了，每一门课都认真的学着，并努力向这个『真实』的方向靠拢。</p>

<p>除了把基础物理学好之外，我又对编程产生了浓厚的兴趣，我依稀记得当时，通宵的编写VB，彻夜的学习汇编，仔细的理解C与C++。</p>

<p>终于到了毕业季，本来已经找到工作的我，由于社会的压力，父亲良言相劝，让我读研，至今我觉得这件事情非常正确。</p>

<p>当时有两个选择，跨专业考计算机或者继续学习物理，对物理学我还是比较执着，于是就选择了理论物理。并且，至今我也没有后悔这个决定。</p>

<p>研究生阶段，学的最多的其实是数学，数学基本功渐渐体现出来了。然而，当我了解到国内的科研现状后，我决定还是不要读博了。</p>

<p><br/></p>

<h2><strong>厚积而薄发</strong></h2>

<p>毕业后，我找了一个程序员的工作，不为什么，因为社会需要。能力再大也没用，社会稀缺才是重要的，这能保证我的生活一直很轻松。</p>

<p>既然选择了程序员的道路，我就决定好好研究一下编程，把基础打牢，同时不忘自己对『真实性』的追求。编程不就是写写代码吗？有什么基础可言？我不这么认为。</p>

<p>因为已经有了很多年的编程经验，一万小时定律已经不算什么了，这才让我能更清醒的做出选择。把基础再打牢一些，基础决定了最后的高度，欲速则不达。</p>

<p>我先是重新研读了《计算机程序的构造与解释》，这本圣经早有耳闻，但只是翻着看了看，我后悔一开始没有认真的阅读，否则可能就改写我当时的学习路线了。</p>

<p>这本书让我对Lisp语言产生了好感，于是，开始疯狂学习大法，『把市面上所有能找到的书都看一遍』。当然，这是不可能的，这不过是一种决心罢了。</p>

<p>不过在这之前，我面临了一个选择，Lisp两大方言中，到底是学Common Lisp还是Scheme？不错，当时Racket还没有这么火。</p>

<p>我快速做出了艰难的决定，选择大而全的Common Lisp，不为别的，就是因为他可能『更不必需』。</p>

<p>这一向是我的决策准则，在大方向上，总是选择『更不必需』的方案，广度优先。否则，如果不这么做，就可能一辈子都不会再接触它了，总是有更重要的事情等着我。</p>

<p>《ANSI Common Lisp》《Land of Lisp》《Pratical Common Lisp》《On Lisp》《Let Over Lambda》《Lisp语言（马希文）》《Lisp in small pieces》</p>

<p>好了，这些看完后，对Common Lisp有了一个基本的认识了，于是该学Scheme了吧，这个『更必需』一点，看吧，必需的东西早晚会去学的。</p>

<p>《R5RS》《The Litter Schemer》《The Scheme Promgramming Language》《Essentials of Programming Languages》《An Introduction to Scheme and its Implementation》</p>

<p>可以看到Scheme的书更学术一些，如果没有Common Lisp的基础，这里就比较费力了。</p>

<p>在读Scheme的过程中，发现了自己编译原理很弱，于是恶补了一下，不懂形式语言和编译原理，都不敢说自己学计算机的。</p>

<p>《编程语言实现模式》《程序设计语言·实践之路》《形式语言与自动机》《自动机理论，语言和计算导论》《编译原理》《编译器设计》</p>

<p>然后，又发现自己算法很弱，恶补了两本算法。不懂算法，都不敢做工程啊。《算法导论》《算法》《具体数学》</p>

<p>这些刷完之后，我马上发现了更基础的薄弱环节，那就是Lambda演算。Lisp是函数式语言的一种，一门很像Lambda演算的语言，究竟有什么渊源呢，还要看书。而且各种语言的实现也让我着迷，一起看了吧。</p>

<p>《Lambda-Calculus and Combinators, an Introduction》《Concept in Programming Languages》《Compiling Continuations》《Lecture notes on the Lambda Calculus》《数学·计算·逻辑（陆汝钤）》《哥德尔·爱舍尔·巴赫 集异璧之大成》</p>

<p>刷怪的途中，是不可能绕过Haskell的，身为函数式家族的一朵奇葩，必须得学，是该死磕一下的时候了。</p>

<p>《Learn you a Haskell for Great good》《Real world Haskell》《A History of Haskell》《Beginning Haskell》《Programming in Haskell》《Haskell函数式编程入门》《Parallel and Concurrent Programming in Haskell》《Haskell: The Craft of Functional Programming》</p>

<p>好吧，我承认，Lisp中遇到Continuation，Haskell中遇到Monad的时候，我真的跪了，只能硬着头皮看，谁叫我不知道别人也跪了呢。这其实也表明学习时最好不要看别人，自己学才能走的更远。</p>

<p><br/></p>

<h2><strong>放松一下</strong></h2>

<p>把这些放一放，容我先把其他主流语言刷一遍，压压惊。</p>

<p>《C与指针》《C专家编程》《程序员的自我修养》《Rust Essentials》《Realm of Racket》《Seven Concurrency Models in Seven Weeks》《Programming in Standard ML》《Learn you some Erlang for Great Good》《Scala编程》《C++模板元编程》</p>

<p>各种工业级的语言就不说了，语法过一下就行了，反正以后有的是机会学的，这些不是『更不必需』的。</p>

<p>过了一下，Go，Java，C#，PHP，Python，Ruby，JavaScript，Clojure，Swift，C++。</p>

<p><br/></p>

<h2><strong>数学与逻辑学交相呼应</strong></h2>

<p>好了，有了这些『基本功』之后，Monad让我们再来一战吧。那我必须先把类型理论搞一搞，这个始终是个没有填的坑。</p>

<p>《类型和程序设计语言》《Type Systems》《The Litter Prover》</p>

<p>然后，发现类型其实和逻辑学有一腿，难道我不得不跨界了吗，这可是一个大的方向，琢磨了大概几个小时，我决定先做『更不必需』的事情，那就是搞逻辑学。</p>

<p>《Teach yourself Logic 2015》《Logic and Structure》《数理逻辑》</p>

<p>其实，决定后发现并不是那么难，难的是决定不是决定后的行动。让我感到惊讶的是，逻辑学的很多结论都暗示着人们对『真实性』问题的探索，我有幸走到了这里。</p>

<p>以集合论，证明论，递归论，模型论为基础的逻辑学，完美的诠释了『真实性』问题。</p>

<p>感叹之余，就可以绕回来了，开始读范畴论吧，然而抽象代数又不可少。</p>

<p>《近世代数基础》《Categories for the Working Mathematician》</p>

<p>幸亏研究生阶段数学基础打的牢，群论，集合论，拓扑学，微分流形，都已经搞过，这里就容易多了。</p>

<p>然后，就是最近了，读了一本《Purely Functional Data Structure》，又读着《C++语言的设计和演化》。</p>

<p><br/></p>

<h2><strong>其他的</strong></h2>

<p>其实以上过程中，我巧妙的隐藏了作为一个软件工程师应该读的那部分书。</p>

<p>让我们来看看吧，软件工程是一个不小的领域，也是需要修炼的，幸亏工作需要，让我不得不学。</p>

<p>从哪开始呢，当然是设计模式了，不懂设计模式，怎么进行『面向对象』的编程呢？《大话设计模式》《设计模式之禅》《软件架构模式》</p>

<p>然后是代码质量，《测试驱动开发》《代码大全》《程序员修炼之道》《重构》《重构与模式》</p>

<p>软件开发方法论，《快速软件开发》《软件需求模式》《人月神话》《大教堂与市集》《没有银弹》《敏捷软件开发: 原则，模式与实践》</p>

<p>编程思想，《UNIX编程艺术》《代码之殇》《高效程序员的奥秘》《理解专业程序员》《软件随想录》《程序员的呐喊》《黑客与画家》《代码的未来》《图灵的秘密》《你的灯亮着吗》</p>

<p>然后新潮的东西也该玩玩吧，《大数据时代》《集体智慧编程》《统计学习方法》</p>

<p>有过Lisp的基础，Emacs应该是正常的选择了吧，《GNU Emacs Lisp Reference Manual》</p>

<p>还有很多没有看完的书，太难的太无聊的，或者印象不够深刻的书，没有提到，希望以后能够再有机会拿起来读一下。好吧，根本就没有这个机会了。</p>

<p>总结一下，Scheme和Haskell绝对是两个正确的切入点，越早接触越好。同时也会更早接触到领域内的大神，粉碎自尊与自傲，跪着含泪走完剩下的路。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>那么，言归正传，到底什么是真实呢？</p>

<p>目前我的理解是，科学方法就是目前最有效的真实性保障。</p>

<p>科学方法讲究从假设出发，约定一套推理规则，那么就可以推导出很多结论来了。</p>

<p>然而这些结论并不是现实世界本身，这些结论与现实世界之间的解释关系构成了一个模型。</p>

<p>我们看到，不同的公理和推理规则构成了不同的公理系统，连同对它们的解释又构成了不同的模型，公理系统解释的现实世界是它描述的语义。</p>

<p>怎样证明某个公理系统是『对』的呢？无法证明。我们只能证伪。而且，只需要找出一个反例即可。</p>

<p>这就是科学方法。以上是数学（集合论），逻辑学（一阶逻辑），哲学（科学哲学），自然科学（物理学），计算机科学（可计算性理论）的交汇点。</p>

<p>我庆幸之前我的所有选择，给了我这样的认识，我还会一直坚持下去，直到有更深入的理解。</p>

<p>我觉得一个人始终会走到自己想要去的地方的，不管经过哪种途径，沿途中我们所有积累都是有用的，不知道哪一天真的就用上了。</p>

<p>人们也不可能在一个阶段同时抓住两件东西，只能舍弃一个，没关系，舍弃说明你得到了更重要的那个，过后你完全可以再有机会得到失去的那个，只要你坚持自己的梦想。</p>

<p>相反，如果你拥有了失去的那个，你得到的这个就会被错过，人生本来就是不完美的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数理逻辑定义汇总]]></title>
    <link href="https://thzt.github.io/blog/2015/11/23/introduction-to-mathematical-logic/"/>
    <updated>2015-11-23T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2015/11/23/introduction-to-mathematical-logic</id>
    <content type="html"><![CDATA[<script src="https://thzt.github.io/thirdpart/jQuery/jquery-1.11.1.js"></script>


<p><link href="https://thzt.github.io/thirdpart/KaTeX/katex.min.css" rel="stylesheet"/></p>

<script src="https://thzt.github.io/thirdpart/KaTeX/katex.min.js"></script>


<script src="https://thzt.github.io/javascripts/katex.js"></script>


<p><strong>逻辑学</strong>真是博大精深，</p>

<p>first-order logic，propositional logic，predicate logic，</p>

<p>mathematical logic，second-order Logic，intuitionistic logic，</p>

<p>modal logic，free logic，plural logic&hellip;</p>

<p><br/></p>

<p>所涉及的内容也很广，</p>

<p>set theory，proof theory，model theory，recursion theory，</p>

<p>theory of computation，computability and decidability&hellip;</p>

<p><br/></p>

<p>学习它，对<strong>数学</strong>，<strong>计算机科学</strong>或其他学科都有指导意义。</p>

<p><br/></p>

<p>例如，哥德尔协调性定理指出了公理化方法的局限性，</p>

<p>它告诉我们，<strong>在理论上就不能通过逻辑推理解决所有的问题</strong>，</p>

<p>必要时，要通过构造模型来进行检验。</p>

<p>对软件进行测试，就是这样的一个例子。</p>

<p><br/></p>

<p>例如，<strong>类型系统</strong>，相当于加在程序语言语法层面上的(谓词)逻辑，</p>

<p>类型系统的<strong>可靠性</strong>保证了语法正确的程序，</p>

<p>语义上也是满足规范的。</p>

<p><br/></p>

<p>这样的例子还有很多，</p>

<p>实际工作中，只有<strong>见多识广</strong>，站在更高的角度，</p>

<p>才能做到庖丁解牛，<strong>游刃有余</strong>。</p>

<p><br/></p>

<p>到此，我们还是从一阶谓词逻辑开始，慢慢打好基础吧。</p>

<p>以下摘自《<a href="http://book.douban.com/subject/2364517/">数理逻辑</a>》——李未</p>

<p><br/></p>

<h2><strong>一阶语言的定义</strong></h2>

<p>每个一阶语言的字符集由两类符号集合组成。</p>

<p>一类称为逻辑符号集合，另一类称为非逻辑符号集合。</p>

<p><br/></p>

<p><strong>逻辑符号集合</strong>包括：</p>

<p><span data-katex="V"></span>：变元符号集合，<span data-katex="x_1, x_2, ..., x_n, ..."></span></p>

<p><span data-katex="C"></span>：逻辑连接词符号集合，<span data-katex="\neg , \wedge , \vee , \rightarrow , \leftrightarrow"></span></p>

<p><span data-katex="Q"></span>：量词符号集合，<span data-katex="\forall , \exists"></span></p>

<p><span data-katex="E"></span>：等词符号集合，<span data-katex="\doteq"></span></p>

<p><span data-katex="P"></span>：括号集合，<span data-katex="(, )"></span></p>

<p><br/></p>

<p><strong>非逻辑符号集合</strong>包括：</p>

<p><span data-katex="\mathscr{L}_c"></span>：常元符号集合，<span data-katex="c_1, c_2, ..."></span></p>

<p><span data-katex="\mathscr{L}_f"></span>：函数符号集合，<span data-katex="f_1, f_2, ..."></span></p>

<p><span data-katex="\mathscr{L}_P"></span>：谓词符号集合，<span data-katex="P_1, P_2, ..."></span></p>

<p><br/></p>

<p><strong>例子：</strong>初等算术语言<span data-katex="\mathscr{A}"></span></p>

<p>初等算术语言是一个一阶语言，</p>

<p>它的常元符号集为<span data-katex="\{0\}"></span>，</p>

<p>函数符号集为<span data-katex="\{S, +, \cdot \}"></span>，</p>

<p>谓词符号集合为<span data-katex="\{<\}"></span>。</p>

<p><br/></p>

<h2><strong>项</strong></h2>

<p>一阶语言<span data-katex="\mathscr{L}"></span>中的项被下述三个规则归纳的定义：</p>

<p><span data-katex="T_1"></span>：每一个常元是一个项</p>

<p><span data-katex="T_2"></span>：每一个变元是一个项</p>

<p><span data-katex="T_3"></span>：如果<span data-katex="t_1, ..., t_n"></span>是项，而f是一个n元函数符号，那么，<span data-katex="ft_1\cdot \cdot \cdot t_n"></span>是一个项</p>

<p><br/></p>

<p>此定义也可以表述成下述形式：</p>

<p><span data-katex="t ::= c | x | ft_1\cdot \cdot \cdot t_n"></span></p>

<p><br/></p>

<p><strong>例子：</strong><span data-katex="\mathscr{A}"></span>的项</p>

<p><span data-katex="S0, Sx_1, +S0SSx, \cdot x_1+Sx_1x_2"></span></p>

<p><br/></p>

<h2><strong>逻辑公式</strong></h2>

<p>语言<span data-katex="\mathscr{L}"></span>中的逻辑公式，简称<strong>公式</strong>，用大写字母<span data-katex="A, B, ..."></span>表示，并用下述五条规则归纳的定义：</p>

<p><br/></p>

<p><span data-katex="F_1"></span>：如果<span data-katex="t_1"></span>和<span data-katex="t_2"></span>为项，那么<span data-katex="t_1\doteq t_2"></span>是公式</p>

<p><span data-katex="F_2"></span>：如果<span data-katex="t_1, ..., t_n"></span>为项，而<span data-katex="R"></span>是一个n元谓词，那么<span data-katex="Rt_1\cdot \cdot \cdot t_n"></span>是公式</p>

<p><span data-katex="F_3"></span>：如果<span data-katex="A"></span>是公式，则<span data-katex="\neg A"></span>是公式</p>

<p><span data-katex="F_4"></span>：若<span data-katex="A, B"></span>是公式，则<span data-katex="A\wedge B, A\vee B, A\rightarrow B, A\leftrightarrow B"></span>都是公式</p>

<p><span data-katex="F_5"></span>：若<span data-katex="A"></span>是公式并且<span data-katex="x"></span>是一个变元，那么<span data-katex="\forall xA"></span>和<span data-katex="\exists xA"></span>也是公式，<span data-katex="x"></span>称为<strong>约束变元</strong></p>

<p><br/></p>

<p>上述结构归纳定义的Backus范式为：</p>

<p><span data-katex="A ::= t_1\doteq t_2 | Rt_1\cdot \cdot \cdot t_n | \neg A | A\wedge B | A\vee B | A\rightarrow B | A\leftrightarrow B | \forall xA | \exists xA"></span></p>

<p><br/></p>

<p><strong>例子：</strong><span data-katex="\mathscr{A}"></span>的公式</p>

<p><span data-katex="\forall x\neg (Sx\doteq 0), \forall x\forall y(< xy\rightarrow(\exists (y\doteq +xz)))"></span></p>

<p><br/></p>

<h2><strong><span data-katex="\mathscr{L}"></span>的结构</strong></h2>

<p>一阶语言<span data-katex="\mathscr{L}"></span>的<strong>结构</strong><span data-katex="M"></span>是一个偶对，记为<span data-katex="M=(\mathbb{M}, I)"></span>，其中，</p>

<p>（1）<span data-katex="\mathbb{M}"></span>是一个非空集合，称为<strong>论域</strong></p>

<p>（2）<span data-katex="I"></span>是从<span data-katex="\mathscr{L}"></span>到<span data-katex="\mathbb{M}"></span>的映射，称为<strong>解释</strong>，记为<span data-katex="I:\mathscr{L} \rightarrow \mathbb{M}"></span>，它满足下面三个条件</p>

<p>a) 对<span data-katex="\mathscr{L}"></span>中的每一个常元符号<span data-katex="c"></span>，<span data-katex="I(c)"></span>是<span data-katex="\mathbb{M}"></span>中的元素</p>

<p>b) 对<span data-katex="\mathscr{L}"></span>中的每一个n元函数符号<span data-katex="f"></span>，<span data-katex="I(f)"></span>是<span data-katex="\mathbb{M}"></span>上的n元函数</p>

<p>c) 对<span data-katex="\mathscr{L}"></span>中的每一个n元谓词符号<span data-katex="P"></span>，<span data-katex="I(P)"></span>是<span data-katex="\mathbb{M}"></span>上的一个n元关系</p>

<p><br/></p>

<p><strong>例子：</strong><span data-katex="\mathscr{A}"></span>的结构</p>

<p><span data-katex="\mathscr{A}"></span>的常元符号为<span data-katex="0"></span>，</p>

<p>函数符号有<span data-katex="\{S, +, \cdot \}"></span>，</p>

<p>谓词符号只有一个，它是<span data-katex="<"></span>。</p>

<p><br/></p>

<p>我们定义偶对<span data-katex="N=(\mathbb{N}, I)"></span>，其中论域<span data-katex="\mathbb{N}"></span>为自然数系。</p>

<p>令<span data-katex="s"></span>为<span data-katex="\mathbb{N}"></span>上的加1函数，即<span data-katex="s(x)=x+1"></span>，</p>

<p><span data-katex="+, \cdot"></span>代表<span data-katex="\mathbb{N}"></span>上的加法和乘法，</p>

<p><span data-katex="<"></span>为<span data-katex="\mathbb{N}"></span>上的小于关系。</p>

<p><br/></p>

<p>我们定义解释映射<span data-katex="I"></span>如下：</p>

<p><span data-katex="I(0)=0, I(S)=s, I(+)=+, I(\cdot )=\cdot , I(<)=<"></span></p>

<p><br/></p>

<p>解释映射<span data-katex="I"></span>将常元符号<span data-katex="0"></span>解释为自然数<span data-katex="0"></span>，</p>

<p>将一元函数符号<span data-katex="S"></span>解释为自然数集合上的加1运算<span data-katex="s"></span>，</p>

<p>将二元函数符号<span data-katex="+"></span>和<span data-katex="\cdot"></span>分别解释为自然数集合上的加法和乘法，</p>

<p>将二元谓词符号<span data-katex="<"></span>解释为自然数集合上的小于关系，</p>

<p>而<span data-katex="N"></span>是初等算术语言<span data-katex="\mathscr{A}"></span>的一个结构。</p>

<p><br/></p>

<h2><strong>赋值</strong></h2>

<p>赋值<span data-katex="\sigma"></span>是一个定义域为变元集合<span data-katex="V"></span>，值域为<span data-katex="\mathbb{M}"></span>的一个映射，记为<span data-katex="\sigma :V\rightarrow \mathbb{M}"></span>。</p>

<p>赋值<span data-katex="\sigma"></span>把<span data-katex="\mathscr{L}"></span>中的每一个变元<span data-katex="x"></span>，赋以论域<span data-katex="\mathbb{M}"></span>中的一个元素<span data-katex="a\in \mathbb{M}"></span>，</p>

<p>记为<span data-katex="\sigma (x)=a"></span>。</p>

<p><br/></p>

<h2><strong>模型</strong></h2>

<p>给定一阶语言<span data-katex="\mathscr{L}"></span>，以及它的结构<span data-katex="M"></span>和赋值<span data-katex="\sigma"></span>，</p>

<p>偶对<span data-katex="(M, \sigma )"></span>称为<span data-katex="\mathscr{L}"></span>的一个<strong>模型</strong>。</p>

<p><br/></p>

<h2><strong>项的语义</strong></h2>

<p>给定一阶语言<span data-katex="\mathscr{L}"></span>，结构<span data-katex="M=(\mathbb{M}, I)"></span>和赋值<span data-katex="\sigma :V\rightarrow \mathbb{M}"></span>。</p>

<p>在模型<span data-katex="(M, \sigma )"></span>下，项<span data-katex="t"></span>的语义是<span data-katex="\mathbb{M}"></span>中的一个元素，它用<span data-katex="t_{M[\sigma]}"></span>表示，并被归纳的定义：</p>

<p>（1）<span data-katex="x_{M[\sigma ]}=\sigma (x)"></span>，<span data-katex="x"></span>为变元符号</p>

<p>（2）<span data-katex="c_{M[\sigma ]}=c_M"></span>，<span data-katex="c"></span>为常元符号</p>

<p>（3）<span data-katex="(ft_1\cdot \cdot \cdot t_n)_{M[\sigma ]}=f_M((t_1)_{M[\sigma ]},\cdot \cdot \cdot (t_n)_{M[\sigma ]})"></span></p>

<p><br/></p>

<p><strong>例子：</strong><span data-katex="\mathscr{A}"></span>项的语义</p>

<p><span data-katex="(+x_1Sx_7)_{N[\sigma ]}=(x_1)_{N[\sigma ]}+(Sx_7)_{N[\sigma ]}=1+((x_7)_{N[\sigma ]}+1)=1+(7+1)=9"></span></p>

<p><br/></p>

<h2><strong>逻辑连接词符号的语义</strong></h2>

<p>为了避免逻辑连接词符号的多义性，我们把每一个逻辑连接词符号的语义都定义为一个真值函数，</p>

<p>此函数的定义域是一个真值集合或两个真值集合的笛卡尔积，而函数值是一个真假值。</p>

<p>对于一阶语言而言，逻辑连接词符号<span data-katex="\neg"></span>的真值函数为<span data-katex="B_\neg"></span>，</p>

<p>其自变量是<span data-katex="X"></span>，<span data-katex="X"></span>只能取<span data-katex="T"></span>和<span data-katex="F"></span>，</p>

<p>而函数值<span data-katex="B_\neg (X)"></span>由下述真值表定义：</p>

<p><span data-katex="B_\neg (T)=F, B_\neg (F)=T"></span></p>

<p><br/></p>

<p>二元函数<span data-katex="B_\wedge, B_\vee, B_\rightarrow, B_\leftrightarrow"></span>分别为逻辑连接词符号<span data-katex="\wedge, \vee, \rightarrow, \leftrightarrow"></span>的真值函数。</p>

<p><br/></p>

<h2><strong>公式的语义</strong></h2>

<p>设<span data-katex="M"></span>和<span data-katex="\sigma"></span>分别为一阶语言<span data-katex="\mathscr{L}"></span>的结构和赋值，而<span data-katex="A"></span>为<span data-katex="\mathscr{L}"></span>的公式。</p>

<p>公式<span data-katex="A"></span>在模型<span data-katex="(M, \sigma )"></span>下的语义是一个真假值，用<span data-katex="A_{M[\sigma ]}"></span>表示，被归纳的定义如下：</p>

<p>（1）<span data-katex="(Pt_1\cdot \cdot \cdot t_n)_{M[\sigma ]}=P_M((t_1)_{M[\sigma ]},\cdot \cdot \cdot ,(t_n)_{M[\sigma ]})"></span></p>

<p>（2）<span data-katex="(t_1\doteq t_2)_{M[\sigma ]}=\begin{cases}T,&\text{if }(t_1)_{M[\sigma ]}=(t_2)_{M[\sigma ]}\\F,&\text{otherwise}\end{cases}"></span></p>

<p>（3）<span data-katex="(\neg A)_{M[\sigma ]}=B_\neg (A_{M[\sigma ]})"></span></p>

<p>（4）<span data-katex="(A\vee B)_{M[\sigma ]}=B_\vee (A_{M[\sigma ]}, B_{M[\sigma ]})"></span></p>

<p>（5）<span data-katex="(A\wedge B)_{M[\sigma ]}=B_\wedge (A_{M[\sigma ]}, B_{M[\sigma ]})"></span></p>

<p>（6）<span data-katex="(A\rightarrow B)_{M[\sigma ]}=B_\rightarrow (A_{M[\sigma ]}, B_{M[\sigma ]})"></span></p>

<p>（7）<span data-katex="(A\leftrightarrow B)_{M[\sigma ]}=B_\leftrightarrow (A_{M[\sigma ]}, B_{M[\sigma ]})"></span></p>

<p>（8）<span data-katex="(\forall x_iA)_{M[\sigma ]}=\begin{cases}T,&\forall a\in M, A_{M[\sigma [x_i:=a]]}=T\\F,&\text{otherwise}\end{cases}"></span></p>

<p>（9）<span data-katex="(\exists x_iA)_{M[\sigma ]}=\begin{cases}T,&\exists a\in M, A_{M[\sigma [x_i:=a]]}=T\\F,&\text{otherwise}\end{cases}"></span></p>

<p><br/></p>

<h2><strong>可满足性</strong></h2>

<p>给定一阶语言<span data-katex="\mathscr{L}"></span>和它的公式<span data-katex="A"></span>以及公式集合<span data-katex="\Gamma"></span>。</p>

<p>如果存在模型<span data-katex="(M, \sigma )"></span>，使得<span data-katex="A_{M[\sigma ]}=T"></span>成立，</p>

<p>那么称公式<span data-katex="A"></span>关于模型<span data-katex="(M, \sigma )"></span>是<strong>可满足的</strong>，</p>

<p>简称<span data-katex="A"></span>可满足，也称为模型<span data-katex="(M, \sigma )"></span>满足<span data-katex="A"></span>，记为<span data-katex="M\models _\sigma A"></span>。</p>

<p>如果<span data-katex="A"></span>是一个语句，那么记为<span data-katex="A"></span>，记为<span data-katex="M\models A"></span></p>

<p><br/></p>

<p>如果<span data-katex="\Gamma"></span>中的每一个公式关于模型<span data-katex="(M, \sigma )"></span>都是可满足的，即，</p>

<p><span data-katex="M\models _\sigma A"></span>对于任意<span data-katex="A\in \Gamma"></span>成立，</p>

<p>那么称为公式集合<span data-katex="\Gamma"></span>关于模型<span data-katex="(M, \sigma )"></span>可满足，</p>

<p>简称公式集合<span data-katex="\Gamma"></span>可满足，</p>

<p>也称模型<span data-katex="(M, \sigma )"></span>满足公式集合<span data-katex="\Gamma"></span>，或<span data-katex="(M, \sigma )"></span>是<span data-katex="\Gamma"></span>的模型，记为<span data-katex="M\models _\sigma \Gamma"></span>。</p>

<p>如果<span data-katex="\Gamma"></span>是由语句组成的集合，那么记为<span data-katex="M\models \Gamma"></span>。</p>

<p><br/></p>

<h2><strong>永真性</strong></h2>

<p>称公式<span data-katex="A"></span>是<strong>永真的</strong>或有效的，如果<span data-katex="A"></span>对<span data-katex="\mathscr{L}"></span>的任意模型<span data-katex="(M, \sigma )"></span>均可满足，</p>

<p>即，对任意结构<span data-katex="M"></span>和赋值<span data-katex="\sigma"></span>，<span data-katex="M\models _\sigma A"></span>成立，记为<span data-katex="\models A"></span>。</p>

<p>称公式集合<span data-katex="\Gamma"></span>是永真的或有效的，如果<span data-katex="\Gamma"></span>中的每一个公式<span data-katex="A"></span>都是永真的，记为<span data-katex="\models \Gamma"></span></p>

<p>永真公式，也称为重言式，是与模型无关的公式，它们在任何模型下都为真。</p>

<p><br/></p>

<p><strong>例子：</strong>重言式</p>

<p><span data-katex="A\vee \neg A, \forall x(x\doteq x)"></span></p>

<p><br/></p>

<h2><strong>逻辑结论</strong></h2>

<p>设<span data-katex="A"></span>为公式，<span data-katex="\Gamma"></span>为公式集合，如果<span data-katex="M"></span>为任意结构，<span data-katex="\sigma"></span>为任意赋值，并且，</p>

<p>如果<span data-katex="M\models _\sigma \Gamma"></span>成立，则有<span data-katex="M\models _\sigma A"></span>成立，</p>

<p>那么称<span data-katex="A"></span>是<span data-katex="\Gamma"></span>的<strong>逻辑结论</strong>或语义结论，记为<span data-katex="\Gamma \models A"></span>，也称<span data-katex="\Gamma \models A"></span>有效。</p>

<p><br/></p>

<p><strong>注：</strong>符号<span data-katex="\models"></span>可以出现在4种不同类型的语义关系式中，它们是，</p>

<p><span data-katex="M\models _\sigma A, M\models A, \models A, \Gamma \models A"></span></p>

<p><span data-katex="\models"></span>在每种语义关系式中的含义不同，</p>

<p>区别这些关系式的简单办法是，</p>

<p>当<span data-katex="M"></span>和<span data-katex="\sigma"></span>同时出现时，表示此式仅对给定的<span data-katex="M"></span>和<span data-katex="\sigma"></span>成立，</p>

<p>当<span data-katex="\sigma"></span>不出现时，表示此式对任意<span data-katex="\sigma"></span>成立，</p>

<p>当<span data-katex="M"></span>及<span data-katex="\sigma"></span>均不出现时，表示此式对任意<span data-katex="M"></span>和任意<span data-katex="\sigma"></span>成立。</p>

<p><br/></p>

<p><span data-katex="\Gamma \models A"></span>也是一个语义关系式，它表示对任意<span data-katex="M"></span>和任意<span data-katex="\sigma"></span>，</p>

<p>如果<span data-katex="\Gamma"></span>为真，那么<span data-katex="A"></span>也为真。</p>

<p><br/></p>

<h2><strong>序贯</strong></h2>

<p>设<span data-katex="\Gamma ,\Delta"></span>为公式的有穷集合，<span data-katex="\Gamma \vdash \Delta"></span>称为<strong>序贯</strong>。</p>

<p><span data-katex="\Gamma"></span>称为序贯的前提，<span data-katex="\Delta"></span>称为序贯的结论。</p>

<p><br/></p>

<h2><strong>公理</strong></h2>

<p>设<span data-katex="\Gamma ,\Delta ,\Lambda ,\Theta"></span>为有穷公式集合，<span data-katex="A"></span>为公式，</p>

<p>则序贯<span data-katex="\Gamma ,A,\Delta \vdash \Lambda ,A,\Theta"></span>称为<strong>公理</strong>。</p>

<p><br/></p>

<p><strong>注：</strong>公理序贯之所以成立，是因为证明结论中至少有一个公式包含在公理序贯的前提之中。</p>

<p><br/></p>

<h2><strong>G推理系统</strong></h2>

<p>（1）<span data-katex="\neg"></span>规则</p>

<p><span data-katex="\neg -L:\frac{\Gamma ,\Delta \vdash A,\Lambda }{\Gamma ,\neg A,\Delta \vdash \Lambda}"></span></p>

<p><span data-katex="\neg -R:\frac{A,\Gamma \vdash \Lambda ,\Delta }{\Gamma \vdash \Lambda ,\neg A,\Delta }"></span></p>

<p>（2）<span data-katex="\vee"></span>规则</p>

<p><span data-katex="\vee -L:\frac{\Gamma ,A,\Delta \vdash \Lambda \quad \Gamma ,B,\Delta \vdash \Lambda }{\Gamma ,A\vee B,\Delta \vdash \Lambda }"></span></p>

<p><span data-katex="\vee -R:\frac{\Gamma \vdash \Lambda ,A,B,\Theta }{\Gamma \vdash \Lambda ,A\vee B,\Theta }"></span></p>

<p>（3）<span data-katex="\wedge"></span>规则</p>

<p><span data-katex="\wedge -L:\frac{\Gamma ,A,B,\Delta \vdash \Lambda }{\Gamma ,A\wedge B,\Delta \vdash \Lambda }"></span></p>

<p><span data-katex="\wedge -R:\frac{\Gamma \vdash \Lambda ,A,\Theta \quad \Gamma \vdash \Lambda ,B,\Theta }{\Gamma \vdash \Lambda ,A\wedge B,\Theta }"></span></p>

<p>（4）<span data-katex="\rightarrow"></span>规则</p>

<p><span data-katex="\rightarrow -L:\frac{\Gamma ,\Delta \vdash A,\Lambda \quad B,\Gamma ,\Delta \vdash \Lambda }{\Gamma ,A\rightarrow B,\Delta \vdash \Lambda }"></span></p>

<p><span data-katex="\rightarrow -R:\frac{A,\Gamma \vdash B,\Lambda ,\Theta }{\Gamma \vdash \Lambda ,A\rightarrow B,\Theta }"></span></p>

<p>（5）<span data-katex="\forall"></span>规则</p>

<p><span data-katex="\forall -L:\frac{\Gamma ,A[t/x],\forall xA(x),\Delta \vdash \Lambda }{\Gamma ,\forall xA(x),\Delta \vdash \Lambda }"></span></p>

<p><span data-katex="\forall -R:\frac{\Gamma \vdash \Lambda ,A[y/x],\Theta }{\Gamma \vdash \Lambda ,\forall xA(x),\Theta }"></span></p>

<p>（6）<span data-katex="\exists"></span>规则</p>

<p><span data-katex="\exists -L:\frac{\Gamma ,A[y/x],\Delta \vdash \Lambda }{\Gamma ,\exists xA(x),\Delta \vdash \Lambda }"></span></p>

<p><span data-katex="\exists -L:\frac{\Gamma ,A[y/x],\Delta \vdash \Lambda }{\Gamma ,\exists xA(x),\Delta \vdash \Lambda }"></span></p>

<p><br/></p>

<h2><strong>可靠性，紧致性，协调性，完全性</strong></h2>

<p><strong>可靠性</strong></p>

<p>如果序贯<span data-katex="\Gamma \vdash \Lambda"></span>可证，那么<span data-katex="\Gamma \models \Lambda"></span>成立。</p>

<p><br/></p>

<p><strong>紧致性</strong></p>

<p>如果<span data-katex="\Gamma"></span>是一个公式集合，<span data-katex="A"></span>是一个公式，并且序贯<span data-katex="\Gamma \vdash A"></span>可证，</p>

<p>那么必然存在有穷公式集合<span data-katex="\Delta"></span>，使得<span data-katex="\Delta \subseteq \Gamma"></span>并且<span data-katex="\Delta \vdash A"></span>可证。</p>

<p><br/></p>

<p><strong>协调性</strong></p>

<p>设<span data-katex="\Gamma"></span>为公式集合，如果不存在一个公式<span data-katex="A"></span>使得序贯<span data-katex="\Gamma \vdash A"></span>与<span data-katex="\Gamma \vdash \neg A"></span>均可证，</p>

<p>那么称<span data-katex="\Gamma"></span>是协调的。</p>

<p><br/></p>

<p><strong>完全性</strong></p>

<p>令<span data-katex="\Gamma"></span>为一个公式集合，<span data-katex="A"></span>为一个公式，</p>

<p>如果<span data-katex="\Gamma \models A"></span>成立，那么<span data-katex="\Gamma \vdash A"></span>可证。</p>

<p><br/></p>

<p><strong>定理：</strong>令<span data-katex="\Gamma"></span>为一个公式集合，<span data-katex="A"></span>为一个公式，</p>

<p>（1）<span data-katex="\Gamma \models A"></span>有效，当且仅当<span data-katex="\Gamma \vdash A"></span></p>

<p>（2）<span data-katex="\Gamma"></span>可满足，当且仅当<span data-katex="\Gamma"></span>协调</p>

<p><br/></p>

<h2><strong>形式理论</strong></h2>

<p>设<span data-katex="\Gamma"></span>是一阶语言<span data-katex="\mathscr{L}"></span>的有穷或可数无穷的语句集合，</p>

<p>如果<span data-katex="\Gamma"></span>协调，则称<span data-katex="\Gamma"></span>是一阶语言的形式理论，简称<strong>形式理论</strong>。</p>

<p>而称<span data-katex="\Gamma"></span>中的语句为<span data-katex="\Gamma"></span>的<strong>公理</strong>。</p>

<p><br/></p>

<p>如果<span data-katex="\Gamma"></span>是一个形式理论，</p>

<p>那么称语句集合，<span data-katex="Th(\Gamma )=\{A|A"></span>是<span data-katex="\mathscr{L}"></span>的语句，并且<span data-katex="\Gamma \vdash A"></span>可证<span data-katex="\}"></span>，</p>

<p>为<span data-katex="\Gamma"></span>的<strong>理论闭包</strong>。</p>

<p><br/></p>

<p>如果<span data-katex="\Gamma =\emptyset"></span>，那么，<span data-katex="Th(\emptyset )=\{A|A"></span>是<span data-katex="\mathscr{L}"></span>的语句，并且<span data-katex="\vdash A"></span>可证<span data-katex="\}"></span>，</p>

<p>是由全体重言式组成的集合。</p>

<p><br/></p>

<p>如果<span data-katex="M"></span>是<span data-katex="\mathscr{L}"></span>的模型，并且<span data-katex="M\models \Gamma"></span>，那么称<span data-katex="M"></span>是<span data-katex="\Gamma"></span>的模型。</p>

<p><br/></p>

<h2><strong>关于模型的形式理论</strong></h2>

<p>如果<span data-katex="M"></span>是一阶语言<span data-katex="\mathscr{L}"></span>的模型，那么称语句集合，</p>

<p><span data-katex="Th(M)=\{A|A"></span>是<span data-katex="\mathscr{L}"></span>的语句，并且<span data-katex="M\models A\}"></span></p>

<p>为<span data-katex="\mathscr{L}"></span>关于模型<span data-katex="M"></span>的形式理论。</p>

<p><br/></p>

<h2><strong>形式理论的完全性</strong></h2>

<p>称形式理论<span data-katex="\Gamma"></span>是完全的，如果对任意语句<span data-katex="A"></span>，</p>

<p><span data-katex="\Gamma \vdash A"></span>及<span data-katex="\Gamma \vdash \neg A"></span>中必有一个可证。</p>

<p><br/></p>

<h2><strong>函数的可表示性</strong></h2>

<p>设<span data-katex="f:\mathbb{N}^k\rightarrow \mathbb{N}"></span>是<span data-katex="\mathbb{N}"></span>上的<span data-katex="k"></span>元函数，</p>

<p>如果存在<span data-katex="\mathscr{A}"></span>公式<span data-katex="A(x_1,...,x_{k+1})"></span>，使得对任意自然数<span data-katex="n_1,...,n_{k+1}"></span>，</p>

<p>如果<span data-katex="f(n_1,...,n_k)=n_{k+1}"></span>，那么<span data-katex="\Pi \vdash A[S^{n_1}0,...,S^{n_{k+1}}0]"></span>可证</p>

<p>如果<span data-katex="f(n_1,...,n_k)\neq n_{k+1}"></span>，那么<span data-katex="\Pi \vdash \neg A[S^{n_1}0,...,S^{n_{k+1}}0]"></span>可证</p>

<p>在这种情况下，称函数<span data-katex="f"></span>在<span data-katex="\Pi"></span>中<strong>可表示</strong>，</p>

<p>并称公式<span data-katex="A(x_1,...,x_k,x_{k+1})"></span>是函数<span data-katex="f"></span>在<span data-katex="\Pi"></span>中的<strong>表示</strong>。</p>

<p><br/></p>

<p><strong>定理：</strong>如果<span data-katex="f:\mathbb{N}^k\rightarrow \mathbb{N}"></span>是<span data-katex="\mathbb{N}"></span>上的<span data-katex="k"></span>元可计算函数，</p>

<p>那么函数<span data-katex="f"></span>在<span data-katex="\Pi"></span>中可表示。</p>

<p><br/></p>

<h2><strong>关系的可表示性</strong></h2>

<p>设<span data-katex="r"></span>是<span data-katex="\mathbb{N}"></span>上的<span data-katex="k"></span>元关系，</p>

<p>如果存在<span data-katex="\mathscr{A}"></span>公式<span data-katex="A(x_1,...,x_{k+1})"></span>，使得对任意自然数<span data-katex="n_1,...,n_{k+1}"></span>，有</p>

<p>如果<span data-katex="r(n_1,...,n_k)=n_{k+1}"></span>，那么<span data-katex="\Pi \vdash A[S^{n_1}0,...,S^{n_{k+1}}0]"></span>可证</p>

<p>如果<span data-katex="r(n_1,...,n_k)\neq n_{k+1}"></span>，那么<span data-katex="\Pi \vdash \neg A[S^{n_1}0,...,S^{n_{k+1}}0]"></span>可证</p>

<p>在这种情况下，称关系<span data-katex="r"></span>在<span data-katex="\Pi"></span>中<strong>可表示</strong>，</p>

<p>并称公式<span data-katex="A(x_1,...,x_k,x_{k+1})"></span>在<span data-katex="\Pi"></span>中表示关系<span data-katex="r"></span>。</p>

<p><br/></p>

<p><strong>定理：</strong>如果<span data-katex="r:\mathbb{N}^k\rightarrow \mathbb{N}"></span>是<span data-katex="\mathbb{N}"></span>上的<span data-katex="k"></span>元可判定关系，</p>

<p>那么<span data-katex="r"></span>在<span data-katex="\Pi"></span>中可表示。</p>

<p><br/></p>

<h2><strong>哥德尔定理</strong></h2>

<p><strong>哥德尔不完全性定理</strong></p>

<p>如果<span data-katex="\Gamma"></span>是一个有穷并包含初等算术<span data-katex="\Pi"></span>的形式理论，</p>

<p>那么<span data-katex="\Gamma"></span>是一个不完全的形式理论。</p>

<p><br/></p>

<p><strong>哥德尔协调性定理</strong></p>

<p>如果形式理论<span data-katex="\Gamma"></span>包含初等算术<span data-katex="\Pi"></span>，</p>

<p>那么<span data-katex="\Pi"></span>的协调性不能在<span data-katex="\Gamma"></span>中被证明。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>以上，只是对谓词逻辑中用到的部分公式，进行了整理，</p>

<p>对建立<strong>用证明论和模型论的观点来理解公理系统</strong>，是很有帮助的。</p>

<p>然而，从更高的角度来看，有些观点很有可能就是<strong>错误</strong>的，</p>

<p>因此，此篇只是一个开始，督促我朝着更广阔的方向努力学习。</p>

<p><br/></p>

<p><strong>参考</strong></p>

<p><a href="http://book.douban.com/subject/2364517/">数理逻辑</a></p>

<p><a href="http://www.logicmatters.net/tyl/">Teach Yourself Logic 2015</a></p>

<p><a href="http://book.douban.com/subject/2878521/">logic and structure</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[模型观]]></title>
    <link href="https://thzt.github.io/blog/2015/06/24/model/"/>
    <updated>2015-06-24T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2015/06/24/model</id>
    <content type="html"><![CDATA[<p>Robert Sedgewick/Kevin Wayne的《算法》一书中，</p>

<p>强调了科学方法，</p>

<p><br/></p>

<p>细致的观察真实世界的特点。</p>

<p><strong>根据观察结果提出假设模型</strong>。</p>

<p>根据模型预测未来的事件。</p>

<p>继续观察并核实预测的准确性。</p>

<p>如此反复直到确认预测和观察一致。</p>

<p><br/></p>

<p>可是，</p>

<p>我们永远也没法知道某个假设是否<strong>永远正确</strong>，</p>

<p>我们只能验证它和我们的观察的一致性。</p>

<p><br/></p>

<p>爱因斯坦说，</p>

<p>再多的实验也不一定能够证明我是对的，</p>

<p>但只需要一个实验就能证明我是错的。</p>

<p><br/></p>

<p>科学方法可能大家都很清楚，</p>

<p>但是遇到具体问题，</p>

<p>人们却容易忽视它。</p>

<p><br/></p>

<p>实践是检验真理的唯一标准，</p>

<p>大胆假设，小心求证，</p>

<p>建立正确的<strong>模型观</strong>，</p>

<p>可以少走很多弯路。</p>

<p><br/></p>

<h2><strong>模型与目标系统</strong></h2>

<p>我们经常混淆<strong>模型</strong>与<strong>目标系统</strong>的区别，</p>

<p>把符号“1”，“2”，“3”,&hellip;</p>

<p>当做数学对象中的自然数本身。</p>

<p><br/></p>

<p>这只是用印刷符号对<strong>自然数</strong>进行建模，</p>

<p>实际上还有不同的模型，</p>

<p>除了阿拉伯数字，还有罗马数字，中国筹，等等，</p>

<p>甚至还有Church number。</p>

<p><br/></p>

<p>这个世界上<strong>并没有本质的道理</strong>，</p>

<p>因为，我们无法验证什么是绝对正确的。</p>

<p><br/></p>

<p>我们只能拿着模型来进行<strong>假设</strong>，</p>

<p>然后通过实验<strong>验证</strong>它的准确性。</p>

<p><br/></p>

<p>使用模型，我们可以从不同侧面，</p>

<p>对目标系统进行研究。</p>

<p><br/></p>

<h2><strong>模型的发展与多样性</strong></h2>

<p>对观察结果提出的模型，</p>

<p>是一直在发展的，</p>

<p>并没有哪一个是终极的。</p>

<p><br/></p>

<p>当我们问“<strong>到底是什么</strong>”的时候，</p>

<p><strong>其实是以静态的观点，分析动态发展中的事物</strong>。</p>

<p><br/></p>

<p>模型在不断修正和演进中，</p>

<p>对目标系统做出更精确的<strong>解释</strong>。</p>

<p><br/></p>

<p>例如，lambda calculus，</p>

<p>是一种计算模型，</p>

<p>一开始是无类型的，</p>

<p>但是同样也得不到类型系统的种种好处。</p>

<p><br/></p>

<p>因此lambda calculus就被扩展了，</p>

<p>变成了typed lambda calculus的一个<strong>特例</strong>。</p>

<p><br/></p>

<p>对计算建模的方法也并<strong>不唯一</strong>，</p>

<p>图灵机，combinatory logic，形式语言，等等，</p>

<p>都是和lambda calculus具有相同计算能力的模型。</p>

<p><br/></p>

<h2><strong>编程语言</strong></h2>

<p>编程语言是一种形式语言，</p>

<p>不同的编程语言，只是用不同的一堆<strong>符号</strong>，</p>

<p>按着不同的<strong>文法规则</strong>，</p>

<p>对计算进行建模。</p>

<p><br/></p>

<p>根据形式语言理论，</p>

<p>不受限文法，与图灵机等价。</p>

<p><br/></p>

<p>可以把不同的编程语言，</p>

<p>看做计算过程的多样化模型。</p>

<p><br/></p>

<p>同样，它们的建模方式也在演化，</p>

<p>语言的规范在发展。</p>

<p><br/></p>

<p>遇到具体问题，</p>

<p><strong>我们需要选择合适的编程语言</strong>。</p>

<p><br/></p>

<p>而编程范型，</p>

<p>是语义上的一种分类，</p>

<p>并没有明确的界线。</p>

<p><br/></p>

<p>我们也没必要成见太深，</p>

<p>强行把语言用在<strong>不适用</strong>的场景中。</p>

<p><br/></p>

<p>毕竟，语言是用来沟通和表达的。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>当我还是孩子的时候，</p>

<p>对大自然，就喜欢问“到底是什么”，</p>

<p>它指引我沿着科学之路越走越远。</p>

<p><br/></p>

<p>随着学习的深入，</p>

<p>让我开始懂得<strong>反思问题本身</strong>，</p>

<p>站在更高的角度。</p>

<p><br/></p>

<p>从模型角度来看，</p>

<p>物理学就是对大自然现实世界的建模，</p>

<p>耳熟能详的物理学理论，也只是<strong>可行的模型之一</strong>。</p>

<p><br/></p>

<p>例如：</p>

<p>牛顿的万有引力理论，</p>

<p>爱因斯坦的广义相对论，</p>

<p>都是引力理论。</p>

<p><br/></p>

<p>当然还有其他的引力理论，</p>

<p><strong>他们都是数学模型，用来解释目标系统</strong>，</p>

<p>并不是大自然本身。</p>

<p><br/></p>

<p>终极理论之梦，</p>

<p>可能会随着认识的提高，</p>

<p>不再成为问题了。</p>

<p><br/></p>

<p>就像“没有银弹”一样，</p>

<p><strong>任何领域都没有一劳永逸的事情</strong>。</p>
]]></content>
  </entry>
  
</feed>
