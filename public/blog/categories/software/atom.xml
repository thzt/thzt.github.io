<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software | 何幻]]></title>
  <link href="https://thzt.github.io/blog/categories/software/atom.xml" rel="self"/>
  <link href="https://thzt.github.io/"/>
  <updated>2016-07-23T17:13:27+08:00</updated>
  <id>https://thzt.github.io/</id>
  <author>
    <name><![CDATA[thzt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[软件开发的节奏]]></title>
    <link href="https://thzt.github.io/blog/2016/01/21/the-rhythm-of-the-development/"/>
    <updated>2016-01-21T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/01/21/the-rhythm-of-the-development</id>
    <content type="html"><![CDATA[<p>有时候，在软件项目的巨大压力下，</p>

<p>我们会不由自主的做出，违反<strong>自然规律</strong>的事情。</p>

<p><br/></p>

<p>短期来看，确实受益了，</p>

<p>然而，长期看来，无异于<strong>揠苗助长</strong>，</p>

<p>流毒无穷。</p>

<p><br/></p>

<p>人们以为，</p>

<p>软件行业中，<strong>加班</strong>是家常便饭，</p>

<p>但实际上，这是管理上缺陷。</p>

<p><br/></p>

<p>处于底层的程序员们，无力涉足管理，</p>

<p>但也可以认真想一想，<strong>如何高效的加班</strong>。</p>

<p><br/></p>

<p>我们先从几个角度来看看加班这件事吧。</p>

<p><br/></p>

<h2>从收支上看加班</h2>

<p>长期加班并不是一件好事，</p>

<p>因为，它增加了投入。</p>

<p><br/></p>

<p>这还不好吗？</p>

<p>其实不然。</p>

<p><br/></p>

<p>因为一件事情的<strong>代价</strong>，</p>

<p>在很大程度上，影响了我们的<strong>决策</strong>。</p>

<p><br/></p>

<p>如果在计划阶段，</p>

<p>认为不加班可以做完，</p>

<p>最后结果是加班做完的。</p>

<p><br/></p>

<p>这只能说明我们低估了成本，</p>

<p>那么做这件事情就可能不是那么值得了。</p>

<p><br/></p>

<p>因此，<strong>加班会影响我们去评判某一选择的正确性</strong>，</p>

<p><strong>还会让我们继续做出错误的决定</strong>。</p>

<p><br/></p>

<h2>从工作性质上看加班</h2>

<p>短期加班，是很有效果的，</p>

<p>但是，人不能不休息，</p>

<p>软件工程师也不能不重新思考自己的设计。</p>

<p><br/></p>

<p>加班会迫使人们把工作赶出来，</p>

<p>那么任何有创造力的事情都将被错过。</p>

<p><br/></p>

<p>而且，代码质量会变差，</p>

<p><strong>添加新功能的成本也会越来也大</strong>。</p>

<p><br/></p>

<p>经常发生的事情是，</p>

<p>本来很简单的一个功能，因为有历史原因，</p>

<p>才不得不使用复杂的实现方案。</p>

<p><br/></p>

<p>加班会让这件事更频繁的发生。</p>

<p><br/></p>

<h2>从工作总量上看加班</h2>

<p>短期内，工作总量是会增加的，</p>

<p>因为前几天人们都不累，</p>

<p>延长了工作时间，代码总量肯定是会增加的。</p>

<p><br/></p>

<p>然而，长期加班会导致人们效率下降，</p>

<p>在明知道要加班的情况下，</p>

<p>会更有意识的降低自己的工作效率，</p>

<p>反正要加班嘛。</p>

<p><br/></p>

<p>因此，工作总量不增反降。</p>

<p><br/></p>

<p>另外，人是不可能违背自然规律的，</p>

<p><strong>没有必要用第二天一整天的无精打采</strong>，</p>

<p><strong>来换取今天几个小时的加班</strong>。</p>

<p><br/></p>

<p>只是改变了生物钟，</p>

<p>没有什么意义呀。</p>

<p><br/></p>

<p>而且，代码多一定不是好事，</p>

<p><strong>错的越多，要改的就越多</strong>。</p>

<p><br/></p>

<h2>从软件工程来看加班</h2>

<p>如果去饭店吃饭，</p>

<p>厨师说做一个鱼香肉丝要10分钟，</p>

<p>我们再急，也不会要求厨师5分钟把它做出来，</p>

<p>让他加班也没用。</p>

<p><br/></p>

<p>一个女人，必须经过10月怀胎，</p>

<p>才能生下小孩，</p>

<p>肯定不会有人强迫她5个月就生下来，</p>

<p>让她加班，给她加人手也没用。</p>

<p><br/></p>

<p>经验表明，</p>

<p><strong>有些事情经历的时间是不可压缩的</strong>。</p>

<p><br/></p>

<p>因此可以说，</p>

<p>当工期足够短的情况下，</p>

<p>加再多的人也是徒劳的。</p>

<p><br/></p>

<p>这时候，我们应该努力反思了，</p>

<p><strong>为什么我们要做那么多的事</strong>，</p>

<p><strong>却还剩下了这么少的时间</strong>？</p>

<p><br/></p>

<h2>工程师的价值</h2>

<p>以上的分析不少了，</p>

<p>我相信如果有领导看到这里，</p>

<p>还是想让你加班，那就是故意的了。</p>

<p><br/></p>

<p>在不可抗拒的情况下，</p>

<p>底层程序员们，实际上应该考虑，</p>

<p><strong>高效加班的办法</strong>。</p>

<p><br/></p>

<p>因为，只有我们明白软件，</p>

<p>知道它的生命周期，</p>

<p>了解它的特性，</p>

<p>更知道怎么做好它。</p>

<p><br/></p>

<p>我们在工期紧的情况下，</p>

<p>最应该做的事情就是，</p>

<p><strong>管理好自己的时间，调节好工作状态</strong>。</p>

<p><br/></p>

<p>用正确的姿势走好每一步。</p>

<p><br/></p>

<h2>保持节奏</h2>

<p>无论外界有多么大的压力，</p>

<p>我们都要<strong>保持自己的节奏</strong>。</p>

<p><br/></p>

<p>这不但是对自己负责，</p>

<p>也是从专业的角度对项目负责。</p>

<p><br/></p>

<p><strong>我们只有保持节奏的产出</strong>，</p>

<p><strong>才能帮助项目成功</strong>。</p>

<p><br/></p>

<p>不能为了速度一味的牺牲质量，</p>

<p>也不能因为洁癖，减缓前进的步伐。</p>

<p><br/></p>

<p>其实，更多情况下，我们是自乱阵脚。</p>

<p><br/></p>

<p>别人不了解软件，让我们精疲力尽，让项目走向失败，</p>

<p>如果就听之任之的话，那就只能怪我们自己了。</p>

<p><br/></p>

<p><strong>身为一名软件工程师</strong>，</p>

<p><strong>没有努力把项目调整到正确的轨道</strong>，</p>

<p><strong>而是选择傻傻的加班</strong>。</p>

<p><br/></p>

<p><strong>我觉得，这才是团队的悲哀</strong>。</p>

<p><br/></p>

<h2>结语</h2>

<p>再多的加班，</p>

<p>也比不上想人们在主观上想把它做好。</p>

<p><br/></p>

<p>可惜，可惜。</p>

<p><br/></p>

<p>欲将心事付瑶筝，</p>

<p>知音少，弦断有谁听？</p>

<p>——《小重山》岳飞</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[积极成长]]></title>
    <link href="https://thzt.github.io/blog/2015/12/22/grow-up-positively/"/>
    <updated>2015-12-22T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2015/12/22/grow-up-positively</id>
    <content type="html"><![CDATA[<p>飞机晚点了。</p>

<p><br/></p>

<p>正好趁这个机会，整理下思路，</p>

<p>这些天居然以技术人员的身份杀入到<strong>产品和需求的讨论</strong>中了，</p>

<p>真是一个挑战。</p>

<p><br/></p>

<p>对我来说，</p>

<p>之前看的一些软件工程，需求分析，产品设计的知识终于用上了。</p>

<p>即使这样，<strong>给我带来的改变是仍旧是巨大的</strong>。</p>

<p><br/></p>

<p>第一次因为公事出差，</p>

<p>第一次说这么多话，</p>

<p>第一次忙的没时间写代码。</p>

<p><br/></p>

<h2><strong>学会沟通</strong></h2>

<p>这些经历，让我理解到，</p>

<p><strong>一开始把自己定位成一个程序的编写者，</strong></p>

<p><strong>是多么的狭隘。</strong></p>

<p><br/></p>

<p>也让我认识到，</p>

<p><strong>软件工程师自称的不善言辞，</strong></p>

<p><strong>其实更多的是一种借口。</strong></p>

<p><br/></p>

<p>当我们不得不了解用户的问题，</p>

<p>当我们不得不修正根本不解决问题的解决方案时，</p>

<p>就<strong>必须学会沟通</strong>。</p>

<p><br/></p>

<h2><strong>以身试毒</strong></h2>

<p>语言是思想的交流媒介，不是思想本身，</p>

<p>因此，即使进行再多的交流，</p>

<p><strong>两个人的理解总是会有偏差的</strong>。</p>

<p><br/></p>

<p>业务人员不知道我们能为他们做到什么程度，</p>

<p>技术人员不知道我们是否真的解决了问题。</p>

<p>这些都是需要交流的。</p>

<p><br/></p>

<p>武侠小说中，</p>

<p>经常出现，神医为了解毒，以身试毒。</p>

<p>我现在觉得，<strong>这种胆略，才是真正想要解决问题的态度</strong>。</p>

<p><br/></p>

<h2><strong>我做的了</strong></h2>

<p>当客观条件不允许时，</p>

<p>达不到专业的标准，是情有可原的。</p>

<p>正如一个软件系统，</p>

<p>如果工期太短，那么<strong>短期内</strong>的质量低下是不可避免的。</p>

<p><br/></p>

<p>然而，当解决了用户的主要问题后，</p>

<p><strong>剩下大把的空闲时间，如果不努力提高品质，</strong></p>

<p><strong>就是主观原因了。</strong></p>

<p><br/></p>

<p>经历这次讨论，让我学到无论做什么事，</p>

<p>都应该用专业的标准要求自己。</p>

<p><strong>任何形式的『我做不了』，短期来看可原谅，长期来看就是慵懒。</strong></p>

<p><br/></p>

<p>成功者想办法，失败者找理由。</p>

<p><br/></p>

<h2><strong>先活下来</strong></h2>

<p>最后，让我理解到的是，</p>

<p><strong>软件必须首先能解决问题，能创造效益，</strong></p>

<p><strong>才有存活下来的可能。</strong></p>

<p><br/></p>

<p>一开始可能很丑陋，但是活下来了。</p>

<p>胜过一切漂亮的框架，优雅的结构。</p>

<p><br/></p>

<p>一方面，通过分析需求的优先级，</p>

<p>解决<strong>真正困扰用户的难题</strong>。</p>

<p>另一方面，用这仅有的争取得来的时间，</p>

<p>提高扩展性，以适应业务的发展。</p>

<p><br/></p>

<h2><strong>不要急躁</strong></h2>

<p>努力用最短的时间解决问题，是好样的，</p>

<p>然而，这并不能消除后期<strong>修正方案</strong>的可能性。</p>

<p><br/></p>

<p>尤其是沟通过程中，</p>

<p>这很重要，</p>

<p><strong>别人总是担心我们给他们看的就是最终的解决方案。</strong></p>

<p><br/></p>

<p>实际上，软件是活的，</p>

<p>事情是发展的，</p>

<p>业务场景，以及别人的理解也是变化的，</p>

<p>甚至市场氛围也是瞬息万变。</p>

<p><br/></p>

<p>我学会了<strong>着眼于程度</strong>，</p>

<p>而不是<strong>判断</strong>。</p>

<p><br/></p>

<p>如果没有完全解决，那么<strong>是否比昨天更好</strong>，</p>

<p>有没有进步。</p>

<p><br/></p>

<h2><strong>逐步调整</strong></h2>

<p>理想中，只要切题，我们的方案一出，</p>

<p>用户的问题，马上就能得到解决。</p>

<p>它是那么有效，那么一阵见血。</p>

<p><br/></p>

<p>然而，<strong>现实并不是这样的</strong>。</p>

<p><strong>能做出什么样的改变，完全取决于目前的项目状态。</strong></p>

<p><br/></p>

<p>我们想的很好，</p>

<p>然而，能做的，只是进行<strong>有限范围</strong>上的调整。</p>

<p><br/></p>

<p>要落到实处，方案就必须能和现有的系统接轨，</p>

<p>完全废弃一个系统是不可能的，</p>

<p>代价也太高了。</p>

<p><br/></p>

<p>此外，我们必须能够改善现状，</p>

<p>才能证明我们可以做的更好。</p>

<p><br/></p>

<p>把现在的事情做好，是证明自己能把其他事情做好的唯一办法。</p>

<p><br/></p>

<h2><strong>团队无价</strong></h2>

<p>随着年龄的增长，我发现个人的作用越来越小了，</p>

<p>因为，<strong>同龄人是其他行业专家的可能性越来越大</strong>。</p>

<p><br/></p>

<p>你在这个领域深入研究了10年，</p>

<p>另外一个人就完全有可能在其他领域深入研究了10年。</p>

<p>而从外表上是看，是无法区分的。</p>

<p><br/></p>

<p>这跟学生阶段是完全不同的，</p>

<p><strong>学生之间的差距更多的是同领域深入程度的差距</strong>。</p>

<p><br/></p>

<p>因此，为了把事情做好，</p>

<p><strong>我们需要各领域的专家一起交流</strong>，</p>

<p>这样的团队是无价的，一个人不可能面面俱到。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>飞机要起飞了。</p>

<p><br/></p>

<p>先总结到这里，继续努力。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[愉快的三天]]></title>
    <link href="https://thzt.github.io/blog/2015/10/15/web-front-end-bug/"/>
    <updated>2015-10-15T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2015/10/15/web-front-end-bug</id>
    <content type="html"><![CDATA[<p><strong>场景：</strong></p>

<p>两级弹框，第一级是bootstrap的modal，里面有一个jqgrid，第二级是jqgrid添加记录的弹框</p>

<p>第二级弹框中的textarea在IE9中不能换行，而在chrome中可以</p>

<p><br/></p>

<h2><strong>Day 1</strong></h2>

<p>bootstrap的modal和jqgrid全部在实验室环境中搭建起来，比较麻烦，先考虑别的办法</p>

<p>因为IE9调试工具太弱了，看看firefox有没有同样的问题</p>

<p>发现firefox中的问题是textarea不能聚焦</p>

<p>以前遇到过不能获得焦点的问题，跟tabindex有关，把tabindex删掉，没作用</p>

<p>发现一级弹框中加了元素级别的textarea样式，删掉，没作用</p>

<p>因为这个框是jqgrid弹出来的，查看jqgrid源码，有没有劫持回车事件，没有</p>

<p>firefox中逐个删除页面元素，发现可以让textarea获得焦点，可能是元素的问题</p>

<p>把一级对话框内中的jqgrid删掉，再用控制台命令添加纯html二级弹框，还是有问题，说明不是jqgrid的问题</p>

<p>考虑到删除元素会改变子元素的样式，可能是样式问题</p>

<p>firefox中删除所有样式，发现可以获得焦点了，是样式问题</p>

<p>逐步缩小范围，发现是一级弹框有一个行内样式所致，删掉后，可以获得焦点了</p>

<p>但是在IE9中仍然不可换行</p>

<p><strong>解决了firefox不能聚焦的问题</strong></p>

<p><br/></p>

<h2><strong>Day 2</strong></h2>

<p>现在Chrome和Firefox都没问题了，只好硬着头皮用IE9调试了，鉴于昨天的结论，先从样式角度考虑</p>

<p>发现一级弹框去掉所有样式，就可以换行了</p>

<p>但是聚焦不到特定的某一条样式上，怀疑是脏乱的样式加成结果导致CSS解析器出错了</p>

<p>发现在错误的样式下，只要隐藏对话框也是可换行的，可能是浏览器计算位置时出错了</p>

<p>因为bootstrap样式层叠的太多了，既然不知道哪个样式是错的，那就用正确的样式手写生成原来的样子，也是个办法</p>

<p>生成过程中发现其他样式都去掉，display:block;position:fixed;z-index:1030;就能复现问题，可能是浏览器计算z-index错了</p>

<p>用IE9调试工具修改页面源码，就没问题了。因为页面重绘，重新计算了位置，也可能是事件都删掉了</p>

<p>页面太乱了，清理一下，把页面杂乱的标签都删掉，尤其是script片段，没作用</p>

<p>把link标签都删掉，没问题了。应该是某个样式表的问题，定位到是bootstrap.css或ui.jqgrid.css的问题，这两个删一个问题就复现</p>

<p>把一级弹框的所有父元素保留，删除页面中所有其他的html，问题还存在。但是IE9调试工具中点Refresh就没问题了，IE9调试工具不可靠</p>

<p>不能过度依赖调试工具了，得想办法把本地服务器端运行起来，不然剩下的办法只能是实验室环境中把网页重新静态构建起来了</p>

<p><strong>找到一个可行的解决方案，弹出第二级对话框时，把第一级隐藏掉</strong></p>

<p><br/></p>

<h2><strong>Day 3</strong></h2>

<p>搭建本机环境，把服务器端运行起来</p>

<p>删掉一级弹框中的所有代码，控制台命令弹出二级纯html弹框，没作用</p>

<p>先用控制台命令弹出二级纯html弹框，再在页面点击弹出一级弹框，没作用</p>

<p>控制台命令弹出二级纯html弹框，再控制台命令弹出一级纯html弹框，好了，应该是一级弹框弹出的过程中做了什么</p>

<p>发现是bootstrap的modal(&lsquo;show&rsquo;)这条语句弹出的框有问题</p>

<p>因为IE9不容易跟源码，所以先不看源码，在实验室环境中，造一个一模一样modal，然后二级弹框果然出问题了，并且firefox和chrome都无法获得焦点</p>

<p>实验室环境中复现了问题，问题快解决了</p>

<p>找到bootstrap的modal插件的官方例子，弹出二级弹框，没问题</p>

<p>对比有问题的代码，发现只要modal-body中包含&lt;button&gt;就能复现问题，定位为bootstrap的问题</p>

<p>考虑解决方案，把服务器中的所有button都换成div，还是有问题，而实验室没问题，说明IE9不太稳定</p>

<p>控制台删掉所有的button，结果好了</p>

<p>看看是哪个button影响的，发现总是最后一个button影响的</p>

<p>用补丁方式，先造一个隐藏的button，然后载入时模拟控制台删掉它，没作用。但是控制台删掉它，就有作用，不稳定</p>

<p>不看modal的源码不行了</p>

<p>为了能调试进源码中，换Chrome跟进bootstrap源码，再到IE9看效果</p>

<p>先把modal函数中代码全删了，果然问题没了，然后逐个功能还原，寻找复现问题的临界点</p>

<p>发现enforceFocus这样的方法，是为了强制让对话框获得焦点，感觉就是这个了</p>

<p>把这个方法注掉，没作用，看看实现，就是先解绑一个自定义聚焦事件再绑定这个自定义聚焦事件</p>

<p>在事件中写log，果然点击textarea，就触发这个自定义事件</p>

<p>把事件中把强制获得焦点的代码删掉，好了，这应该就是问题所在了</p>

<p>考虑解决方案，enforceFocus只是进行解绑和绑定事件，而事件是点击textarea时触发的，那就让它只解绑不绑定</p>

<p>分析源码，enforceFocus引用是Modal.prototype中的方法，而Modal是$.fn.modal.constructor，因此是在源码外改的</p>

<p>尽量不动源码，在源码之外加补丁</p>

<p>chrome和firefox在实验室环境中，textarea是不能获得焦点的，但是网站中可以，原因未知</p>

<p><strong>通过覆盖自动聚焦事件，解决了问题</strong></p>

<p><br/></p>

<h2><strong>困难</strong></h2>

<p>IE9的调试工具太差，Chrome调试工具虽好，但是Chrome没有问题</p>

<p>bootstrap大量的样式名污染的全局空间，每一个元素有大量冗余的层叠样式</p>

<p>很多事件可能是跟样式名相关联的，删了样式名会影响事件</p>

<p>前两天本机环境没有搭建好，只能通过浏览器调试</p>

<p>第三方库用了什么黑魔法，不知道</p>

<p>页面太杂乱，script片段遍布各处，到处是动态加载但不清理的内容</p>

<p>setTimeout乱用，至少二十处setTimeout，js执行过程紊乱</p>

<p>两层弹框，第一级弹框中还能进行内容tab切换，影响因素比较多</p>

<p>项目代码的问题写的太差，互相依赖，很难对功能进行隔离，不能以功能模块为单位进行测试</p>

<p>二级弹框并不是一级弹框的子元素，而是body的子元素，与一级弹框的位置相距很远，从直觉上很难发现有关联</p>

<p><br/></p>

<h2><strong>优势</strong></h2>

<p>电脑配置不错，两个显示器，16G内存装了虚拟机可以模拟IE8-11,Edge</p>

<p>没有时间压力，没人催我，没有别的项目或会议打断我</p>

<p>服务器端同事配合，没有怀疑我的能力</p>

<p>bootstrap和jqgrid源码不是太烂</p>

<p>这不是一个偶现的bug，没次都能出现，难度降低了不少</p>

<p><br/></p>

<h2><strong>误区</strong></h2>

<p>其实IE的问题并不是那么多，更多的是可见代码的问题</p>

<p>黑盒试错，不如静下心来跟进源码看看原理</p>

<p>不能过度依赖调试工具的结论</p>

<p>可以通过改动来试错的代码越多，排除假设的机会就越大</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[无法扭转的颓势]]></title>
    <link href="https://thzt.github.io/blog/2015/09/02/impractical-illusion/"/>
    <updated>2015-09-02T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2015/09/02/impractical-illusion</id>
    <content type="html"><![CDATA[<p>很多人都参与过失败的项目，</p>

<p>代码脏乱差，补丁套补丁，</p>

<p>硬编码，版本紊乱，</p>

<p>加班严重，人肉文档，</p>

<p>幻想中的需求，人心涣散。</p>

<p><br/></p>

<p>我们都不想看着它失败，</p>

<p>但是又无能为力。</p>

<p><br/></p>

<p>不少能人异士，</p>

<p>提出建设性的方针，</p>

<p>提高开发能力，架构能力，</p>

<p>管控需求，加强团队建设。</p>

<p><br/></p>

<p>似乎可以力挽狂澜一样，</p>

<p>好像真的可以。</p>

<p><br/></p>

<p>实际上，<strong>地基如果坏了，</strong></p>

<p><strong>项目就已经完了，是无法挽救的，</strong></p>

<p>不如想想怎样重新来过吧。</p>

<p><br/></p>

<p>我们需要做的，</p>

<p>不是抱怨，也不是消极处理，</p>

<p>而是<strong>承认事实，理智对待</strong>。</p>

<p><br/></p>

<h2><strong>质量只会变得更差</strong></h2>

<p><strong>软件质量，一旦比昨天差，</strong></p>

<p><strong>明天只会更差。</strong></p>

<p><br/></p>

<p>一个房子如果窗户破了，没有人去修补，</p>

<p>隔不久，其它的窗户也会莫名其妙地被人打破。</p>

<p>——破窗效应</p>

<p><br/></p>

<p>明天有明天的事情，</p>

<p>如果明天替今天买单，</p>

<p>那今天还不如不做。</p>

<p><br/></p>

<p>期望以后来整理它，</p>

<p>那么这个时间永远都不会到来，</p>

<p>除非那天你不务正业。</p>

<p><br/></p>

<p>当天的事情，当天解决。</p>

<p><br/></p>

<p>永远保持离开时的露营地比你发现它时更整洁。</p>

<p>——童子军规则</p>

<p><br/></p>

<p>如果发现代码质量出了问题，</p>

<p><strong>唯一的办法就是停下手头的活，</strong></p>

<p><strong>偿还技术债务，</strong></p>

<p><strong>把它弄好了再继续。</strong></p>

<p><br/></p>

<p>否则，明天需要偿还的会更多。</p>

<p><br/></p>

<h2><strong>需求不需要稳定，需要控制</strong></h2>

<p><strong>没有稳定的需求，</strong></p>

<p><strong>作为专业程序员，</strong></p>

<p><strong>早就应该承认这一点。</strong></p>

<p><br/></p>

<p>需求是不可能不变的，</p>

<p>软件的存在就是为了适应变化的需求。</p>

<p><br/></p>

<p>但是，这并不是说我们不用去控制它，</p>

<p>至少我们应该让它<strong>阶段性的稳定</strong>。</p>

<p><br/></p>

<p>而且，程序员不是仅仅抱怨一下就完了，</p>

<p>软件本来就应该采用灵活的设计。</p>

<p><br/></p>

<p>如果需求乱了，并不是一个人的问题，</p>

<p>抱怨也没有用，所有人都该停下来，</p>

<p>承认事实，再想办法。</p>

<p><br/></p>

<h2><strong>早就该调整的架构</strong></h2>

<p>没有永远合理的架构，</p>

<p>架构是随着业务发展演变的。</p>

<p><br/></p>

<p><strong>好的架构，</strong></p>

<p><strong>是适用的，同时也应该是易于调整的。</strong></p>

<p><br/></p>

<p>当所有人都意识到模块划分不合理的时候，</p>

<p>早就应该调整结构了，</p>

<p>很多人都知道应该怎么做，</p>

<p>但是，几乎没有人做过，</p>

<p>是因为现在做起来成本太大。</p>

<p><br/></p>

<p>这就给了人们一个假象，</p>

<p>结构调整是复杂的，</p>

<p>不是短期就成实现的。</p>

<p><br/></p>

<p>其实不然，</p>

<p>治理的最高境界，</p>

<p>在于<strong>防患于未然</strong>。</p>

<p><br/></p>

<p>善战者无赫赫之功，善医者无煌煌之名。</p>

<p>——《曹选》</p>

<p><br/></p>

<p><strong>持续调整，成本并不大</strong>，</p>

<p>累积起来，就变成不可能完成的事情了。</p>

<p><br/></p>

<h2><strong>团结是每天都需要保持的</strong></h2>

<p>等到涣散了再考虑人心，</p>

<p>为时已晚。</p>

<p><br/></p>

<p>不团队的队伍，</p>

<p>再训练也无法变得团结一心。</p>

<p><br/></p>

<p>开除任何一个人，</p>

<p>也无法改善已有的状态。</p>

<p><br/></p>

<p>那怎么办？</p>

<p>我们得承认事实，</p>

<p><strong>有的事情糟了，确实是不可挽救的。</strong></p>

<p><br/></p>

<p>真到了这个地步，</p>

<p>只能全部都干掉。</p>

<p><br/></p>

<p>或者下更大的成本，</p>

<p>用新人组织新的团队，</p>

<p>只加入一个老兵。</p>

<p><br/></p>

<p>我们可不想到这一天，</p>

<p>那么我们今天要怎么做？</p>

<p>还能没有办法吗？</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>有时候，<strong>人们之所以乏力，</strong></p>

<p><strong>是因为还在抱有幻想，</strong></p>

<p><strong>不承认既定事实。</strong></p>

<p><br/></p>

<p>如果一开始就认为，</p>

<p>软件项目做烂了是无法挽救的。</p>

<p><br/></p>

<p>那什么都不一样了，</p>

<p>今天我们只会竭尽所能避免它变坏，</p>

<p>不然等到那一天，</p>

<p>一切都太迟了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端程序员的自我修养]]></title>
    <link href="https://thzt.github.io/blog/2015/09/01/an-introduction-to-web-front-end/"/>
    <updated>2015-09-01T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2015/09/01/an-introduction-to-web-front-end</id>
    <content type="html"><![CDATA[<p><strong>读史使人明智。——弗兰西斯.培根</strong></p>

<p><br/></p>

<p>学习历史，</p>

<p>可以帮助我们看清现在的决定，</p>

<p>并为以后的发展做好准备。</p>

<p><br/></p>

<p>前端技术，是<strong>界面技术</strong>的一种应用。</p>

<p><u>字符界面</u> <em>DOS</em></p>

<p><u>图形界面</u> <em>GUI</em></p>

<p><u>浏览器界面</u> <em>Browser</em></p>

<p><br/></p>

<p>前端项目，属于B/S类型的<strong>平台体系结构</strong>。</p>

<p><u>文件/服务器</u> <em>F/S</em></p>

<p><u>客户端/服务器</u> <em>C/S</em></p>

<p><u>浏览器/服务器</u> <em>B/S</em></p>

<p><br/></p>

<p>JavaScript，是最流行的<strong>客户端技术</strong>，</p>

<p>其他的还有，<em>Java-Applet Flash ActiveX Silverlight</em></p>

<p><br/></p>

<p>Web前端，是<strong>网页技术</strong>一个发展阶段，</p>

<p>在这个过程中，服务器端经历了，CGI，Web框架，MVC，</p>

<p>客户端经历了，HTML，CSS，AJAX，前端MVC，前端组件化。</p>

<p><br/></p>

<p>JavaScript也推广到了服务器端，</p>

<p><u>服务器端脚本</u> <em>Node.js</em>，</p>

<p><u>数据库</u> <em>MongoDB</em>，</p>

<p><u>WebApp</u> <em>React-Native</em>，</p>

<p><u>桌面应用</u> <em>nw.js</em></p>

<p><br/></p>

<p><strong>总结</strong></p>

<p>前端技术是一个处理<strong>人机交互</strong>的关键环节，</p>

<p>各种技术都汇聚于此，</p>

<p>随着云计算需要，以及移动设备的出现，</p>

<p>前端已经变的越来越丰富多彩，</p>

<p>大有平分天下的趋势。</p>

<p><br/></p>

<h2><strong>前端技术栈</strong></h2>

<p><strong>语言只是一种工具，对一个聪明的程序员来说，用没用过什么工具主要是由他原来的工作需要决定，并不能代表他全部的技能。</strong></p>

<p><strong>——请不要说自己是XX程序员</strong></p>

<p><br/></p>

<p>前端技术浩如烟海，</p>

<p>单纯JavaScript语言来说，也有数不清的细节，</p>

<p>为了有一个整体的印象，我们分类来看。</p>

<p><br/></p>

<p><strong>精一行，必先通十行。</strong></p>

<p><br/></p>

<p><u>浏览器环境</u> <em>IE6~8 IE9+ Chrome Firefox Safari Opera Edge</em></p>

<p><u>HTTP协议</u> <em>URI Cache Session Cookie Request Response</em></p>

<p><u>HTML</u> <em>W3C HTML4.01 HTML5 DOM 语义化</em></p>

<p><u>CSS</u> <em>CSS1~3 选择器 盒模型 Flex 媒体检测 响应式 渲染引擎</em></p>

<p><u>JavaScript</u> <em>EcmaScript3~5~6 Lexical-scope prototype-chain AJAX js引擎</em></p>

<p><u>编辑器</u> <em>Emacs Vim WebStorm Atom Sublime-Text</em></p>

<p><u>发布部署</u> <em>合并 压缩 单元测试 Node.js Grunt Gulp Yeoman Phantom JSLint</em></p>

<p><u>框架类库</u> <em>jQuery Zepto UnderScore Backbone Knockout React AngularJS</em></p>

<p><u>模块管理</u> <em>CommonJS Webpack</em></p>

<p><u>UI框架</u> <em>BootStrap SemanticUI jQueryUI Foundation</em></p>

<p><u>推送技术</u> <em>WebSocket 轮询 长连接</em></p>

<p><u>跨域技术</u> <em>iframe JSONP CORS</em></p>

<p><u>数据可视化</u> <em>D3 Echarts HighCharts Canvas</em></p>

<p><u>异步编程</u> <em>Promise $.Deferred Generator</em></p>

<p><u>CSS预处理器</u> <em>LESS SASS Stylus</em></p>

<p><u>客户端模板</u> <em>Handlebars Haml Jade Mustache</em></p>

<p><u>相关语言</u> <em>CoffeeScript TypeScript Dart WebAssembly</em></p>

<p><u>WebApp/PC</u> <em>React-native ionic</em></p>

<p><br/></p>

<p>以上提到的这些，<strong>几乎成了前端程序员的标配了</strong>，</p>

<p>所以，我们需要很努力，才不会被淘汰。</p>

<p><br/></p>

<p>JavaScript是一个动态弱类型的，原型继承的，函数式的编程语言，</p>

<p>掌握它并不简单，也为了与服务器端程序员愉快的沟通，</p>

<p>我们还要再学习一些<strong>编程语言</strong>。</p>

<p><br/></p>

<p>C/Rust/Go</p>

<p>C#/Java</p>

<p>Scheme/Haskell</p>

<p>PHP/Python/Ruby</p>

<p>Prolog/Erlang</p>

<p><br/></p>

<p>包括命令式，面向对象，函数式，逻辑式，</p>

<p>各种典型的编程泛型。</p>

<p><br/></p>

<h2><strong>少争论多读书</strong></h2>

<p><strong>思而不学则殆。——孔子</strong></p>

<p>我们之所以迷惑，不是因为缺少思考，</p>

<p>而是缺少学习。</p>

<p><br/></p>

<p><strong>前端的书籍</strong>越来越容易找到了，</p>

<p>除了EmcaScript语言规范之外，还有一些有趣的读物。</p>

<p><br/></p>

<p>JavaScript权威指南</p>

<p>JavaScript高级程序设计</p>

<p>JavaScript语言精粹</p>

<p>JavaScript模式</p>

<p>JavaScript DOM高级程序设计</p>

<p>高性能JavaScript编程</p>

<p>JavaScript异步编程</p>

<p>JavaScript忍者的秘密</p>

<p><br/></p>

<p>基于MVC的JavaScript Web富应用开发</p>

<p>jQuery权威指南</p>

<p>犀利开发jQuery内核详解与实践</p>

<p>jQuery Mobile权威指南</p>

<p>用AngularJS开发下一代Web应用</p>

<p>Node.js开发指南</p>

<p>高性能网站建设指南</p>

<p>响应式Web设计</p>

<p><br/></p>

<p>快速软件开发</p>

<p>测试驱动开发</p>

<p>重构</p>

<p>人月神话</p>

<p>敏捷软件开发：原则，模式与实践</p>

<p>面向模式的软件架构</p>

<p>计算机程序的构造与解释</p>

<p><br/></p>

<p>读书是一个愉快的过程。</p>

<p><br/></p>

<h2><strong>参考</strong></h2>

<p><a href="http://wenku.baidu.com/link?url=cGPDDS0nM8fKJgWVzf7YsgagTCfTrM_6U9BwvWg3w8YkjMH11ZA7bWZ7L68Aq_swpvFzOEcYS5I-fZpcpATU1nSfYpH6UW2ZPd4dd6b28py">「浅论CS和BS体系结构」</a></p>

<p><a href="http://blog.jobbole.com/45169/">「Web开发的发展史」</a></p>

<p><a href="http://wenku.baidu.com/link?url=m8fPjYHf5Q8_6hke8GttfLN9qtHpICgFCVtUsC7TYbjq5wb5HPjGGJaMwWp-zFEdfdNnLW4iKh4LfRKPVR71LywoZ4SPSp-3KTGigv8G9ve">「Web的发展史」</a></p>

<p><a href="https://github.com/fouber/blog/issues/10">「前端工程——基础篇」</a></p>

<p><a href="http://javascript.info/tutorial/overview">「Overview: JavaScript, Flash, Java, Silverlight and ActiveX」</a></p>

<p><a href="http://hechuanzhen.iteye.com/blog/1680685">「jQuery,Extjs,YUI,Prototype,Dojo 等JS框架的区别和应用场景简述」</a></p>

<p><a href="http://blog.jobbole.com/45170/">「Web开发技术的演变」</a></p>

<p><a href="http://www.oschina.net/question/2320925_227508">「请不要说自己是Java程序员」</a></p>

<p><a href="https://github.com/unruledboy/WebFrontEndStack">「WebFrontEndStack」</a></p>

<p><a href="http://wenku.baidu.com/link?url=TGWloxxKzDXe2CxwtKUxVVlX_ytO05K5-nH_CJPUlljpkU_Q60gpcoQuRIVrR-xsQtBPHJqv6-e8QcMWEPFtoXTfoD5D4JvyP_0DwAU1rXS">「服务器内容推送技术」</a></p>
]]></content>
  </entry>
  
</feed>
