<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mind | 何幻]]></title>
  <link href="https://thzt.github.io/blog/categories/mind/atom.xml" rel="self"/>
  <link href="https://thzt.github.io/"/>
  <updated>2016-08-13T15:05:46+08:00</updated>
  <id>https://thzt.github.io/</id>
  <author>
    <name><![CDATA[thzt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[专业程序猿的修炼指南]]></title>
    <link href="https://thzt.github.io/blog/2016/08/05/professional-programmer/"/>
    <updated>2016-08-05T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/08/05/professional-programmer</id>
    <content type="html"><![CDATA[<p>《理解专业程序员》一书中提到：</p>

<p>对于有些事情，似乎每个人都是专家。</p>

<p>任何人，只要智商超过80，又懂得一点什么东西，似乎都可以当教师。</p>

<p>任何人，按照广告应征，在小臂上搭一条毛巾，在美国那就是一个侍者了。</p>

<p><br/></p>

<p>编程这种行当也是如此。</p>

<p>如果某程序员说他有15年的编程经验，人们倒会觉得他简直是个智障。</p>

<p>如果他真有那么一点点智商的话，那总应该在14年前就学会全部的编程知识了呀，</p>

<p>在此之后，他就早该做腻了这一行，去换个管理呀，销售呀之类的职位了。</p>

<p><br/></p>

<p>事实上，除非你自己是一个胜任的程序员，否则也就很难衡量一个程序员的工作质量。</p>

<p>世上有很多可怜的企业，从来没能长期留住一个真正胜任的程序员，</p>

<p>因此他们也就没有一套标准来衡量程序员的专业性。</p>

<p><br/></p>

<p>况且，即使是有15年的经验，对于学习编程知识来说也不一定就够用，</p>

<p>除非这位学习者特别一心一意。</p>

<p>是的，专业和业余之间有天壤之别，我们该怎样锻炼自己呢？</p>

<p><br/></p>

<h2><strong>1. 多学习几门语言总是好的</strong></h2>

<p>语言可以影响思维，语言是表达思维的工具，</p>

<p>编程语言也是如此。</p>

<p>如果你没有这种感觉，很有可能是因为你只会一种编程语言。</p>

<p><br/></p>

<p>虽然，那些主流的编程语言，它们在计算能力上都是图灵等价的，</p>

<p>但是，在不同问题上，需要思考的“距离”是不同的。</p>

<p>用某些语言，我们会更容易想到某种方案，</p>

<p>而用另一种语言，我们几乎就难以想到它。</p>

<p><br/></p>

<p>因此，对于见多识广的人，会根据问题迅速想到适用的方案，</p>

<p>而不管是这原本是便于用哪个语言来解决的，</p>

<p>然后再落实到团队和个人，用生产环境中的语言来实现这种方案。</p>

<p><br/></p>

<p>The limits of your language are the limits of your world.</p>

<p>多学几门语言，会让我们看到更宽广的世界。</p>

<p><br/></p>

<h2><strong>2. 坚持写作</strong></h2>

<p>代码是写出来的，文章也是写出来的，</p>

<p>这种联系不是巧合。</p>

<p>“写”的能力，会在文章和代码之间相互影响。</p>

<p>说白了，我们都是在练习表达。</p>

<p><br/></p>

<p>代码的可读性，可维护性，直接关系到了软件的成本和发展趋势，</p>

<p>谁都不想维护一堆烂摊子，不是吗？</p>

<p><br/></p>

<p>写作可以锻炼这种能力，</p>

<p>让我们的思路更顺畅，去更好的组织文字，</p>

<p>用更合适的通俗易懂的方式来表达。</p>

<p>坚持写作会让我们的代码更饱满，</p>

<p>有“抒情”，有“旁白”，有“叙事”，还有“议论”。</p>

<p>而不是通篇的流水。</p>

<p><br/></p>

<p>坚持写作，会让我们成为一名有品位的程序员。</p>

<p><br/></p>

<h2><strong>3. 钻研数学</strong></h2>

<p>学数学自有其价值，并不仅仅是为了学编程。</p>

<p>但钻研数学，会让我们根深蒂固，不易受风浪影响。</p>

<p>业界的每一次浪潮，受波及的都是那些根基缥缈的人们。</p>

<p><br/></p>

<p>学好数学，至少让我们可以认识到不完全<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95">归纳法</a>的局限性，</p>

<p>学好数学，至少让我们可以认识到<a href="https://zh.wikipedia.org/wiki/%E5%93%A5%E5%BE%B7%E5%B0%94%E4%B8%8D%E5%AE%8C%E5%A4%87%E5%AE%9A%E7%90%86">形式化方法的局限性</a>，</p>

<p>学好数学，至少让我们可以认识到<a href="https://zh.wikipedia.org/wiki/%E5%81%9C%E6%9C%BA%E9%97%AE%E9%A2%98">计算机的局限性</a>。</p>

<p>是的，我们想知道我们不能做什么。</p>

<p><br/></p>

<p>我们还想知道哪些是等价的，</p>

<p>这个问题是一个<a href="https://zh.wikipedia.org/wiki/%E7%9F%A9%E9%98%B5">矩阵</a>乘积问题，</p>

<p>这个问题是一个DAG的<a href="https://zh.wikipedia.org/wiki/%E6%8B%93%E6%92%B2%E6%8E%92%E5%BA%8F">拓扑排序</a>问题，</p>

<p>这个问题是一个<a href="https://zh.wikipedia.org/wiki/%E4%B8%8D%E5%8F%AF%E5%88%A4%E5%AE%9A%E9%97%AE%E9%A2%98%E5%88%97%E8%A1%A8">不可判定问题</a>。</p>

<p><br/></p>

<p>钻研数学，会让我们活的更笃定。</p>

<p><br/></p>

<h2><strong>4. 磨炼思路</strong></h2>

<p>真正优秀的程序员是那些专注于认识，理解，沟通和解决问题的人，</p>

<p>软件只是用来提高效率的工具而已。</p>

<p>你是否优秀，不是通过代码的行数来决定的，而是通过你的逻辑，你的思想。</p>

<p>而你的逻辑和思想，将在你所写的代码中体现。</p>

<p>——Clojure的创始人，Rich Hickey</p>

<p><br/></p>

<p>因此，我们和其他人唯一的不同就体现在思路上面，</p>

<p>我们对<a href="http://coolshell.cn/articles/10804.html">XY问题</a>是否敏感，</p>

<p>会不会避免重复劳动，有没有优先级意识，</p>

<p>怎样改善我们的环境，如何<a href="https://book.douban.com/subject/6990284/">布道</a>，</p>

<p>是不是关注工程的质量和风险。</p>

<p><br/></p>

<p>这些都是有效的思维和逻辑，是需要积累和锻炼的，</p>

<p>在遇到问题时，我们不再是无助的，而是可以“推导”出解决方案。</p>

<p>很多时候，这是制胜的唯一方法。</p>

<p><br/></p>

<p>磨炼思路，会让事情变得更清晰可解。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>我们已经听说过一万小时定律了，然而我觉得它并不靠谱，</p>

<p>并不是每个人都适合做程序员，尤其是成为专业人士，</p>

<p>就像写了这么多年作文，也无法成为作家一样。</p>

<p>我们得接受现实，做自己能力范围之内爱好的事情。</p>

<p><br/></p>

<p>如果硬要总结出编程行业门槛的话，我想应该是这样的，</p>

<p>要想学会编程，就需要我们敢于先把未知放下，等羽翼丰满后，回过头来再战。</p>

<p>Don&rsquo;t sweat the stuff you don&rsquo;t understand immediately. Keep moving!</p>

<p>Only people who die very young learn all they really need to know in kindergarten.</p>

<p><br/></p>

<h2><strong>参考</strong></h2>

<p><a href="https://book.douban.com/subject/1866824/">理解专业程序员</a></p>

<p><a href="https://book.douban.com/subject/6990284/">布道之道</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[挑战极限]]></title>
    <link href="https://thzt.github.io/blog/2016/07/18/overcome-the-limitation/"/>
    <updated>2016-07-18T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/07/18/overcome-the-limitation</id>
    <content type="html"><![CDATA[<p>当初，我们选择了一个喜好的领域，</p>

<p>希望有朝一日能成为专家。</p>

<p><br/></p>

<p>可是，后来才发现，</p>

<p>这个领域中已经有了一大批先行者。</p>

<p>他们的经验十分丰富，而我们没有任何优势。</p>

<p><br/></p>

<p>我们因此变得灰心丧气，迷茫怀疑，</p>

<p>觉得自己不是这块料，</p>

<p>肯定还有更好的机会等着我们。</p>

<p><br/></p>

<p>是啊，再这样下去就完了。</p>

<p><br/></p>

<h3>上限</h3>

<p>我们在入行之时就听前辈说过，</p>

<p>要想成为专家，就必须有效的训练自己一万小时，</p>

<p>于是，那段岁月真是刻骨铭心，</p>

<p>每天都在拼命学习。</p>

<p><br/></p>

<p>这样一晃就是好几年，</p>

<p>我们终于有所小成，</p>

<p>可是越努力，越能清晰发现自己能力的上限。</p>

<p><br/></p>

<p>我们可能无法变得更强了。</p>

<p>天赋使然，哪怕我们再努力。</p>

<p><br/></p>

<h3>动摇</h3>

<p>智者在这时候告诫我们，要发挥优势，</p>

<p>结合自己的优势才能找到方向。</p>

<p><br/></p>

<p>于是，我们动摇了，</p>

<p>真的该去学别的了，</p>

<p>目前这个领域果然不是我们的优势所在。</p>

<p><br/></p>

<p>某人，某某人，我们真的永远没办法超越他们，</p>

<p>所以，我们要学他们不擅长的东西，</p>

<p>用优势挑战劣势。</p>

<p><br/></p>

<h3>短暂</h3>

<p>人生是那么的短暂，</p>

<p>一万小时是如此的漫长，</p>

<p>可是青春不在，我们能有几个一万小时挥霍自如？</p>

<p><br/></p>

<p>在任何其他领域，</p>

<p>上限的问题同样会遇到，</p>

<p>优势同样还会变得不是那么明显。</p>

<p><br/></p>

<p>其他领域的专家也不容易，</p>

<p>实际上，以这样的心态，根本上也做不到。</p>

<p><br/></p>

<p>到那时候，我们又该何去何从呢？</p>

<p><br/></p>

<h3>忍耐</h3>

<p>继续保持训练吧，</p>

<p>不要因为没有明显进步而灰心丧气，</p>

<p>更不要沾沾自喜。</p>

<p><br/></p>

<p>最大化每天的收获，拼的是耐心，</p>

<p>拼的是比别人更迟的放弃。</p>

<p><br/></p>

<p>做科研工作的，未必当时看起来那么有天分，</p>

<p>是数十年的积累和努力，改变了自身。</p>

<p><br/></p>

<p>做教育工作的，成为教师未必有那么强烈的愿望，</p>

<p>是数十年的耳濡目染和刻意进取，改变了心态。</p>

<p><br/></p>

<p>拼不过天赋，只是失败者的借口而已。</p>

<p><br/></p>

<h3>埋头苦干</h3>

<p>努力和成绩并不是一个线性关系，</p>

<p>从90分到100分的努力，</p>

<p>可能十倍或百倍于0到60分的努力。</p>

<p><br/></p>

<p>坚持锻炼，触摸到天花板，</p>

<p>如果感觉到自己不再进步时，</p>

<p>很有可能是因为成绩的变化太小了。</p>

<p><br/></p>

<p>这时候，调整训练方式是对的，但是不要轻言放弃。</p>

<p>这个时候放弃，就放弃了成为专家的机会，</p>

<p>放弃了突破自己，放弃了梦想。</p>

<p><br/></p>

<p>真的，我们天生没有任何优势，</p>

<p>除了埋头苦干。</p>

<p><br/></p>

<h3>怀疑</h3>

<p>我们应该意识到危机，</p>

<p>但同样还要意识到，怀疑自己是再正常不过的心理。</p>

<p><br/></p>

<p>怀疑自己训练方式错了，</p>

<p>怀疑自己的是否不适合，</p>

<p>这都是正常的，每个人都会遇到。</p>

<p><br/></p>

<p>可是，狠下心来，不急于求成，</p>

<p>专注于自己的成长，不看外部表现，</p>

<p>就极少有人能办到。</p>

<p><br/></p>

<p>追求及格的人多了，而追求完美的人少之又少。</p>

<p><br/></p>

<h3>坚持</h3>

<p>永远不要放弃，专家是坚持到最后的人们。</p>

<p><br/></p>

<p>他们有丰富的经验，专注的训练，</p>

<p>有锲而不舍的努力，有不屈不挠的毅力。</p>

<p><br/></p>

<p>永远无法超越他们，因为弱者会动摇。</p>

<p>永远无法打败他们，因为试图打败他们的人们，先输给了自己。</p>

<p><br/></p>

<p>总之，超越自己的次数越多，对手就越少。</p>

<p><br/></p>

<h3>结语</h3>

<p>莫道君行早，更有早行人。</p>

<p>——《增广贤文》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重在表达]]></title>
    <link href="https://thzt.github.io/blog/2016/07/01/the-way-to-express/"/>
    <updated>2016-07-01T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/07/01/the-way-to-express</id>
    <content type="html"><![CDATA[<p>如果我们以发展的眼光来看待自身拥有的技能，</p>

<p>就会发现，</p>

<p>练习和使用是两个不同的概念。</p>

<p><br/></p>

<p>我们可以不断练习，越来越熟练，</p>

<p>还可以花时间练习新的技能。</p>

<p>我们也可以越来越会使用已经学会的技能，</p>

<p>对自己的控制能力越来越强。</p>

<p><br/></p>

<p>这其中隐含了一个客观事实在里面，</p>

<p>那就是技能是永远学不完的，</p>

<p>也永远练习不到足够熟练的程度。</p>

<p><br/></p>

<p>因此，我们就需要在练习和使用之间找到平衡，</p>

<p>什么时候增加熟练度，</p>

<p>什么时候学习新技能，</p>

<p>什么时候练习如何使用它们，</p>

<p>怎样才能做到灵活运用。</p>

<p><br/></p>

<h2><strong>能不能先上手</strong></h2>

<p>如果说计算机行业对比其他行业有门槛的话，</p>

<p>想必就只有一个了，</p>

<p>那就是，是否有能力把目前的疑问放下，以后再绕回来解决。</p>

<p><br/></p>

<p>每个概念在第一次遇到的时候，</p>

<p>是依赖于以后某个未知概念才可以理解的。</p>

<p>因此，我们要首先把它们全都装入大脑中，</p>

<p>然后等时机成熟，触类旁通。</p>

<p><br/></p>

<p>某个概念没有理解，就无法理解后续概念，</p>

<p>或者无法使用没有理解的概念，</p>

<p>这是软件从业者最大的障碍。</p>

<p><br/></p>

<p>我们可以设想这样一个场景，</p>

<p>假如我们曾经理解过，但是现在印象模糊了，</p>

<p>那么还不是一样使用它吗？</p>

<p><br/></p>

<p>直觉，和依靠不足的信息进行决策的能力，</p>

<p>也是需要锻炼的。</p>

<p><br/></p>

<h2><strong>什么是基础</strong></h2>

<p>很多人都强调基础的重要性，</p>

<p>那么什么是基础呢？</p>

<p>对软件行业来说，哪些是基础呢？</p>

<p><br/></p>

<p>基础，就是那些，</p>

<p>你感觉用不着，但如果成为专家是显然需要的知识。</p>

<p><br/></p>

<p>是的，那些用不着的知识，</p>

<p>潜移默化的影响着你，</p>

<p>影响每一招每一式的施展，</p>

<p>这才是基础。</p>

<p><br/></p>

<p>例如，我们在做Web开发，</p>

<p>那么网络技术，编译原理，算法，设计模式，等等都是基础。</p>

<p>它们能让我们跳出当前的场景看待问题。</p>

<p><br/></p>

<p>那如果我们做编译器的开发呢，</p>

<p>那么形式语言理论，语义学，类型理论，数理逻辑，等等都是基础。</p>

<p>再深入下去还有，</p>

<p>可见，基础之下还有基础，像冰山一样隐藏在水面之下。</p>

<p><br/></p>

<h2><strong>关键在哪</strong></h2>

<p>如果用一句话形容软件工程师的工作，</p>

<p>我想说，软件工程师，就是用DSL降低问题复杂度的人们。</p>

<p>各行各业解决问题的角度都有不同，</p>

<p>而软件工程师，独爱DSL——领域特定语言。</p>

<p><br/></p>

<p>既然和语言有关，那就需要很强的表达能力，</p>

<p>像优秀的作家一样，词汇量固然重要，</p>

<p>但是如果要让人耐看，就必须表达的好。</p>

<p><br/></p>

<p>因此重点在于设计这些DSL的描述方式上，</p>

<p>在于如何使用已有的知识，进行整合。</p>

<p>这是一种创造性的活动。</p>

<p><br/></p>

<p>拿个篮球活动的例子来引出问题吧，</p>

<p>我曾问过高手们一个问题，</p>

<p>“你怎样保证失误率那么低的？”</p>

<p>“两个办法，训练时努力降低失误率，比赛时，不用失误率高的动作”。</p>

<p><br/></p>

<p>这给了我很强的启示，</p>

<p>原来如何使用是一门艺术，</p>

<p>使用方式决定了最后的表现。</p>

<p><br/></p>

<h2><strong>那么路线是什么</strong></h2>

<p>综上所述，我们得到了一个从入门到成熟的行走路线，</p>

<p>首先，我们要不求甚解的往大脑中塞下很多东西，</p>

<p>并强迫自己使用，还要有足够好的恒心让自己一遍一遍重新回来琢磨它。</p>

<p><br/></p>

<p>然后，我们要向下挖掘那些看起来没用的，但成为专家显然需要的知识。</p>

<p>把这些知识放在水面下，用露出的那一点点“细枝末节”去应付浮躁的潮流。</p>

<p>这样就不会随波逐流了，水深才会心静，心静而气自闲。</p>

<p><br/></p>

<p>最后，我们把重点放在表达上，</p>

<p>不要使用那些不熟练的知识，它们是训练时攻克的目标。</p>

<p>要有能力在紧要关头只用熟练的知识解决问题。</p>

<p><br/></p>

<p>为什么会失误？是因为本来就没有多大可能它会成功。</p>

<p>那么为什么还要用它，而不去选择其他成功率高的方式？</p>

<p>因为没有成功率高的方式吗？那为什么不去训练？</p>

<p>没有什么好练的啊？把那些计划以后再练的练了吧。</p>

<p><br/></p>

<p>这样就变成了一个以训练为本，重在表达的正向循环了。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>做到随机应变，并不是一件容易的事情，</p>

<p>要么基本功太弱，要么没有控制自己的能力总是想使用不纯熟的技能。</p>

<p><br/></p>

<p>没有在比赛场上训练的选手，</p>

<p>也没有线上环境试错的码农。</p>

<p><br/></p>

<p>大家都在打基础，练表达，</p>

<p>基本功诚然重要，但是打基础大家都懂，不是盲区，</p>

<p>重在表达，就很少有人意识到了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不要依赖『道听途说』]]></title>
    <link href="https://thzt.github.io/blog/2016/05/18/do-not-rely-on-the-hearsay/"/>
    <updated>2016-05-18T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/05/18/do-not-rely-on-the-hearsay</id>
    <content type="html"><![CDATA[<p>这几年，信息化的速度明显加快了，</p>

<p>我们获取知识的途径，也大大增多了，</p>

<p>然而，无论是微信，微博，朋友圈，还是论坛，专栏，博客，</p>

<p>大多充斥的是<strong>未经梳理过的碎片化知识</strong>。</p>

<p><br/></p>

<p>我们路过那里，道听途说，</p>

<p>完全凭借别人的只言片语，或他们的心得，去窥探某个领域的内容。</p>

<p>随后，我们马上又急匆匆的转移注意力，把之前看到的都抛之脑后。</p>

<p><br/></p>

<p>似乎，很努力的样子。</p>

<p><br/></p>

<p>结果，</p>

<p>我们虽然看起来什么都懂，却什么也不懂，</p>

<p><strong>阅读了很多科普，也依然不懂科学。</strong></p>

<p><br/></p>

<p>这是危险的。</p>

<p>当我们把努力当做一种习惯的时候，就会忘了反思自己是否在进步。</p>

<p><br/></p>

<p>可是，怎样避免被大量的碎片知识淹没呢？</p>

<p>我们还是要回归本原，<strong>从基础开始，老老实实搭建自己的知识体系</strong>。</p>

<p><br/></p>

<p>对于新知识点，要进行<strong>主动</strong>扩展，</p>

<p>深挖其中的原理和它依赖的内容，<strong>建立起和自己知识体系之间的永久联系</strong>。</p>

<p>只有这样，这块新内容才是有用的，才能为后续的成长做好准备。</p>

<p><br/></p>

<p>必要时，我们还得学会<strong>舍弃</strong>，</p>

<p>过滤大部分信息，虽然它们看起来全都有趣，</p>

<p>从简单处着手，向高大上的方向努力。</p>

<p><br/></p>

<p>于是，</p>

<p>消除浮躁和满怀的斗志吧，回到安静的书房，</p>

<p><strong>打开教科书，静下心来学习</strong>。</p>

<p><br/></p>

<p>读一篇文章，不足以观世界，</p>

<p>阅一部小说，不足以鉴人生。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何突破瓶颈]]></title>
    <link href="https://thzt.github.io/blog/2016/05/12/break-through-the-bottleneck/"/>
    <updated>2016-05-12T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/05/12/break-through-the-bottleneck</id>
    <content type="html"><![CDATA[<p>经常遇到有人说，</p>

<p>我现在处于『<strong>瓶颈期</strong>』，无法突破。</p>

<p><br/></p>

<p>什么是瓶颈期呢？</p>

<p>维基百科上这样解释：</p>

<p>瓶颈期为事物在变化发展过程中因无法改变<strong>自身条件</strong>和<strong>外部环境</strong>的情况下，而产生的一个停滞时期。</p>

<p><br/></p>

<p>这个停滞期在学习过程中会出现很多次，</p>

<p>每次遇到都会觉得无处发力，不能超越自己，</p>

<p>而每次突破，都能感觉到明显的进步。</p>

<p><br/></p>

<p>既然，瓶颈期是一个经常出现的现象，</p>

<p>那么突破它的策略，就有<strong>规律</strong>可循了。</p>

<p>通过仔细的分析，我们下文将看到。</p>

<p><br/></p>

<p>是什么造成了瓶颈期？</p>

<p>为什么无法突破瓶颈？</p>

<p>下一个瓶颈为什么更难突破？</p>

<p><br/></p>

<h2><strong>原因</strong></h2>

<p>所谓学习和进步，实际上指的是<strong>对自己有利的改变。</strong></p>

<p>之所以出现停滞期，是因为我们无法做出这些改变了，</p>

<p>我们无法改变自身或者环境，无法更新自己。</p>

<p><br/></p>

<p>对于大多数人而言，环境只能选择，无法迅速改变它，</p>

<p>而选择环境的过程，也是先从改变自己开始的。</p>

<p><br/></p>

<p>所以，停滞期的原因一下子就明朗了，</p>

<p>那就是<strong>行为习惯造成了我们的惰性，使我们不想或无法做出改变。</strong></p>

<p><br/></p>

<p>不主动做出改变，只依靠环境来影响自己，</p>

<p>长此以往，当我们<strong>适应环境</strong>的时候，</p>

<p>瓶颈期就来了，不可避免的来了。</p>

<p><br/></p>

<p>环境已经无法给我们带来新知识了，</p>

<p>内在的更新意识也没有形成，也没有改变环境的契机出现，</p>

<p>一切还是跟昨天一样，那么的平淡无奇，这就是瓶颈。</p>

<p><br/></p>

<p>因此，不要再沉迷过去了，不要再停留了，</p>

<p><strong>做出改变吧，不要等明天，就从现在开始。</strong></p>

<p><br/></p>

<h2><strong>策略</strong></h2>

<p>我们已经决定做出改变了，不达目的誓不罢休。</p>

<p>可是，为什么我们不知道做什么，向哪个方向改变呢？</p>

<p><br/></p>

<p>往往这个时候，<strong>并不是没有改变的方向，</strong></p>

<p><strong>而是，可以改变的方向太多了，我们不知道选择哪个。</strong></p>

<p>哪个选择是最好的，我一直纠结这个，</p>

<p>于是，我什么都不想做，一直纠结到了明天。</p>

<p><br/></p>

<p>放弃吧，骚年。</p>

<p><strong>何不对每个可能的选择做出敏捷的尝试呢？</strong></p>

<p>我们总是对神秘的事物保持自卑和敬畏，</p>

<p>是因为我们从未主动向前探出一步。</p>

<p><br/></p>

<p>因此，我们的策略也就清晰了。</p>

<p>首先，对每个可能的改变，全部做出<strong>试探</strong>，寻找兴趣点，</p>

<p>然后，找到兴趣点后，确立未来的<strong>目标</strong>，</p>

<p>第三，分析目前的状态和目标之间的<strong>差距</strong>，</p>

<p>最后，制定行之有效的短期<strong>计划</strong>，逐步实现它。</p>

<p><br/></p>

<p>这其实是一个<strong>目标管理过程</strong>，</p>

<p>是管理专家彼得·德鲁克（Peter Drucker）在1954年的名著《管理实践》中最先提出的，</p>

<p>德鲁克认为，<strong>并不是有了工作才有目标，而是相反，有了目标才能确定工作内容。</strong></p>

<p><br/></p>

<p>诚然，目标管理对大多数人来说是一个生疏的概念，</p>

<p>可是，<strong>确定目标</strong>，仍然是大环境下同学们的难题，</p>

<p>无法走出第一步，寻找到<strong>兴趣点</strong>，是应试教育的悲剧。</p>

<p><br/></p>

<h2><strong>包袱</strong></h2>

<p>可能，某些人已经越过了好多个瓶颈期了，</p>

<p>从技术修炼，到团队管理，</p>

<p>从不善交流，到布道表达，</p>

<p>从独善其身，到兼济天下。</p>

<p><br/></p>

<p>他们会发现，<strong>每一个瓶颈期的突破都更难一分</strong>，</p>

<p>我虽然知道要做出改变了，为何还是无法行动？</p>

<p>这是因为历史的包袱和惯性。</p>

<p><br/></p>

<p>可能，曾经对某个领域进行了尝试，心灰意冷，</p>

<p>就失去了以后<strong>再次尝试</strong>的热情。</p>

<p>可能，改变工作地点，会导致拖家带口的行动，</p>

<p>这么大的<strong>麻烦</strong>，会阻碍我们做出最有利的决策。</p>

<p>可能，某个知识点太难了，如果学它，</p>

<p>那意味着我要开始画更大的圆，我<strong>没那么多精力</strong>。</p>

<p><br/></p>

<p>这些都是心理包袱，是一切没有尝试的懒惰者的借口。</p>

<p><br/></p>

<p><strong>是我们的每一次决定，而不是努力，</strong></p>

<p><strong>改变了我们的人生轨迹。</strong></p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>与其说，我们谈论了瓶颈期，</p>

<p>不如说，我们讨论了<strong>改变自己的方法论</strong>。</p>

<p><br/></p>

<p>这个方法，不仅适用于个人，</p>

<p>还适用于团队，企业，等团体组织。</p>

<p><br/></p>

<p>大胆试错，是一个必要的环节，</p>

<p>如何降低试错成本，如何提高试错的速度，</p>

<p>是另一个不小的话题。</p>

<p><br/></p>

<p><strong>失败固然痛苦，但更糟糕的是从未去尝试。——西奧多·罗斯福</strong></p>
]]></content>
  </entry>
  
</feed>
