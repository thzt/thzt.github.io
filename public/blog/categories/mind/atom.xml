<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mind | 何幻]]></title>
  <link href="https://thzt.github.io/blog/categories/mind/atom.xml" rel="self"/>
  <link href="https://thzt.github.io/"/>
  <updated>2016-08-24T14:21:17+08:00</updated>
  <id>https://thzt.github.io/</id>
  <author>
    <name><![CDATA[thzt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[相信不证自明]]></title>
    <link href="https://thzt.github.io/blog/2016/08/24/believed-in-the-absence-of-evidence/"/>
    <updated>2016-08-24T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/08/24/believed-in-the-absence-of-evidence</id>
    <content type="html"><![CDATA[<p>当我们得出某个结论的时候，最容易忽视的一点是，</p>

<p>结论实际上是在某个前提之下才成立的，</p>

<p>如果前提有漏洞，那么结论就不可靠了。</p>

<p><br/></p>

<p>这件事经常会对我们起到警示作用。</p>

<p>让我们有意识的去鉴别前提的真实性，</p>

<p>这可以称之为科学方法，小心的去求证某些假设。</p>

<p><br/></p>

<p>然而，在另一方面，</p>

<p>有能力暂时接受某个尚未判断为真的假设，也是一种能力。</p>

<p>先相信别人，相信不证自明，存疑于来日方长，而不纠结某个断言，</p>

<p>会让我们更容易站在别人的立场看待问题，视野更广。</p>

<p><br/></p>

<p>因此，聪明人的思路总是有很多分支，各个分支都有条件。</p>

<p>那些已经相信的事实，可能只是一个假设，</p>

<p>那些极力怀疑的论点，也有可能为真。</p>

<p><br/></p>

<p><a href="https://book.douban.com/subject/3138847/">大前研一</a>这样说，</p>

<p>解决问题的能力，就是为印证假设不辞劳苦的行动力。</p>

<p><br/></p>

<h3><strong>先让人把事情说完</strong></h3>

<p>当别人表述某个论点的时候，很难同时携带着该论点的证明，</p>

<p>所以，转而让他去证明这个论点，就会打断他的思路，证明完之后还要再跳回来。</p>

<p>不幸的是，现场的不充分的思考，根本不具备清晰证明某个论点的条件，</p>

<p>这也是为什么会议容易被无限延长的原因，</p>

<p>现场很难让别人相信你，可是不相信你的论点，他们就做不到继续往下听。</p>

<p><br/></p>

<p>一个好的权衡之计就是，先让分享者把事情讲完，</p>

<p>哪怕其中包含了很多值得怀疑的论点，</p>

<p>我们先记录下来，最后大家一起，逐个用行动去检验它。</p>

<p><br/></p>

<p>将表述和证明隔开，是有好处的，</p>

<p>夹杂着提到的所有定理之证明过程的教科书是多么的晦涩难懂，</p>

<p>它影响了整本书的知识脉络，也影响了读者的思路，</p>

<p>尽管这些证明是有用的。</p>

<p><br/></p>

<h3><strong>先相信才有必要防止尽信</strong></h3>

<p>上学时，我们学过一篇文章提到，</p>

<p>尽信书，则不如无书，</p>

<p>我觉得这句话坑害了很多人。</p>

<p><br/></p>

<p>它让人们更加容易怀疑某些已被证明的结论，</p>

<p>而不是建立起“承认在某种假设下该结论为真”的科学观，</p>

<p>这大大减缓了我们接受新知识的速度。</p>

<p><br/></p>

<p>人们容易去寻找“到底什么是真的”，这种荒谬问题的结论，</p>

<p>而不是认识到“真理是条件性为真”，这种科学方法的本质。</p>

<p><br/></p>

<p>实际上，首先我们先要做到“信书”，</p>

<p>然后才有必要提醒自己不要“尽信书”。</p>

<p><br/></p>

<h3><strong>证明不是为了让自己更信</strong></h3>

<p>不以发现隐含前提的为动机的证明，只是让自己更相信结论而已。</p>

<p><br/></p>

<p>对每个论点都尝试检验，可以磨炼我们论证的技巧，</p>

<p>但是却并不会加强我们“找到什么才是假设”的能力。</p>

<p><br/></p>

<p>有多少人怀疑狭义相对论，可是，它已经是在光速不变性的这个前提下被证明为真的结论了，</p>

<p>大多数人怀疑论证的过程，而不是怀疑论证的前提，也没有想过去挖掘隐含的前提，</p>

<p>发现和检验前提才是最困难的一步，通过论证结论肯定是可重现的，</p>

<p>多证明一次，只是让自己更相信罢了。</p>

<p><br/></p>

<p>哪怕是在科学研究中，很多结论也是建立在假设之上的，</p>

<p>这些假设在现代条件下可能无法检验，但只要是最终能被检验的就行，</p>

<p>那么我们就能说这个结论不可靠吗？我们宁可相信它是条件性可靠的。</p>

<p><br/></p>

<h3><strong>结语</strong></h3>

<p>相信不证自明，一开始很难办到，因为我们习惯了用证明去说服自己，</p>

<p>实际上，我们脑海中有很多假设是却是未经证明的。</p>

<p><br/></p>

<p>比如，你怎么证明你看到的就是那个事物，你看到的只是它反射的光罢了。</p>

<p>我们确定某人出现了两次，而不是两个同样的人，</p>

<p>是建立在不同的人一定会反射不同的光这种假设上的。</p>

<p>万一，以后科技发达后，可以改变这个假设呢？</p>

<p><br/></p>

<p>因此，到底什么才是真的，这个问题是找不到答案的，</p>

<p>我们只能知道在某个前提下的结论。</p>

<p><br/></p>

<p>此外，我们之所以倚仗证明，</p>

<p>还不是因为我们相信证明可以让经验更可靠吗？</p>

<p>然而这件事本身也是一个前提，但又是不可被证明的，</p>

<p>我们只能说大部分情况确实如此，仅此而已。</p>

<p><br/></p>

<p>那么，这篇文章的结论，你相信吗？</p>

<p>请相信不证自明。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[思路和想象力]]></title>
    <link href="https://thzt.github.io/blog/2016/08/18/imagination/"/>
    <updated>2016-08-18T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/08/18/imagination</id>
    <content type="html"><![CDATA[<p>命题逻辑和一阶谓词逻辑属于古典逻辑范围，</p>

<p>而直觉主义逻辑是一种非经典逻辑，</p>

<p>它不承认排中律，强调命题的证实性而不是真理性。</p>

<p><br/></p>

<p>古典逻辑认为，一个实体的存在可以通过否定它的不存在来证明。</p>

<p>对直觉主义逻辑来说，这是不正确的，</p>

<p>不存在性的否定不表示可能找到存在性的构造证明。</p>

<p><br/></p>

<h3><strong>整合思维</strong></h3>

<p>商业思想家罗杰·马丁，曾采访过50多位成功的领导者，</p>

<p>最终发现，他们大都具有一个非同寻常的特征。</p>

<p><br/></p>

<p>他们愿意而且能够同时接纳两种互相冲突的观点，</p>

<p>在碰到意见冲突时，他们既不慌张，也不是简单的进行非此即彼的取舍，</p>

<p>而是另辟蹊径，提出一个新思路，</p>

<p>既包含了原先两种观点的内容，又比原先两种观点胜出一筹。</p>

<p>罗杰·马丁把这种思考和综合的过程，称为整合性思维。</p>

<p><br/></p>

<h3><strong>智者</strong></h3>

<p>70多年前，美国小说家斯科特·菲茨杰拉德也指出过，</p>

<p>真正智者的特点之一，就是，</p>

<p>能同时容下两个相对立的想法，但仍然保持行动能力。</p>

<p><br/></p>

<h3><strong>应变</strong></h3>

<p>我国古代，三国时期魏国大臣，政治家，军事家司马懿，</p>

<p>在教育孩子时，也曾说过，</p>

<p>夫处世之道，亦即应变之术，岂可偏执一端；</p>

<p>用兵之道亦然如此，皆贵在随机应变。</p>

<p><br/></p>

<h3><strong>趋向的危害</strong></h3>

<p>以上例子我们可以发现，同时遇到两种矛盾的想法是正常的，</p>

<p>非此即彼的断言，反而是片面的。</p>

<p>因此，当我们在生活中发现自己的某种趋向时，就得开始惶恐了，</p>

<p>它的相反面所具有的种种好处，我们得到的将越来越少。</p>

<p><br/></p>

<p>思路和想象力，就是这样对立的两种思维。</p>

<p><br/></p>

<h3><strong>逻辑思维</strong></h3>

<p>思路，可以理解为思维的路径。</p>

<p>大前研一在《思考的技术》一书中提到，</p>

<p>由于绝大多数人都没有养成逻辑思考的习惯，所以就缺少了能够解决问题的思路。</p>

<p>所以人们应该重视导出结论的思维路径，而不是有没有知识。</p>

<p><br/></p>

<p>可见，思路对于解决一个问题，</p>

<p>甚至判断这个问题是否真的构成问题来说，</p>

<p>都是非常重要的。</p>

<p><br/></p>

<p>没有这些思路，我们将很容易迷失。</p>

<p>方案做出来之后，才发现根本没有达到目的，因为我们没有考虑方向，</p>

<p>计划落地后，才发现得不偿失，因为我们没有考虑成本和收益，</p>

<p>项目经常性的延期，小伙伴们苦于加班，因为我们在过程中没有考虑过风险。</p>

<p><br/></p>

<p>这些都是经验教训，可以总结为思维的套路，</p>

<p>按着套路思考的话，我们会避免进入很多误区。</p>

<p><br/></p>

<h3><strong>想象力</strong></h3>

<p>我们感受到了我们的趋向，</p>

<p>我们钟爱思路，那么就会出现问题。</p>

<p><br/></p>

<p>要判断一件事情是否有价值，判断它的影响范围，</p>

<p>常用的思路当然可以帮助我们。</p>

<p>可是，思路会逐渐变成人们的舒适区，</p>

<p>人们更容易相信符合逻辑判断的结论。</p>

<p><br/></p>

<p>从短时间来看，逻辑推理是有用的，</p>

<p>会帮助我们排除那些显然可以被证明为错误的方案，</p>

<p>但是从长时间来看，就不尽然了。</p>

<p><br/></p>

<p>一个长远目标，或者一个战略举措，</p>

<p>根本就无法通过逻辑来推理出来，因为我们所知所感都是朦胧的，</p>

<p>在有创新性的工作中，这一点非常明显。</p>

<p><br/></p>

<p>爱因斯坦这样说，想象力比知识更重要。</p>

<p>是的，科学研究更需要想象力来决定方向，</p>

<p>而逻辑证明只是用来排除那些不正确想法罢了。</p>

<p><br/></p>

<p>想象力，让我们更有远见，</p>

<p>而严谨的思维和卓越的执行能力，让我们可以实现它。</p>

<p><br/></p>

<h3><strong>结语</strong></h3>

<p>那么如何锻炼现象力呢？</p>

<p><br/></p>

<p>我们可以想象一下未来，大胆预测，</p>

<p>我们应该总是尝试做一些意料之外的事情。</p>

<p><br/></p>

<p>我们也可以把不太相关的事物放在一起类比，找出关联，</p>

<p>这两件事情根本毫无关系，那我们让他们相关，</p>

<p>会发生什么好玩的事情？</p>

<p><br/></p>

<p>我们还可以符合逻辑的事情取反，并假设它成立，</p>

<p>想象中我们的世界是颠倒的，因为我们想看到以前看不到的东西。</p>

<p><br/></p>

<p>总之，我们要保持中立，警惕偏执，这样才会同时拥有它们的种种好处。</p>

<p><br/></p>

<p>我们不但要把思维路径记录下来，让人人都能得出相同的决策，降低风险。</p>

<p>我们还要发挥前瞻性和想象力，让我们的工作不可被替代，有远见。</p>

<p><br/></p>

<h3><strong>参考</strong></h3>

<p><a href="https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%A7%89%E4%B8%BB%E4%B9%89%E9%80%BB%E8%BE%91">直觉主义逻辑</a></p>

<p><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E7%9B%B4%E8%A7%89%E4%B8%BB%E4%B9%89">数学直觉主义</a></p>

<p><a href="http://wenku.baidu.com/view/1d94574dfe4733687e21aa8b.html">整合性思维：成功领导人的思考方式</a></p>

<p><a href="https://book.douban.com/subject/3138847/">思考的技术</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[专业程序猿的修炼指南]]></title>
    <link href="https://thzt.github.io/blog/2016/08/05/professional-programmer/"/>
    <updated>2016-08-05T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/08/05/professional-programmer</id>
    <content type="html"><![CDATA[<p>《理解专业程序员》一书中提到：</p>

<p>对于有些事情，似乎每个人都是专家。</p>

<p>任何人，只要智商超过80，又懂得一点什么东西，似乎都可以当教师。</p>

<p>任何人，按照广告应征，在小臂上搭一条毛巾，在美国那就是一个侍者了。</p>

<p><br/></p>

<p>编程这种行当也是如此。</p>

<p>如果某程序员说他有15年的编程经验，人们倒会觉得他简直是个智障。</p>

<p>如果他真有那么一点点智商的话，那总应该在14年前就学会全部的编程知识了呀，</p>

<p>在此之后，他就早该做腻了这一行，去换个管理呀，销售呀之类的职位了。</p>

<p><br/></p>

<p>事实上，除非你自己是一个胜任的程序员，否则也就很难衡量一个程序员的工作质量。</p>

<p>世上有很多可怜的企业，从来没能长期留住一个真正胜任的程序员，</p>

<p>因此他们也就没有一套标准来衡量程序员的专业性。</p>

<p><br/></p>

<p>况且，即使是有15年的经验，对于学习编程知识来说也不一定就够用，</p>

<p>除非这位学习者特别一心一意。</p>

<p>是的，专业和业余之间有天壤之别，我们该怎样锻炼自己呢？</p>

<p><br/></p>

<h2><strong>1. 多学习几门语言总是好的</strong></h2>

<p>语言可以影响思维，语言是表达思维的工具，</p>

<p>编程语言也是如此。</p>

<p>如果你没有这种感觉，很有可能是因为你只会一种编程语言。</p>

<p><br/></p>

<p>虽然，那些主流的编程语言，它们在计算能力上都是图灵等价的，</p>

<p>但是，在不同问题上，需要思考的“距离”是不同的。</p>

<p>用某些语言，我们会更容易想到某种方案，</p>

<p>而用另一种语言，我们几乎就难以想到它。</p>

<p><br/></p>

<p>因此，对于见多识广的人，会根据问题迅速想到适用的方案，</p>

<p>而不管是这原本是便于用哪个语言来解决的，</p>

<p>然后再落实到团队和个人，用生产环境中的语言来实现这种方案。</p>

<p><br/></p>

<p>The limits of your language are the limits of your world.</p>

<p>多学几门语言，会让我们看到更宽广的世界。</p>

<p><br/></p>

<h2><strong>2. 坚持写作</strong></h2>

<p>代码是写出来的，文章也是写出来的，</p>

<p>这种联系不是巧合。</p>

<p>“写”的能力，会在文章和代码之间相互影响。</p>

<p>说白了，我们都是在练习表达。</p>

<p><br/></p>

<p>代码的可读性，可维护性，直接关系到了软件的成本和发展趋势，</p>

<p>谁都不想维护一堆烂摊子，不是吗？</p>

<p><br/></p>

<p>写作可以锻炼这种能力，</p>

<p>让我们的思路更顺畅，去更好的组织文字，</p>

<p>用更合适的通俗易懂的方式来表达。</p>

<p>坚持写作会让我们的代码更饱满，</p>

<p>有“抒情”，有“旁白”，有“叙事”，还有“议论”。</p>

<p>而不是通篇的流水。</p>

<p><br/></p>

<p>坚持写作，会让我们成为一名有品位的程序员。</p>

<p><br/></p>

<h2><strong>3. 钻研数学</strong></h2>

<p>学数学自有其价值，并不仅仅是为了学编程。</p>

<p>但钻研数学，会让我们根深蒂固，不易受风浪影响。</p>

<p>业界的每一次浪潮，受波及的都是那些根基缥缈的人们。</p>

<p><br/></p>

<p>学好数学，至少让我们可以认识到不完全<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95">归纳法</a>的局限性，</p>

<p>学好数学，至少让我们可以认识到<a href="https://zh.wikipedia.org/wiki/%E5%93%A5%E5%BE%B7%E5%B0%94%E4%B8%8D%E5%AE%8C%E5%A4%87%E5%AE%9A%E7%90%86">形式化方法的局限性</a>，</p>

<p>学好数学，至少让我们可以认识到<a href="https://zh.wikipedia.org/wiki/%E5%81%9C%E6%9C%BA%E9%97%AE%E9%A2%98">计算机的局限性</a>。</p>

<p>是的，我们想知道我们不能做什么。</p>

<p><br/></p>

<p>我们还想知道哪些是等价的，</p>

<p>这个问题是一个<a href="https://zh.wikipedia.org/wiki/%E7%9F%A9%E9%98%B5">矩阵</a>乘积问题，</p>

<p>这个问题是一个DAG的<a href="https://zh.wikipedia.org/wiki/%E6%8B%93%E6%92%B2%E6%8E%92%E5%BA%8F">拓扑排序</a>问题，</p>

<p>这个问题是一个<a href="https://zh.wikipedia.org/wiki/%E4%B8%8D%E5%8F%AF%E5%88%A4%E5%AE%9A%E9%97%AE%E9%A2%98%E5%88%97%E8%A1%A8">不可判定问题</a>。</p>

<p><br/></p>

<p>钻研数学，会让我们活的更笃定。</p>

<p><br/></p>

<h2><strong>4. 磨炼思路</strong></h2>

<p>真正优秀的程序员是那些专注于认识，理解，沟通和解决问题的人，</p>

<p>软件只是用来提高效率的工具而已。</p>

<p>你是否优秀，不是通过代码的行数来决定的，而是通过你的逻辑，你的思想。</p>

<p>而你的逻辑和思想，将在你所写的代码中体现。</p>

<p>——Clojure的创始人，Rich Hickey</p>

<p><br/></p>

<p>因此，我们和其他人唯一的不同就体现在思路上面，</p>

<p>我们对<a href="http://coolshell.cn/articles/10804.html">XY问题</a>是否敏感，</p>

<p>会不会避免重复劳动，有没有优先级意识，</p>

<p>怎样改善我们的环境，如何<a href="https://book.douban.com/subject/6990284/">布道</a>，</p>

<p>是不是关注工程的质量和风险。</p>

<p><br/></p>

<p>这些都是有效的思维和逻辑，是需要积累和锻炼的，</p>

<p>在遇到问题时，我们不再是无助的，而是可以“推导”出解决方案。</p>

<p>很多时候，这是制胜的唯一方法。</p>

<p><br/></p>

<p>磨炼思路，会让事情变得更清晰可解。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>我们已经听说过一万小时定律了，然而我觉得它并不靠谱，</p>

<p>并不是每个人都适合做程序员，尤其是成为专业人士，</p>

<p>就像写了这么多年作文，也无法成为作家一样。</p>

<p>我们得接受现实，做自己能力范围之内爱好的事情。</p>

<p><br/></p>

<p>如果硬要总结出编程行业门槛的话，我想应该是这样的，</p>

<p>要想学会编程，就需要我们敢于先把未知放下，等羽翼丰满后，回过头来再战。</p>

<p>Don&rsquo;t sweat the stuff you don&rsquo;t understand immediately. Keep moving!</p>

<p>Only people who die very young learn all they really need to know in kindergarten.</p>

<p><br/></p>

<h2><strong>参考</strong></h2>

<p><a href="https://book.douban.com/subject/1866824/">理解专业程序员</a></p>

<p><a href="https://book.douban.com/subject/6990284/">布道之道</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[挑战极限]]></title>
    <link href="https://thzt.github.io/blog/2016/07/18/overcome-the-limitation/"/>
    <updated>2016-07-18T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/07/18/overcome-the-limitation</id>
    <content type="html"><![CDATA[<p>当初，我们选择了一个喜好的领域，</p>

<p>希望有朝一日能成为专家。</p>

<p><br/></p>

<p>可是，后来才发现，</p>

<p>这个领域中已经有了一大批先行者。</p>

<p>他们的经验十分丰富，而我们没有任何优势。</p>

<p><br/></p>

<p>我们因此变得灰心丧气，迷茫怀疑，</p>

<p>觉得自己不是这块料，</p>

<p>肯定还有更好的机会等着我们。</p>

<p><br/></p>

<p>是啊，再这样下去就完了。</p>

<p><br/></p>

<h3>上限</h3>

<p>我们在入行之时就听前辈说过，</p>

<p>要想成为专家，就必须有效的训练自己一万小时，</p>

<p>于是，那段岁月真是刻骨铭心，</p>

<p>每天都在拼命学习。</p>

<p><br/></p>

<p>这样一晃就是好几年，</p>

<p>我们终于有所小成，</p>

<p>可是越努力，越能清晰发现自己能力的上限。</p>

<p><br/></p>

<p>我们可能无法变得更强了。</p>

<p>天赋使然，哪怕我们再努力。</p>

<p><br/></p>

<h3>动摇</h3>

<p>智者在这时候告诫我们，要发挥优势，</p>

<p>结合自己的优势才能找到方向。</p>

<p><br/></p>

<p>于是，我们动摇了，</p>

<p>真的该去学别的了，</p>

<p>目前这个领域果然不是我们的优势所在。</p>

<p><br/></p>

<p>某人，某某人，我们真的永远没办法超越他们，</p>

<p>所以，我们要学他们不擅长的东西，</p>

<p>用优势挑战劣势。</p>

<p><br/></p>

<h3>短暂</h3>

<p>人生是那么的短暂，</p>

<p>一万小时是如此的漫长，</p>

<p>可是青春不在，我们能有几个一万小时挥霍自如？</p>

<p><br/></p>

<p>在任何其他领域，</p>

<p>上限的问题同样会遇到，</p>

<p>优势同样还会变得不是那么明显。</p>

<p><br/></p>

<p>其他领域的专家也不容易，</p>

<p>实际上，以这样的心态，根本上也做不到。</p>

<p><br/></p>

<p>到那时候，我们又该何去何从呢？</p>

<p><br/></p>

<h3>忍耐</h3>

<p>继续保持训练吧，</p>

<p>不要因为没有明显进步而灰心丧气，</p>

<p>更不要沾沾自喜。</p>

<p><br/></p>

<p>最大化每天的收获，拼的是耐心，</p>

<p>拼的是比别人更迟的放弃。</p>

<p><br/></p>

<p>做科研工作的，未必当时看起来那么有天分，</p>

<p>是数十年的积累和努力，改变了自身。</p>

<p><br/></p>

<p>做教育工作的，成为教师未必有那么强烈的愿望，</p>

<p>是数十年的耳濡目染和刻意进取，改变了心态。</p>

<p><br/></p>

<p>拼不过天赋，只是失败者的借口而已。</p>

<p><br/></p>

<h3>埋头苦干</h3>

<p>努力和成绩并不是一个线性关系，</p>

<p>从90分到100分的努力，</p>

<p>可能十倍或百倍于0到60分的努力。</p>

<p><br/></p>

<p>坚持锻炼，触摸到天花板，</p>

<p>如果感觉到自己不再进步时，</p>

<p>很有可能是因为成绩的变化太小了。</p>

<p><br/></p>

<p>这时候，调整训练方式是对的，但是不要轻言放弃。</p>

<p>这个时候放弃，就放弃了成为专家的机会，</p>

<p>放弃了突破自己，放弃了梦想。</p>

<p><br/></p>

<p>真的，我们天生没有任何优势，</p>

<p>除了埋头苦干。</p>

<p><br/></p>

<h3>怀疑</h3>

<p>我们应该意识到危机，</p>

<p>但同样还要意识到，怀疑自己是再正常不过的心理。</p>

<p><br/></p>

<p>怀疑自己训练方式错了，</p>

<p>怀疑自己的是否不适合，</p>

<p>这都是正常的，每个人都会遇到。</p>

<p><br/></p>

<p>可是，狠下心来，不急于求成，</p>

<p>专注于自己的成长，不看外部表现，</p>

<p>就极少有人能办到。</p>

<p><br/></p>

<p>追求及格的人多了，而追求完美的人少之又少。</p>

<p><br/></p>

<h3>坚持</h3>

<p>永远不要放弃，专家是坚持到最后的人们。</p>

<p><br/></p>

<p>他们有丰富的经验，专注的训练，</p>

<p>有锲而不舍的努力，有不屈不挠的毅力。</p>

<p><br/></p>

<p>永远无法超越他们，因为弱者会动摇。</p>

<p>永远无法打败他们，因为试图打败他们的人们，先输给了自己。</p>

<p><br/></p>

<p>总之，超越自己的次数越多，对手就越少。</p>

<p><br/></p>

<h3>结语</h3>

<p>莫道君行早，更有早行人。</p>

<p>——《增广贤文》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重在表达]]></title>
    <link href="https://thzt.github.io/blog/2016/07/01/the-way-to-express/"/>
    <updated>2016-07-01T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/07/01/the-way-to-express</id>
    <content type="html"><![CDATA[<p>如果我们以发展的眼光来看待自身拥有的技能，</p>

<p>就会发现，</p>

<p>练习和使用是两个不同的概念。</p>

<p><br/></p>

<p>我们可以不断练习，越来越熟练，</p>

<p>还可以花时间练习新的技能。</p>

<p>我们也可以越来越会使用已经学会的技能，</p>

<p>对自己的控制能力越来越强。</p>

<p><br/></p>

<p>这其中隐含了一个客观事实在里面，</p>

<p>那就是技能是永远学不完的，</p>

<p>也永远练习不到足够熟练的程度。</p>

<p><br/></p>

<p>因此，我们就需要在练习和使用之间找到平衡，</p>

<p>什么时候增加熟练度，</p>

<p>什么时候学习新技能，</p>

<p>什么时候练习如何使用它们，</p>

<p>怎样才能做到灵活运用。</p>

<p><br/></p>

<h2><strong>能不能先上手</strong></h2>

<p>如果说计算机行业对比其他行业有门槛的话，</p>

<p>想必就只有一个了，</p>

<p>那就是，是否有能力把目前的疑问放下，以后再绕回来解决。</p>

<p><br/></p>

<p>每个概念在第一次遇到的时候，</p>

<p>是依赖于以后某个未知概念才可以理解的。</p>

<p>因此，我们要首先把它们全都装入大脑中，</p>

<p>然后等时机成熟，触类旁通。</p>

<p><br/></p>

<p>某个概念没有理解，就无法理解后续概念，</p>

<p>或者无法使用没有理解的概念，</p>

<p>这是软件从业者最大的障碍。</p>

<p><br/></p>

<p>我们可以设想这样一个场景，</p>

<p>假如我们曾经理解过，但是现在印象模糊了，</p>

<p>那么还不是一样使用它吗？</p>

<p><br/></p>

<p>直觉，和依靠不足的信息进行决策的能力，</p>

<p>也是需要锻炼的。</p>

<p><br/></p>

<h2><strong>什么是基础</strong></h2>

<p>很多人都强调基础的重要性，</p>

<p>那么什么是基础呢？</p>

<p>对软件行业来说，哪些是基础呢？</p>

<p><br/></p>

<p>基础，就是那些，</p>

<p>你感觉用不着，但如果成为专家是显然需要的知识。</p>

<p><br/></p>

<p>是的，那些用不着的知识，</p>

<p>潜移默化的影响着你，</p>

<p>影响每一招每一式的施展，</p>

<p>这才是基础。</p>

<p><br/></p>

<p>例如，我们在做Web开发，</p>

<p>那么网络技术，编译原理，算法，设计模式，等等都是基础。</p>

<p>它们能让我们跳出当前的场景看待问题。</p>

<p><br/></p>

<p>那如果我们做编译器的开发呢，</p>

<p>那么形式语言理论，语义学，类型理论，数理逻辑，等等都是基础。</p>

<p>再深入下去还有，</p>

<p>可见，基础之下还有基础，像冰山一样隐藏在水面之下。</p>

<p><br/></p>

<h2><strong>关键在哪</strong></h2>

<p>如果用一句话形容软件工程师的工作，</p>

<p>我想说，软件工程师，就是用DSL降低问题复杂度的人们。</p>

<p>各行各业解决问题的角度都有不同，</p>

<p>而软件工程师，独爱DSL——领域特定语言。</p>

<p><br/></p>

<p>既然和语言有关，那就需要很强的表达能力，</p>

<p>像优秀的作家一样，词汇量固然重要，</p>

<p>但是如果要让人耐看，就必须表达的好。</p>

<p><br/></p>

<p>因此重点在于设计这些DSL的描述方式上，</p>

<p>在于如何使用已有的知识，进行整合。</p>

<p>这是一种创造性的活动。</p>

<p><br/></p>

<p>拿个篮球活动的例子来引出问题吧，</p>

<p>我曾问过高手们一个问题，</p>

<p>“你怎样保证失误率那么低的？”</p>

<p>“两个办法，训练时努力降低失误率，比赛时，不用失误率高的动作”。</p>

<p><br/></p>

<p>这给了我很强的启示，</p>

<p>原来如何使用是一门艺术，</p>

<p>使用方式决定了最后的表现。</p>

<p><br/></p>

<h2><strong>那么路线是什么</strong></h2>

<p>综上所述，我们得到了一个从入门到成熟的行走路线，</p>

<p>首先，我们要不求甚解的往大脑中塞下很多东西，</p>

<p>并强迫自己使用，还要有足够好的恒心让自己一遍一遍重新回来琢磨它。</p>

<p><br/></p>

<p>然后，我们要向下挖掘那些看起来没用的，但成为专家显然需要的知识。</p>

<p>把这些知识放在水面下，用露出的那一点点“细枝末节”去应付浮躁的潮流。</p>

<p>这样就不会随波逐流了，水深才会心静，心静而气自闲。</p>

<p><br/></p>

<p>最后，我们把重点放在表达上，</p>

<p>不要使用那些不熟练的知识，它们是训练时攻克的目标。</p>

<p>要有能力在紧要关头只用熟练的知识解决问题。</p>

<p><br/></p>

<p>为什么会失误？是因为本来就没有多大可能它会成功。</p>

<p>那么为什么还要用它，而不去选择其他成功率高的方式？</p>

<p>因为没有成功率高的方式吗？那为什么不去训练？</p>

<p>没有什么好练的啊？把那些计划以后再练的练了吧。</p>

<p><br/></p>

<p>这样就变成了一个以训练为本，重在表达的正向循环了。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>做到随机应变，并不是一件容易的事情，</p>

<p>要么基本功太弱，要么没有控制自己的能力总是想使用不纯熟的技能。</p>

<p><br/></p>

<p>没有在比赛场上训练的选手，</p>

<p>也没有线上环境试错的码农。</p>

<p><br/></p>

<p>大家都在打基础，练表达，</p>

<p>基本功诚然重要，但是打基础大家都懂，不是盲区，</p>

<p>重在表达，就很少有人意识到了。</p>
]]></content>
  </entry>
  
</feed>
