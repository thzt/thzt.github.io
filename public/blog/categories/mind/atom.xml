<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mind | 何幻]]></title>
  <link href="https://thzt.github.io/blog/categories/mind/atom.xml" rel="self"/>
  <link href="https://thzt.github.io/"/>
  <updated>2016-06-02T14:42:46+08:00</updated>
  <id>https://thzt.github.io/</id>
  <author>
    <name><![CDATA[thzt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何应对需求变更]]></title>
    <link href="https://thzt.github.io/blog/2016/06/02/requirement-change/"/>
    <updated>2016-06-02T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/06/02/requirement-change</id>
    <content type="html"><![CDATA[<h2><strong>对需求的误解</strong></h2>

<p>同学们经常提及的需求变更，其实变更的并不是需求，而是需求的实现方案。</p>

<p>首先，我们要对需求和方案进行区分。</p>

<p>需求包括以下几个方面，需求背景，需求目的，需求范围，需求的详细规格，以及错误处理方式。</p>

<p>UI/UE/UX，前端，后端，共同实现了需求，是同一个解决方案的不同侧面。</p>

<p><br/></p>

<p>因此从广义上来讲，开发者之间的内部沟通，不属于需求变更范畴。</p>

<p>软件的大部分问题，存在于开发者之间的沟通上面，而不是开发者对需求的理解上面。</p>

<p>只有理解了什么是需求，才能衡量出需求是否变更了。</p>

<p><br/></p>

<blockquote><p>在软件工程中，需求分析指的是在建立一个新的或改变一个现存的电脑系统时描写新系统的目的、范围、定义和功能时所要做的所有的工作。</p></blockquote>

<p><br/></p>

<h2><strong>从方法到目的</strong></h2>

<p>实现一个目的有多种方法，如何看到这些方法的共性呢？</p>

<p>最快的方式就是找到这些方法要解决的问题。</p>

<p>软件是以解决问题为目的的，不能解决问题的软件没有任何作用。</p>

<p><br/></p>

<p>这要分两方面来说，</p>

<p>其一，当产品经理发起需求变更时，我们要积极配合。因为，需求变更的主要原因在于当前软件不能解决某些问题。</p>

<p>不配合，那么做出的软件就没有用，我们的工作就没有价值。</p>

<p><br/></p>

<p>其二，我们要知道当前软件要解决的问题是什么，才能灵活的改变策略。</p>

<p>甚至可以利用工程师的领域特长，找到更合适的解决方案。</p>

<p><br/></p>

<h2><strong>变更与管控</strong></h2>

<p>我们不怕变化，怕的是对变化失去控制。</p>

<p>当产品经理发起需求变更时，我们要重新安排未完成任务的优先级，这是需要与产品经理沟通的。</p>

<p>因为，变更是需要成本的，意味着原计划要做的某些事情不能做完了，我们得让他们知道。</p>

<p><br/></p>

<p>我们自己首先得有一个任务列表。</p>

<p>然后以优先级的方式管理待办事项。</p>

<p><br/></p>

<h2><strong>知识共享</strong></h2>

<p>不同的人，对需求的理解不同。</p>

<p>每个人都会按照自己的方式去实现想法。</p>

<p>如何设计一个策略，怎样实现这个设计，大相径庭。</p>

<p><br/></p>

<p>因此，我们要预先做一些知识的分享。</p>

<p>在设计阶段排除问题，会比在实现阶段排除问题，成本低很多。</p>

<p>我们不妨谈一谈，我计划怎样解决这个问题，我打算怎样实现。</p>

<p>因为，很有可能，这个计划就是错的。</p>

<p><br/></p>

<h2><strong>主动去沟通</strong></h2>

<p>如果我想改某个文件，担心其他人也在改，以后合并起来麻烦，怎么办？</p>

<p>去问他/她。</p>

<p>某位同学的代码我看不懂，不敢改怎么办？</p>

<p>去问他/她。</p>

<p>产品经理对需求的描述不清楚，我理解不了怎么办？</p>

<p>去问他/她。</p>

<p>交互稿中文案可能有错误，逻辑矛盾，怎么办？</p>

<p>去问他/她。</p>

<p>测试提了一个缺陷，可是我不知道在说什么，也不知道在哪个场景中会出现，怎么办？</p>

<p>去问他/她。</p>

<p><br/></p>

<p>&ldquo;问"，这个简单的动作，会节省大量的时间。</p>

<p>如果不想打断别人的工作，可以用一些非即时沟通工具。</p>

<p>或者走到他旁边，让他注意到你时，你再发问。</p>

<p><br/></p>

<p>提问，并不愚蠢，不问才蠢。</p>

<p>要相信大部分工程师都是喜欢被问的。</p>

<p><br/></p>

<h2><strong>让设计灵活响应变更</strong></h2>

<p>好的设计，在变更中灵活响应。</p>

<p>这实际上是对设计提出了更高的要求，不止是实现功能那么简单了。</p>

<p><br/></p>

<p>因为现实世界是发展中的，业务场景也在与时俱进。</p>

<p>因此，需求本身不可能是不变的。</p>

<p>软件是一个解决动态问题的方案。</p>

<p><br/></p>

<p>程序设计是用来解决发展中问题的。</p>

<p>我们要看到问题的发展趋势，结合整个过程进行设计。</p>

<p>给未来留下余地，不局限于当前状态进行设计。</p>

<p><br/></p>

<p>需求你怎么改都行，因为你不得不改，我也不得不照做，不然软件本身就没用了。</p>

<p>但是我的设计保障我修改的成本最低。</p>

<p><br/></p>

<h2><strong>原谅别人的失误</strong></h2>

<p>人非圣贤孰能无过。</p>

<p>我们会因为手误打错代码，也会因为大脑一时短路犯逻辑错误。</p>

<p>那么，产品经理同样也会对需求理解和描述产生偏差。</p>

<p>我们不能要求别人做到完美。</p>

<p><br/></p>

<p>一方面，我们要原谅他们，但要让他们知道大家的代价。</p>

<p>另一方面，我们要听思想，不要听描述。抓住中心思想，忽略细节。</p>

<p><br/></p>

<p>严于律己，宽以待人。</p>

<h2><strong>结语</strong></h2>

<p>大部分软件从业者，没有软件工程相关的培训，也没有阅读过相关书籍，</p>

<p>是依靠自己的感觉来做软件的。</p>

<p><br/></p>

<p>结果会沿用一些不恰当的类比来理解软件，</p>

<p>也会逐渐形成小作坊式的软件开发过程。</p>

<p>当团队规模扩大时，问题就会越来越严重。</p>

<p><br/></p>

<p>不过，没关系，这有什么。</p>

<p>痛了才会想办法去解决，也无需过度设计。</p>

<p>只是现在我们是否该学一些软件工程的知识了呢？</p>

<p><br/></p>

<p><strong>参考：</strong></p>

<p><a href="https://book.douban.com/subject/1007738/">快速软件开发</a></p>

<p><a href="https://book.douban.com/subject/1140457/">敏捷软件开发 : 原则、模式与实践</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不要依赖『道听途说』]]></title>
    <link href="https://thzt.github.io/blog/2016/05/18/do-not-rely-on-the-hearsay/"/>
    <updated>2016-05-18T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/05/18/do-not-rely-on-the-hearsay</id>
    <content type="html"><![CDATA[<p>这几年，信息化的速度明显加快了，</p>

<p>我们获取知识的途径，也大大增多了，</p>

<p>然而，无论是微信，微博，朋友圈，还是论坛，专栏，博客，</p>

<p>大多充斥的是<strong>未经梳理过的碎片化知识</strong>。</p>

<p><br/></p>

<p>我们路过那里，道听途说，</p>

<p>完全凭借别人的只言片语，或他们的心得，去窥探某个领域的内容。</p>

<p>随后，我们马上又急匆匆的转移注意力，把之前看到的都抛之脑后。</p>

<p><br/></p>

<p>似乎，很努力的样子。</p>

<p><br/></p>

<p>结果，</p>

<p>我们虽然看起来什么都懂，却什么也不懂，</p>

<p><strong>阅读了很多科普，也依然不懂科学。</strong></p>

<p><br/></p>

<p>这是危险的。</p>

<p>当我们把努力当做一种习惯的时候，就会忘了反思自己是否在进步。</p>

<p><br/></p>

<p>可是，怎样避免被大量的碎片知识淹没呢？</p>

<p>我们还是要回归本原，<strong>从基础开始，老老实实搭建自己的知识体系</strong>。</p>

<p><br/></p>

<p>对于新知识点，要进行<strong>主动</strong>扩展，</p>

<p>深挖其中的原理和它依赖的内容，<strong>建立起和自己知识体系之间的永久联系</strong>。</p>

<p>只有这样，这块新内容才是有用的，才能为后续的成长做好准备。</p>

<p><br/></p>

<p>必要时，我们还得学会<strong>舍弃</strong>，</p>

<p>过滤大部分信息，虽然它们看起来全都有趣，</p>

<p>从简单处着手，向高大上的方向努力。</p>

<p><br/></p>

<p>于是，</p>

<p>消除浮躁和满怀的斗志吧，回到安静的书房，</p>

<p><strong>打开教科书，静下心来学习</strong>。</p>

<p><br/></p>

<p>读一篇文章，不足以观世界，</p>

<p>阅一部小说，不足以鉴人生。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何突破瓶颈]]></title>
    <link href="https://thzt.github.io/blog/2016/05/12/break-through-the-bottleneck/"/>
    <updated>2016-05-12T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/05/12/break-through-the-bottleneck</id>
    <content type="html"><![CDATA[<p>经常遇到有人说，</p>

<p>我现在处于『<strong>瓶颈期</strong>』，无法突破。</p>

<p><br/></p>

<p>什么是瓶颈期呢？</p>

<p>维基百科上这样解释：</p>

<p>瓶颈期为事物在变化发展过程中因无法改变<strong>自身条件</strong>和<strong>外部环境</strong>的情况下，而产生的一个停滞时期。</p>

<p><br/></p>

<p>这个停滞期在学习过程中会出现很多次，</p>

<p>每次遇到都会觉得无处发力，不能超越自己，</p>

<p>而每次突破，都能感觉到明显的进步。</p>

<p><br/></p>

<p>既然，瓶颈期是一个经常出现的现象，</p>

<p>那么突破它的策略，就有<strong>规律</strong>可循了。</p>

<p>通过仔细的分析，我们下文将看到。</p>

<p><br/></p>

<p>是什么造成了瓶颈期？</p>

<p>为什么无法突破瓶颈？</p>

<p>下一个瓶颈为什么更难突破？</p>

<p><br/></p>

<h2><strong>原因</strong></h2>

<p>所谓学习和进步，实际上指的是<strong>对自己有利的改变。</strong></p>

<p>之所以出现停滞期，是因为我们无法做出这些改变了，</p>

<p>我们无法改变自身或者环境，无法更新自己。</p>

<p><br/></p>

<p>对于大多数人而言，环境只能选择，无法迅速改变它，</p>

<p>而选择环境的过程，也是先从改变自己开始的。</p>

<p><br/></p>

<p>所以，停滞期的原因一下子就明朗了，</p>

<p>那就是<strong>行为习惯造成了我们的惰性，使我们不想或无法做出改变。</strong></p>

<p><br/></p>

<p>不主动做出改变，只依靠环境来影响自己，</p>

<p>长此以往，当我们<strong>适应环境</strong>的时候，</p>

<p>瓶颈期就来了，不可避免的来了。</p>

<p><br/></p>

<p>环境已经无法给我们带来新知识了，</p>

<p>内在的更新意识也没有形成，也没有改变环境的契机出现，</p>

<p>一切还是跟昨天一样，那么的平淡无奇，这就是瓶颈。</p>

<p><br/></p>

<p>因此，不要再沉迷过去了，不要再停留了，</p>

<p><strong>做出改变吧，不要等明天，就从现在开始。</strong></p>

<p><br/></p>

<h2><strong>策略</strong></h2>

<p>我们已经决定做出改变了，不达目的誓不罢休。</p>

<p>可是，为什么我们不知道做什么，向哪个方向改变呢？</p>

<p><br/></p>

<p>往往这个时候，<strong>并不是没有改变的方向，</strong></p>

<p><strong>而是，可以改变的方向太多了，我们不知道选择哪个。</strong></p>

<p>哪个选择是最好的，我一直纠结这个，</p>

<p>于是，我什么都不想做，一直纠结到了明天。</p>

<p><br/></p>

<p>放弃吧，骚年。</p>

<p><strong>何不对每个可能的选择做出敏捷的尝试呢？</strong></p>

<p>我们总是对神秘的事物保持自卑和敬畏，</p>

<p>是因为我们从未主动向前探出一步。</p>

<p><br/></p>

<p>因此，我们的策略也就清晰了。</p>

<p>首先，对每个可能的改变，全部做出<strong>试探</strong>，寻找兴趣点，</p>

<p>然后，找到兴趣点后，确立未来的<strong>目标</strong>，</p>

<p>第三，分析目前的状态和目标之间的<strong>差距</strong>，</p>

<p>最后，制定行之有效的短期<strong>计划</strong>，逐步实现它。</p>

<p><br/></p>

<p>这其实是一个<strong>目标管理过程</strong>，</p>

<p>是管理专家彼得·德鲁克（Peter Drucker）在1954年的名著《管理实践》中最先提出的，</p>

<p>德鲁克认为，<strong>并不是有了工作才有目标，而是相反，有了目标才能确定工作内容。</strong></p>

<p><br/></p>

<p>诚然，目标管理对大多数人来说是一个生疏的概念，</p>

<p>可是，<strong>确定目标</strong>，仍然是大环境下同学们的难题，</p>

<p>无法走出第一步，寻找到<strong>兴趣点</strong>，是应试教育的悲剧。</p>

<p><br/></p>

<h2><strong>包袱</strong></h2>

<p>可能，某些人已经越过了好多个瓶颈期了，</p>

<p>从技术修炼，到团队管理，</p>

<p>从不善交流，到布道表达，</p>

<p>从独善其身，到兼济天下。</p>

<p><br/></p>

<p>他们会发现，<strong>每一个瓶颈期的突破都更难一分</strong>，</p>

<p>我虽然知道要做出改变了，为何还是无法行动？</p>

<p>这是因为历史的包袱和惯性。</p>

<p><br/></p>

<p>可能，曾经对某个领域进行了尝试，心灰意冷，</p>

<p>就失去了以后<strong>再次尝试</strong>的热情。</p>

<p>可能，改变工作地点，会导致拖家带口的行动，</p>

<p>这么大的<strong>麻烦</strong>，会阻碍我们做出最有利的决策。</p>

<p>可能，某个知识点太难了，如果学它，</p>

<p>那意味着我要开始画更大的圆，我<strong>没那么多精力</strong>。</p>

<p><br/></p>

<p>这些都是心理包袱，是一切没有尝试的懒惰者的借口。</p>

<p><br/></p>

<p><strong>是我们的每一次决定，而不是努力，</strong></p>

<p><strong>改变了我们的人生轨迹。</strong></p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>与其说，我们谈论了瓶颈期，</p>

<p>不如说，我们讨论了<strong>改变自己的方法论</strong>。</p>

<p><br/></p>

<p>这个方法，不仅适用于个人，</p>

<p>还适用于团队，企业，等团体组织。</p>

<p><br/></p>

<p>大胆试错，是一个必要的环节，</p>

<p>如何降低试错成本，如何提高试错的速度，</p>

<p>是另一个不小的话题。</p>

<p><br/></p>

<p><strong>失败固然痛苦，但更糟糕的是从未去尝试。——西奧多·罗斯福</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[出奇制胜]]></title>
    <link href="https://thzt.github.io/blog/2016/04/27/surprise-move/"/>
    <updated>2016-04-27T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/04/27/surprise-move</id>
    <content type="html"><![CDATA[<p>孙子兵法『兵势篇』中提到，</p>

<p>凡战者，以正合，以奇胜。</p>

<p><br/></p>

<p>战争一开始时局势不太明朗，双方旗鼓相当时就是『以正合』的阶段，</p>

<p>而到后来局势开始明朗，到了决战时刻就是『以奇胜』的时候。</p>

<p><br/></p>

<p>对于『以奇胜』，不同的人有不同的解释，这很正常，</p>

<p>有人说『奇』读作ji，表示预备队，</p>

<p>然而，理解为qi，也无碍，只看目前哪种理解对我们有用。</p>

<p><br/></p>

<p>学习过程，就好像一场持久战，</p>

<p>个人的竞争力与我们采用的学习策略紧密相关。</p>

<p>出奇制胜，指的是用对方意料不到的方法取得胜利。</p>

<p><br/></p>

<p>如何做到这一点呢？</p>

<p>还要从几个层面来说明。</p>

<p><br/></p>

<h2><strong>先不败而后谋胜</strong></h2>

<p>无论从事什么行业，学习什么领域的知识，</p>

<p>扎实的基本功都是很重要的，</p>

<p>为什么呢？</p>

<p><br/></p>

<p>因为，首先要做到不被轻易打败，才能抓住获胜的机会。</p>

<p><br/></p>

<p>以正兵合战，就是这个道理。</p>

<p>合战时输了，奇兵就没有用武之地了。</p>

<p><br/></p>

<p>这个道理还可以用来指导团队建设，</p>

<p>只有在平时不溃败，在关键时期才能发挥更大力量。</p>

<p><br/></p>

<p>怎样才能做到不败呢？</p>

<p>这就要求我们乐于向其他人学习，关注别人在做什么，</p>

<p>用别人的优点，对比自己的弱点，努力弥补。</p>

<p><br/></p>

<p>正面看没有弱点，是制胜的先决条件。</p>

<p><br/></p>

<h2><strong>行进中开火</strong></h2>

<p>Joel Spolsky在『Fire And Motion』中提到，</p>

<p>在进行中开火，你要一边开火一边朝着敌人冲过去，</p>

<p>火力让敌人抬不起头来，不能朝你开火。</p>

<p>前进了，你就可以占领阵地接近敌人，从而搞清楚形势，增加胜算。</p>

<p><br/></p>

<p>在学习过程中，有很多敌军向我方开火的例子。</p>

<p><br/></p>

<p>各路大神发表了数不胜数的文章，会让我们乱了阵脚，</p>

<p>我们无法达到他们中任何一个人的高度。</p>

<p>各个公司，发布了眼花缭乱的类库，框架，开发工具，</p>

<p>让我们沉浸在跟风中无法自拔。</p>

<p><br/></p>

<p>这是敌军在向我们开火呀。</p>

<p><br/></p>

<p>根据别人的优势来规划自己的学习路线，</p>

<p>就会时刻处于被动。</p>

<p>没有自己的优势，就好比刺刀没有开刃一样。</p>

<p><br/></p>

<p>因此，我们要认识自己，找到，</p>

<p>行业的需要，自己的优势，别人的劣势，</p>

<p>三线合一，敢于亮剑。</p>

<p><br/></p>

<h2><strong>后劲十足</strong></h2>

<p>司马懿说过，『夫处世之道，亦即应变之术，岂可偏执一端？』</p>

<p>我们再来看下，如果『奇』理解为ji，我们还有什么收获。</p>

<p><br/></p>

<p>奇兵，指的是预备队，</p>

<p>『以正合，以奇ji胜』，可以解释为，</p>

<p>不要一下子把所有的牌都打完，留一些在手上，关键时候打出去。</p>

<p><br/></p>

<p>这就告诉我们，要留有余地，保持后劲。</p>

<p>做人的道理也是如此，学习和成长都是悄悄完成的。</p>

<p>后劲也必须要有顽强的毅力才能打造出来。</p>

<p><br/></p>

<p>互联网时代，碎片化知识遍布，分散了我们的精力，</p>

<p>让我们没有时间系统的学习任何一块知识，</p>

<p>以奇ji胜，指导我们，在课下静下心来系统学习，维持后劲。</p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>大家都在学习，那么学习的策略就有了意义，</p>

<p>大家都在努力，那么努力的方向就有了意义。</p>

<p><br/></p>

<p>知识只是学习内容的一种，</p>

<p>对学习策略的调整，本身也是一种学习吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[教育和职业]]></title>
    <link href="https://thzt.github.io/blog/2016/03/18/education-and-career/"/>
    <updated>2016-03-18T00:00:00+08:00</updated>
    <id>https://thzt.github.io/blog/2016/03/18/education-and-career</id>
    <content type="html"><![CDATA[<p><link href="https://thzt.github.io/stylesheets/p.css" rel="stylesheet"/></p>

<p>随着工作年限的增加，职业路线的明确，越来越多关心我的朋友，对我大学专业和现在从事的职业产生了疑问。
我是一个物理学专业的学生，研究生专业也选择了理论物理，可为什么目前从事软件开发工作呢？
当我被问及此事时，总是难以简要的回答。</p>

<p>职业的选择是一个重要的事情，我明白失败的方式只有一种那就是半途而废。
经过一段时间的仔细考虑，我决定用这篇文章说清我心里的想法。
我区分开了教育的目的，和职业的需要，教育的目的并不是为了就业，而是为就业做好准备。</p>

<p><br/></p>

<h2><strong>教育的目的是为了打好基础</strong></h2>

<p>1693年，洛克在他的《教育漫话》中提出，『英国教育的目的是培养绅士，这种绅士，其实就是社会精英。』
我非常认可这种观点，教育的目的应该是给未来的职业发展打好基础，学那些在社会中无法静下心来学的知识。
教育和社会需要脱节，是当今社会浮躁的表现。</p>

<p>我庆幸自己学了基础学科，学习了自然科学，物理学专业的课表是把日程全占满的，我由衷的自豪。
我学过高等数学，线性代数，数学物理方法，概率论，学过力热光电原子物理，四大力学，激光原理，固体物理，学过模拟电路，数字电路，单片机，VB，C++。
这让我掌握了一套科学方法去理解这个世界，让我学会了用严谨的治学态度去做看待任何事情。
读研以后，我又学了高量，广相，李代数，学过微分流形，纤维丛，量子场论。
我对物理学有浓厚的兴趣，并且学了它，没有留下任何遗憾，我不用一辈子纠结自然界的科普问题了。</p>

<p>在这个过程中，最重要的是，我锻炼了学习能力，学会了把知识传递给别人，学会了交流，以及学会了把钻研精神用于生活中的方方面面。</p>

<p><br/></p>

<h2><strong>职业发展过程中需要坚持学习</strong></h2>

<p>在毕业时，我面临着两种选择，要么继续研究物理，要么走向社会。
经过仔细分析自己的优势和劣势，以及家庭条件，还有进行了市场调研，包括自己的兴趣，我选择了程序员这个职业。
软件是一个低门槛，但是后期学习曲线非常陡峭的行业，这就是为何程序员总是容易『吃青春饭』的原因了。</p>

<p>刚入行时，我查询到计算机专业的本科生学了这些知识，离散数学，编程语言，计算机组成原理，数据库，数据结构与算法，操作系统，计算机网络，编译原理，软件工程。
专业方面还有，数据挖掘，机器学习，人工智能等等。
于是，我找到了相应的书籍，努力学习，软件绝不是编程这么简单，我要做专业人士。</p>

<p>这才发现，当我有了物理学的基础和学习能力之后，自学它们并不困难。
经过3年多的努力，自我感觉已经达到计算机专业本科生的水平了，在部分自己感兴趣的领域也学的较为深入。
比如，lambda演算，类型理论，逻辑学。
编程语言方面，Scheme和Haskell也看得比较多，能在社区帮助一些初学者，回答一些简单的问题了。</p>

<p>到这里为止，在这个行业我算才入门了。后面的职业发展，才可以围绕这些基础建立起来。
以上的学习过程以及书单，请浏览：<a href="http://thzt.github.io/blog/2016/01/29/computer-science/">真实在哪里</a></p>

<p>我想，如果就业时，我选择的不是计算机行业，比如，教师行业，或者任何其他行业，我也会先把领域中的基础知识学好，再谋求发展。
学校教育学到的基础知识，以及锻炼出来的学习能力，原来如此重要啊。
教育的目的确实不应该向某个特定行业提供开箱即用的专才。</p>

<p><br/></p>

<h2><strong>有强大的学习能力才能做好前端</strong></h2>

<p>我从进入计算机行业起，就选择了前端，当时做过大量的调研，也查阅了很多圈内人士的文章。
学习前端与学习其他任何知识并没有什么不同，我只是把当时市面上能找到的关于JavaScript的好书看了一遍。
JavaScript权威指南，JavaScript高级编程，JavaScrip DOM高级程序设计，JavaScript模式，JavaScript精粹，高性能JavaScript，JavaScript异步编程，JavaScript设计模式，Secrets of the JavaScript Ninja，基于MVC的JavaScript Web富应用开发。</p>

<p>看完这些我心里就有底气了。CSS方面，我看的书较少，这里就不列了，工作需要的那些而已。
前端方面有一个特点，因为JavaScript这个语言细节特别多，对语言规范EcmaScript的学习就至关重要。
我从EcmaScript 3，看到了EcmaScript 5，然后就是最近的EcmaScript 2015，和Draft版的EcmaScript 2017。</p>

<p>看着前端这个方向发展迅猛，不禁又一次感叹基本功的重要性，当大家同时学一个知识点的时候，我有能力更快的学会它。
一些新兴的名词，immutable，flux，redux，FRP，等等，有了函数式语言的基础后，很容易理解它们。
这样才能做到心不乱，于是脚步才不会乱。</p>

<p>关于前端技术栈和编程语言对我的影响，请浏览：<a href="http://thzt.github.io/blog/2015/09/01/an-introduction-to-web-front-end/">前端程序员的自我修养</a>，<a href="http://thzt.github.io/blog/2015/06/04/language/">语言的威力</a></p>

<p><br/></p>

<h2><strong>结语</strong></h2>

<p>当我列举书单的时候，我自己都觉得这看起来太浮躁了，我们无法通过言语来看出一个人背后的努力。</p>

<p>还记得，刚入行时早晨6点爬起来，看完50页书才去上班，还得保证是部门去的最早的那个；
还记得，晚上制定的50页计划，读完了才可以睡觉；
还记得，在项目组各处流窜，就是为了遇到更多的问题，赶紧学习并记录下来；
还记得，过年在家时，医院陪床时，地铁上，手机中闪亮的电子书；
还记得，无数次晚上忽然醒了，拿起手机，记下关于编程方法的点点滴滴。</p>

<p>如果不得不用十年才能学会编程，我情愿每天多花一个小时，让这个梦想早些实现。</p>

<p>蚓无爪牙之利，筋骨之强，上食埃土，下饮黄泉，用心一也。蟹六跪而二螯，非蛇鳝之穴无可寄托者，用心躁也。——荀子《劝学》</p>
]]></content>
  </entry>
  
</feed>
